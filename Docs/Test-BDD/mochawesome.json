{
  "reportTitle": "buzzer.click",
  "reportPageTitle": "Mochawesome Report Card",
  "stats": {
    "suites": 98,
    "tests": 202,
    "passes": 202,
    "pending": 0,
    "failures": 0,
    "start": "2017-09-11T04:54:03.885Z",
    "end": "2017-09-11T04:54:04.705Z",
    "duration": 820,
    "testsRegistered": 202,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "AddContestantResponse",
        "suites": [
          {
            "title": "#wasSuccessful",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "AddContestantResponse #wasSuccessful should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.wasSuccessful = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "cdb0043b-a0f1-460a-9480-be0af3573daa",
                "parentUUID": "f74ddc0d-31aa-4f66-9207-d4cf4f1123fd",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "AddContestantResponse #wasSuccessful should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._wasSuccessful = <span class=\"hljs-literal\">true</span>;<br>r.wasSuccessful.should.be.true();",
                "isRoot": false,
                "uuid": "25c5bd52-d1c3-43e9-b7fa-75c18f98b7ac",
                "parentUUID": "f74ddc0d-31aa-4f66-9207-d4cf4f1123fd",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/AddContestantResponseTests.js",
            "uuid": "f74ddc0d-31aa-4f66-9207-d4cf4f1123fd",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/AddContestantResponseTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "AddContestantResponse #wasSuccessful should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.wasSuccessful = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "cdb0043b-a0f1-460a-9480-be0af3573daa",
                "parentUUID": "f74ddc0d-31aa-4f66-9207-d4cf4f1123fd",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "AddContestantResponse #wasSuccessful should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._wasSuccessful = <span class=\"hljs-literal\">true</span>;<br>r.wasSuccessful.should.be.true();",
                "isRoot": false,
                "uuid": "25c5bd52-d1c3-43e9-b7fa-75c18f98b7ac",
                "parentUUID": "f74ddc0d-31aa-4f66-9207-d4cf4f1123fd",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#enquireForTeamLeaderPosition",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "AddContestantResponse #enquireForTeamLeaderPosition should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r._enquireForTeamLeaderPosition.should.be.true();",
                "isRoot": false,
                "uuid": "f564fa9c-83e1-4cc2-b92a-669241c798d1",
                "parentUUID": "2f5788cc-9e58-41c8-815f-27aa8e7b16f9",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "AddContestantResponse #enquireForTeamLeaderPosition should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r.enquireForTeamLeaderPosition.should.be.true();",
                "isRoot": false,
                "uuid": "57091cd9-0543-45c7-a3c3-66a31874ceec",
                "parentUUID": "2f5788cc-9e58-41c8-815f-27aa8e7b16f9",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/AddContestantResponseTests.js",
            "uuid": "2f5788cc-9e58-41c8-815f-27aa8e7b16f9",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/AddContestantResponseTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "AddContestantResponse #enquireForTeamLeaderPosition should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r._enquireForTeamLeaderPosition.should.be.true();",
                "isRoot": false,
                "uuid": "f564fa9c-83e1-4cc2-b92a-669241c798d1",
                "parentUUID": "2f5788cc-9e58-41c8-815f-27aa8e7b16f9",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "AddContestantResponse #enquireForTeamLeaderPosition should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r.enquireForTeamLeaderPosition.should.be.true();",
                "isRoot": false,
                "uuid": "57091cd9-0543-45c7-a3c3-66a31874ceec",
                "parentUUID": "2f5788cc-9e58-41c8-815f-27aa8e7b16f9",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#errorMessage",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "AddContestantResponse #errorMessage should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.errorMessage = <span class=\"hljs-string\">'test'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "a60d6a4c-6544-40b3-8127-872667c87353",
                "parentUUID": "260659d4-c137-46d7-b6bc-4c4a36de0f90",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "AddContestantResponse #errorMessage should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._errorMessage = <span class=\"hljs-string\">'errorMessage_test'</span>;<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'errorMessage_test'</span>);",
                "isRoot": false,
                "uuid": "c1c71376-a69a-4c68-baf8-42475cd7df8f",
                "parentUUID": "260659d4-c137-46d7-b6bc-4c4a36de0f90",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/AddContestantResponseTests.js",
            "uuid": "260659d4-c137-46d7-b6bc-4c4a36de0f90",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/AddContestantResponseTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "AddContestantResponse #errorMessage should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.errorMessage = <span class=\"hljs-string\">'test'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "a60d6a4c-6544-40b3-8127-872667c87353",
                "parentUUID": "260659d4-c137-46d7-b6bc-4c4a36de0f90",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "AddContestantResponse #errorMessage should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._errorMessage = <span class=\"hljs-string\">'errorMessage_test'</span>;<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'errorMessage_test'</span>);",
                "isRoot": false,
                "uuid": "c1c71376-a69a-4c68-baf8-42475cd7df8f",
                "parentUUID": "260659d4-c137-46d7-b6bc-4c4a36de0f90",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#setNotSuccessful(errorMessage)",
            "suites": [],
            "tests": [
              {
                "title": "should change the state to not successful",
                "fullTitle": "AddContestantResponse #setNotSuccessful(errorMessage) should change the state to not successful",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.setNotSuccessful(<span class=\"hljs-string\">'Test error message'</span>);<br>r.wasSuccessful.should.be.false();<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'Test error message'</span>);",
                "isRoot": false,
                "uuid": "49f1cb29-a67f-482f-8287-a5df42864fda",
                "parentUUID": "44bb2a5b-3274-49a8-9706-bfe7b61f1bb5",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/AddContestantResponseTests.js",
            "uuid": "44bb2a5b-3274-49a8-9706-bfe7b61f1bb5",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/AddContestantResponseTests.js",
            "passes": [
              {
                "title": "should change the state to not successful",
                "fullTitle": "AddContestantResponse #setNotSuccessful(errorMessage) should change the state to not successful",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.setNotSuccessful(<span class=\"hljs-string\">'Test error message'</span>);<br>r.wasSuccessful.should.be.false();<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'Test error message'</span>);",
                "isRoot": false,
                "uuid": "49f1cb29-a67f-482f-8287-a5df42864fda",
                "parentUUID": "44bb2a5b-3274-49a8-9706-bfe7b61f1bb5",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/AddContestantResponseTests.js",
        "uuid": "d42cbcbe-0849-4e98-a021-a18302c93ad7",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/AddContestantResponseTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Contestant",
        "suites": [
          {
            "title": "#username",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Contestant #username should set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'username_test'</span>;<br>c._username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
                "isRoot": false,
                "uuid": "0461f8a1-a4d7-4e55-9954-cbe0663a27a4",
                "parentUUID": "c7be32a1-351e-4736-9676-c25c081d47ad",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Contestant #username should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._username = <span class=\"hljs-string\">'username_test'</span>;<br>c.username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
                "isRoot": false,
                "uuid": "7c6472ea-01e5-4fe3-8166-c0d01da61761",
                "parentUUID": "c7be32a1-351e-4736-9676-c25c081d47ad",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ContestantTests.js",
            "uuid": "c7be32a1-351e-4736-9676-c25c081d47ad",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ContestantTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Contestant #username should set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'username_test'</span>;<br>c._username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
                "isRoot": false,
                "uuid": "0461f8a1-a4d7-4e55-9954-cbe0663a27a4",
                "parentUUID": "c7be32a1-351e-4736-9676-c25c081d47ad",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Contestant #username should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._username = <span class=\"hljs-string\">'username_test'</span>;<br>c.username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
                "isRoot": false,
                "uuid": "7c6472ea-01e5-4fe3-8166-c0d01da61761",
                "parentUUID": "c7be32a1-351e-4736-9676-c25c081d47ad",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#score",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Contestant #score should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    c.score = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "6256c525-b221-4f9f-9abf-740660622f5f",
                "parentUUID": "2aa2d7d4-9e08-41cc-b305-573cd2c90ad5",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Contestant #score should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._score = <span class=\"hljs-number\">1</span>;<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "fb6264a3-3956-43d4-8bbb-bf6601efaf83",
                "parentUUID": "2aa2d7d4-9e08-41cc-b305-573cd2c90ad5",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ContestantTests.js",
            "uuid": "2aa2d7d4-9e08-41cc-b305-573cd2c90ad5",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ContestantTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Contestant #score should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    c.score = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "6256c525-b221-4f9f-9abf-740660622f5f",
                "parentUUID": "2aa2d7d4-9e08-41cc-b305-573cd2c90ad5",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Contestant #score should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._score = <span class=\"hljs-number\">1</span>;<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "fb6264a3-3956-43d4-8bbb-bf6601efaf83",
                "parentUUID": "2aa2d7d4-9e08-41cc-b305-573cd2c90ad5",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#incrementScore()",
            "suites": [],
            "tests": [
              {
                "title": "should increment the contestant's score",
                "fullTitle": "Contestant #incrementScore() should increment the contestant's score",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.incrementScore();<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "06b316ea-354d-4c59-a7f6-af6bac4c72ba",
                "parentUUID": "ab0bcf7b-8b8a-457c-bf23-e02b6290f7fb",
                "skipped": false
              },
              {
                "title": "should emit scoreUpdate event",
                "fullTitle": "Contestant #incrementScore() should emit scoreUpdate event",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.on(<span class=\"hljs-string\">'scoreUpdate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    done();<br>});<br>c.incrementScore();",
                "isRoot": false,
                "uuid": "5fb504af-2ac1-472b-bece-d36e97569058",
                "parentUUID": "ab0bcf7b-8b8a-457c-bf23-e02b6290f7fb",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ContestantTests.js",
            "uuid": "ab0bcf7b-8b8a-457c-bf23-e02b6290f7fb",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ContestantTests.js",
            "passes": [
              {
                "title": "should increment the contestant's score",
                "fullTitle": "Contestant #incrementScore() should increment the contestant's score",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.incrementScore();<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "06b316ea-354d-4c59-a7f6-af6bac4c72ba",
                "parentUUID": "ab0bcf7b-8b8a-457c-bf23-e02b6290f7fb",
                "skipped": false
              },
              {
                "title": "should emit scoreUpdate event",
                "fullTitle": "Contestant #incrementScore() should emit scoreUpdate event",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.on(<span class=\"hljs-string\">'scoreUpdate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    done();<br>});<br>c.incrementScore();",
                "isRoot": false,
                "uuid": "5fb504af-2ac1-472b-bece-d36e97569058",
                "parentUUID": "ab0bcf7b-8b8a-457c-bf23-e02b6290f7fb",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/ContestantTests.js",
        "uuid": "e54889b4-1bca-4055-a6b1-03344e18f7a2",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ContestantTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "IdentifierUtility",
        "suites": [
          {
            "title": "#generateSessionId()",
            "suites": [],
            "tests": [
              {
                "title": "should return a non-null non-empty key",
                "fullTitle": "IdentifierUtility #generateSessionId() should return a non-null non-empty key",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.generateSessionId().should.not.be.equal(<span class=\"hljs-string\">''</span>).and.not.be.equal(<span class=\"hljs-literal\">null</span>);",
                "isRoot": false,
                "uuid": "08072d0d-64b9-43e2-8291-9cad8421e75e",
                "parentUUID": "da694a0b-4de4-46f4-afbb-4e3a06e85ebf",
                "skipped": false
              },
              {
                "title": "should return a id of the correct length",
                "fullTitle": "IdentifierUtility #generateSessionId() should return a id of the correct length",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.generateSessionId()<br>    .length.should.be.Number().and.equal(idUtility.keyLength);",
                "isRoot": false,
                "uuid": "a17d060c-ea00-441a-b3d9-7cd3563f8731",
                "parentUUID": "da694a0b-4de4-46f4-afbb-4e3a06e85ebf",
                "skipped": false
              },
              {
                "title": "should record id so it cannot be reused.",
                "fullTitle": "IdentifierUtility #generateSessionId() should record id so it cannot be reused.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> id = idUtility.generateSessionId();<br>idUtility._sessionKeysInUse.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cachedId</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> cachedId === id;<br>}).should.equal(id);",
                "isRoot": false,
                "uuid": "df8870fc-d3f6-435a-aebc-02f2bf7899f6",
                "parentUUID": "da694a0b-4de4-46f4-afbb-4e3a06e85ebf",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/IdentifierUtilityTests.js",
            "uuid": "da694a0b-4de4-46f4-afbb-4e3a06e85ebf",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/IdentifierUtilityTests.js",
            "passes": [
              {
                "title": "should return a non-null non-empty key",
                "fullTitle": "IdentifierUtility #generateSessionId() should return a non-null non-empty key",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.generateSessionId().should.not.be.equal(<span class=\"hljs-string\">''</span>).and.not.be.equal(<span class=\"hljs-literal\">null</span>);",
                "isRoot": false,
                "uuid": "08072d0d-64b9-43e2-8291-9cad8421e75e",
                "parentUUID": "da694a0b-4de4-46f4-afbb-4e3a06e85ebf",
                "skipped": false
              },
              {
                "title": "should return a id of the correct length",
                "fullTitle": "IdentifierUtility #generateSessionId() should return a id of the correct length",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.generateSessionId()<br>    .length.should.be.Number().and.equal(idUtility.keyLength);",
                "isRoot": false,
                "uuid": "a17d060c-ea00-441a-b3d9-7cd3563f8731",
                "parentUUID": "da694a0b-4de4-46f4-afbb-4e3a06e85ebf",
                "skipped": false
              },
              {
                "title": "should record id so it cannot be reused.",
                "fullTitle": "IdentifierUtility #generateSessionId() should record id so it cannot be reused.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> id = idUtility.generateSessionId();<br>idUtility._sessionKeysInUse.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cachedId</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> cachedId === id;<br>}).should.equal(id);",
                "isRoot": false,
                "uuid": "df8870fc-d3f6-435a-aebc-02f2bf7899f6",
                "parentUUID": "da694a0b-4de4-46f4-afbb-4e3a06e85ebf",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "#generateParticipantId()",
            "suites": [],
            "tests": [
              {
                "title": "should return a UUID",
                "fullTitle": "IdentifierUtility #generateParticipantId() should return a UUID",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.generateParticipantId()<br>    .should.match(<span class=\"hljs-regexp\">/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i</span>);",
                "isRoot": false,
                "uuid": "9d578db1-0e5f-4f52-b750-d77bed754fc9",
                "parentUUID": "51501f2e-a08d-4ddf-856a-86496a6f222d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/IdentifierUtilityTests.js",
            "uuid": "51501f2e-a08d-4ddf-856a-86496a6f222d",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/IdentifierUtilityTests.js",
            "passes": [
              {
                "title": "should return a UUID",
                "fullTitle": "IdentifierUtility #generateParticipantId() should return a UUID",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.generateParticipantId()<br>    .should.match(<span class=\"hljs-regexp\">/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i</span>);",
                "isRoot": false,
                "uuid": "9d578db1-0e5f-4f52-b750-d77bed754fc9",
                "parentUUID": "51501f2e-a08d-4ddf-856a-86496a6f222d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#registerSessionIdsInUse(ids)",
            "suites": [],
            "tests": [
              {
                "title": "should store the ids to stop reuse",
                "fullTitle": "IdentifierUtility #registerSessionIdsInUse(ids) should store the ids to stop reuse",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.length.should.be.aboveOrEqual(<span class=\"hljs-number\">2</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "d58ce917-3744-48e3-992a-c52f727f3aa7",
                "parentUUID": "441a1892-65e4-4d8c-9a40-728a7437f1c0",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/IdentifierUtilityTests.js",
            "uuid": "441a1892-65e4-4d8c-9a40-728a7437f1c0",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/IdentifierUtilityTests.js",
            "passes": [
              {
                "title": "should store the ids to stop reuse",
                "fullTitle": "IdentifierUtility #registerSessionIdsInUse(ids) should store the ids to stop reuse",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.length.should.be.aboveOrEqual(<span class=\"hljs-number\">2</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "d58ce917-3744-48e3-992a-c52f727f3aa7",
                "parentUUID": "441a1892-65e4-4d8c-9a40-728a7437f1c0",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#releaseSessionId(id)",
            "suites": [],
            "tests": [
              {
                "title": "should return a UUID",
                "fullTitle": "IdentifierUtility #releaseSessionId(id) should return a UUID",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility.releaseSessionId(<span class=\"hljs-string\">'111AAA'</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.equal(-<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "2b204c28-3479-478e-81a9-b6a111f0c3f6",
                "parentUUID": "8a4669a7-1fba-43da-8905-4c350d2e2017",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/IdentifierUtilityTests.js",
            "uuid": "8a4669a7-1fba-43da-8905-4c350d2e2017",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/IdentifierUtilityTests.js",
            "passes": [
              {
                "title": "should return a UUID",
                "fullTitle": "IdentifierUtility #releaseSessionId(id) should return a UUID",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility.releaseSessionId(<span class=\"hljs-string\">'111AAA'</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.equal(-<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "2b204c28-3479-478e-81a9-b6a111f0c3f6",
                "parentUUID": "8a4669a7-1fba-43da-8905-4c350d2e2017",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/IdentifierUtilityTests.js",
        "uuid": "8f02efd7-dbeb-4ee2-bd87-a68f14581f2c",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/IdentifierUtilityTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "ParamCheck",
        "suites": [
          {
            "title": "#isInstanceAndTypeOf()",
            "suites": [],
            "tests": [
              {
                "title": "should return false when not referenced",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return false when not referenced",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf().should.be.false();",
                "isRoot": false,
                "uuid": "58a02936-fdac-4529-ae73-18def2fcf68e",
                "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
                "skipped": false
              },
              {
                "title": "should return false when null",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return false when null",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">''</span>).should.be.false();",
                "isRoot": false,
                "uuid": "75587ab1-9882-46e9-a0d9-14a5ac4ac114",
                "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
                "skipped": false
              },
              {
                "title": "should return false when not the correct type",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return false when not the correct type",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-string\">''</span>, <span class=\"hljs-string\">'Int'</span>).should.be.false();",
                "isRoot": false,
                "uuid": "6fc75530-018d-41c3-a1e2-4240a9e18eaa",
                "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
                "skipped": false
              },
              {
                "title": "should return true when is a built-in type",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return true when is a built-in type",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'Number'</span>).should.be.true();",
                "isRoot": false,
                "uuid": "4f0d8fe9-08c3-4d0f-81da-f8fcdcc95ae2",
                "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
                "skipped": false
              },
              {
                "title": "should return true when is user defined type",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return true when is user defined type",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-keyword\">new</span> UserDefinedType(),<br>    UserDefinedType).should.be.true();",
                "isRoot": false,
                "uuid": "7a7695ae-074f-4627-90ad-03ebab1e52c5",
                "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParamCheckTests.js",
            "uuid": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParamCheckTests.js",
            "passes": [
              {
                "title": "should return false when not referenced",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return false when not referenced",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf().should.be.false();",
                "isRoot": false,
                "uuid": "58a02936-fdac-4529-ae73-18def2fcf68e",
                "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
                "skipped": false
              },
              {
                "title": "should return false when null",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return false when null",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">''</span>).should.be.false();",
                "isRoot": false,
                "uuid": "75587ab1-9882-46e9-a0d9-14a5ac4ac114",
                "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
                "skipped": false
              },
              {
                "title": "should return false when not the correct type",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return false when not the correct type",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-string\">''</span>, <span class=\"hljs-string\">'Int'</span>).should.be.false();",
                "isRoot": false,
                "uuid": "6fc75530-018d-41c3-a1e2-4240a9e18eaa",
                "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
                "skipped": false
              },
              {
                "title": "should return true when is a built-in type",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return true when is a built-in type",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'Number'</span>).should.be.true();",
                "isRoot": false,
                "uuid": "4f0d8fe9-08c3-4d0f-81da-f8fcdcc95ae2",
                "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
                "skipped": false
              },
              {
                "title": "should return true when is user defined type",
                "fullTitle": "ParamCheck #isInstanceAndTypeOf() should return true when is user defined type",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-keyword\">new</span> UserDefinedType(),<br>    UserDefinedType).should.be.true();",
                "isRoot": false,
                "uuid": "7a7695ae-074f-4627-90ad-03ebab1e52c5",
                "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/ParamCheckTests.js",
        "uuid": "1b053556-22dc-473e-8362-2409c51cb22d",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParamCheckTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Participant",
        "suites": [
          {
            "title": "#id",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Participant #id should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'id_test'</span>;<br>p._id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "a4ad4398-3e4c-4bd2-a74b-f2ac5d11ffbf",
                "parentUUID": "8bcb4853-f7c1-4938-889b-789e37f393fd",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participant #id should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "d234a698-b8d9-4e73-a784-095a7ef06450",
                "parentUUID": "8bcb4853-f7c1-4938-889b-789e37f393fd",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantTests.js",
            "uuid": "8bcb4853-f7c1-4938-889b-789e37f393fd",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Participant #id should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'id_test'</span>;<br>p._id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "a4ad4398-3e4c-4bd2-a74b-f2ac5d11ffbf",
                "parentUUID": "8bcb4853-f7c1-4938-889b-789e37f393fd",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participant #id should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "d234a698-b8d9-4e73-a784-095a7ef06450",
                "parentUUID": "8bcb4853-f7c1-4938-889b-789e37f393fd",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#isDisconnected",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Participant #isDisconnected should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    p.isDisconnected = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "4ab1f5e8-73a4-48a5-9c1e-7470a8aff9de",
                "parentUUID": "0a3922fb-8af2-4426-a364-dbdda37cf1d1",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participant #isDisconnected should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "9ddd74bb-7e87-4ab9-aa31-b13690c4d2d1",
                "parentUUID": "0a3922fb-8af2-4426-a364-dbdda37cf1d1",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantTests.js",
            "uuid": "0a3922fb-8af2-4426-a364-dbdda37cf1d1",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Participant #isDisconnected should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    p.isDisconnected = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "4ab1f5e8-73a4-48a5-9c1e-7470a8aff9de",
                "parentUUID": "0a3922fb-8af2-4426-a364-dbdda37cf1d1",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participant #isDisconnected should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "9ddd74bb-7e87-4ab9-aa31-b13690c4d2d1",
                "parentUUID": "0a3922fb-8af2-4426-a364-dbdda37cf1d1",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#disconnect()",
            "suites": [],
            "tests": [
              {
                "title": "should change participant state to disconnected",
                "fullTitle": "Participant #disconnect() should change participant state to disconnected",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">false</span>;<br>p.disconnect();<br>p.isDisconnected.should.be.true();",
                "isRoot": false,
                "uuid": "0fcf2d41-dd2b-4c18-b2f8-bfa7aece7250",
                "parentUUID": "911f0b2d-8fd9-40ab-9e50-50c00fbd104b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantTests.js",
            "uuid": "911f0b2d-8fd9-40ab-9e50-50c00fbd104b",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantTests.js",
            "passes": [
              {
                "title": "should change participant state to disconnected",
                "fullTitle": "Participant #disconnect() should change participant state to disconnected",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">false</span>;<br>p.disconnect();<br>p.isDisconnected.should.be.true();",
                "isRoot": false,
                "uuid": "0fcf2d41-dd2b-4c18-b2f8-bfa7aece7250",
                "parentUUID": "911f0b2d-8fd9-40ab-9e50-50c00fbd104b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#reconnect()",
            "suites": [],
            "tests": [
              {
                "title": "should change participant state to connected",
                "fullTitle": "Participant #reconnect() should change participant state to connected",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">true</span>;<br>p.reconnect();<br>p.isDisconnected.should.be.false();",
                "isRoot": false,
                "uuid": "755b556a-ba8e-494f-9fc1-63a789102608",
                "parentUUID": "d05f420b-650c-4752-95a8-3fec0159940b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantTests.js",
            "uuid": "d05f420b-650c-4752-95a8-3fec0159940b",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantTests.js",
            "passes": [
              {
                "title": "should change participant state to connected",
                "fullTitle": "Participant #reconnect() should change participant state to connected",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">true</span>;<br>p.reconnect();<br>p.isDisconnected.should.be.false();",
                "isRoot": false,
                "uuid": "755b556a-ba8e-494f-9fc1-63a789102608",
                "parentUUID": "d05f420b-650c-4752-95a8-3fec0159940b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/ParticipantTests.js",
        "uuid": "f157e257-1cdb-4175-a57e-74a4166fa6e9",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Participants",
        "suites": [
          {
            "title": "#all",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Participants #all should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.all = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "2468d042-7f4e-44f3-a9e7-c40c35394913",
                "parentUUID": "fdbfa351-fc4f-47e2-bc8b-a27cb6e726f4",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participants #all should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
                "isRoot": false,
                "uuid": "73d60dbe-e6a7-49f7-8678-356ee8a36237",
                "parentUUID": "fdbfa351-fc4f-47e2-bc8b-a27cb6e726f4",
                "skipped": false
              },
              {
                "title": "should get copy of val and not reference",
                "fullTitle": "Participants #all should get copy of val and not reference",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all.pop();<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
                "isRoot": false,
                "uuid": "8f843434-4b71-46a8-87cb-5c0a104d529e",
                "parentUUID": "fdbfa351-fc4f-47e2-bc8b-a27cb6e726f4",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantsTests.js",
            "uuid": "fdbfa351-fc4f-47e2-bc8b-a27cb6e726f4",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Participants #all should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.all = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "2468d042-7f4e-44f3-a9e7-c40c35394913",
                "parentUUID": "fdbfa351-fc4f-47e2-bc8b-a27cb6e726f4",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participants #all should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
                "isRoot": false,
                "uuid": "73d60dbe-e6a7-49f7-8678-356ee8a36237",
                "parentUUID": "fdbfa351-fc4f-47e2-bc8b-a27cb6e726f4",
                "skipped": false
              },
              {
                "title": "should get copy of val and not reference",
                "fullTitle": "Participants #all should get copy of val and not reference",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all.pop();<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
                "isRoot": false,
                "uuid": "8f843434-4b71-46a8-87cb-5c0a104d529e",
                "parentUUID": "fdbfa351-fc4f-47e2-bc8b-a27cb6e726f4",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#length",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Participants #length should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.length = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "3f787a1f-752b-40fa-8a9c-508aa115e070",
                "parentUUID": "24b3832d-0f0b-4d44-a51e-50cd857860d7",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participants #length should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "b962d7c2-ac4d-4bda-8919-ca606dba15dd",
                "parentUUID": "24b3832d-0f0b-4d44-a51e-50cd857860d7",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantsTests.js",
            "uuid": "24b3832d-0f0b-4d44-a51e-50cd857860d7",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Participants #length should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.length = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "3f787a1f-752b-40fa-8a9c-508aa115e070",
                "parentUUID": "24b3832d-0f0b-4d44-a51e-50cd857860d7",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Participants #length should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "b962d7c2-ac4d-4bda-8919-ca606dba15dd",
                "parentUUID": "24b3832d-0f0b-4d44-a51e-50cd857860d7",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#contains(id)",
            "suites": [],
            "tests": [
              {
                "title": "should return true when id does exist",
                "fullTitle": "Participants #contains(id) should return true when id does exist",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(p.id).should.be.true();",
                "isRoot": false,
                "uuid": "7c226fa8-15c1-428b-98d8-0c26cac433ec",
                "parentUUID": "f3edd53d-91ff-47da-9b3a-05af9c78eaa3",
                "skipped": false
              },
              {
                "title": "should return false when id does not exist",
                "fullTitle": "Participants #contains(id) should return false when id does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(<span class=\"hljs-string\">'p2'</span>).should.be.false();",
                "isRoot": false,
                "uuid": "ced66c06-8e2c-4ae3-9485-c9af19163ea0",
                "parentUUID": "f3edd53d-91ff-47da-9b3a-05af9c78eaa3",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantsTests.js",
            "uuid": "f3edd53d-91ff-47da-9b3a-05af9c78eaa3",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
            "passes": [
              {
                "title": "should return true when id does exist",
                "fullTitle": "Participants #contains(id) should return true when id does exist",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(p.id).should.be.true();",
                "isRoot": false,
                "uuid": "7c226fa8-15c1-428b-98d8-0c26cac433ec",
                "parentUUID": "f3edd53d-91ff-47da-9b3a-05af9c78eaa3",
                "skipped": false
              },
              {
                "title": "should return false when id does not exist",
                "fullTitle": "Participants #contains(id) should return false when id does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(<span class=\"hljs-string\">'p2'</span>).should.be.false();",
                "isRoot": false,
                "uuid": "ced66c06-8e2c-4ae3-9485-c9af19163ea0",
                "parentUUID": "f3edd53d-91ff-47da-9b3a-05af9c78eaa3",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#add(participant)",
            "suites": [],
            "tests": [
              {
                "title": "should add the given participant",
                "fullTitle": "Participants #add(participant) should add the given participant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc._participants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc._participants[<span class=\"hljs-number\">0</span>].should.equal(p);",
                "isRoot": false,
                "uuid": "6030e90a-33d4-4363-a435-5fac79abc776",
                "parentUUID": "866b53a2-681a-4795-a5f4-269824218164",
                "skipped": false
              },
              {
                "title": "should error if participant with id already exists",
                "fullTitle": "Participants #add(participant) should error if participant with id already exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.add(p);<br>}).should.throw();",
                "isRoot": false,
                "uuid": "d5f71a41-54cf-4c7f-ac61-3834186d10b5",
                "parentUUID": "866b53a2-681a-4795-a5f4-269824218164",
                "skipped": false
              },
              {
                "title": "should emit add event",
                "fullTitle": "Participants #add(participant) should emit add event",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.on(<span class=\"hljs-string\">'add'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">participant</span>) </span>{<br>    participant.should.equal(p);<br>    done();<br>});<br>pc.add(p);",
                "isRoot": false,
                "uuid": "6c43b002-5149-481f-b66a-57d59106a0e3",
                "parentUUID": "866b53a2-681a-4795-a5f4-269824218164",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantsTests.js",
            "uuid": "866b53a2-681a-4795-a5f4-269824218164",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
            "passes": [
              {
                "title": "should add the given participant",
                "fullTitle": "Participants #add(participant) should add the given participant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc._participants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc._participants[<span class=\"hljs-number\">0</span>].should.equal(p);",
                "isRoot": false,
                "uuid": "6030e90a-33d4-4363-a435-5fac79abc776",
                "parentUUID": "866b53a2-681a-4795-a5f4-269824218164",
                "skipped": false
              },
              {
                "title": "should error if participant with id already exists",
                "fullTitle": "Participants #add(participant) should error if participant with id already exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.add(p);<br>}).should.throw();",
                "isRoot": false,
                "uuid": "d5f71a41-54cf-4c7f-ac61-3834186d10b5",
                "parentUUID": "866b53a2-681a-4795-a5f4-269824218164",
                "skipped": false
              },
              {
                "title": "should emit add event",
                "fullTitle": "Participants #add(participant) should emit add event",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.on(<span class=\"hljs-string\">'add'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">participant</span>) </span>{<br>    participant.should.equal(p);<br>    done();<br>});<br>pc.add(p);",
                "isRoot": false,
                "uuid": "6c43b002-5149-481f-b66a-57d59106a0e3",
                "parentUUID": "866b53a2-681a-4795-a5f4-269824218164",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "#remove(participant)",
            "suites": [],
            "tests": [
              {
                "title": "should remove the existing participant",
                "fullTitle": "Participants #remove(participant) should remove the existing participant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "1bec68ce-ec62-42e1-93ba-71184a312040",
                "parentUUID": "4eb6750d-1da8-4f79-bdac-bc43240716bd",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing participant",
                "fullTitle": "Participants #remove(participant) should not remove the non-existing participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p1).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "46963e4a-376b-4962-a1d0-8b8a6f5273d0",
                "parentUUID": "4eb6750d-1da8-4f79-bdac-bc43240716bd",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantsTests.js",
            "uuid": "4eb6750d-1da8-4f79-bdac-bc43240716bd",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
            "passes": [
              {
                "title": "should remove the existing participant",
                "fullTitle": "Participants #remove(participant) should remove the existing participant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "1bec68ce-ec62-42e1-93ba-71184a312040",
                "parentUUID": "4eb6750d-1da8-4f79-bdac-bc43240716bd",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing participant",
                "fullTitle": "Participants #remove(participant) should not remove the non-existing participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p1).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "46963e4a-376b-4962-a1d0-8b8a6f5273d0",
                "parentUUID": "4eb6750d-1da8-4f79-bdac-bc43240716bd",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#removeById(id)",
            "suites": [],
            "tests": [
              {
                "title": "should remove the existing participant",
                "fullTitle": "Participants #removeById(id) should remove the existing participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p.id).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "9aec919c-efd0-48aa-8541-c12dd4d34e3a",
                "parentUUID": "78b90355-f7fe-4790-947c-5e79745448e5",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing participant",
                "fullTitle": "Participants #removeById(id) should not remove the non-existing participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p1.id).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "c398706c-f358-4231-a4f8-263315218052",
                "parentUUID": "78b90355-f7fe-4790-947c-5e79745448e5",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/ParticipantsTests.js",
            "uuid": "78b90355-f7fe-4790-947c-5e79745448e5",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
            "passes": [
              {
                "title": "should remove the existing participant",
                "fullTitle": "Participants #removeById(id) should remove the existing participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p.id).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "9aec919c-efd0-48aa-8541-c12dd4d34e3a",
                "parentUUID": "78b90355-f7fe-4790-947c-5e79745448e5",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing participant",
                "fullTitle": "Participants #removeById(id) should not remove the non-existing participant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p1.id).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "c398706c-f358-4231-a4f8-263315218052",
                "parentUUID": "78b90355-f7fe-4790-947c-5e79745448e5",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/ParticipantsTests.js",
        "uuid": "c05aface-c4b0-410e-bc77-df26b0c33aea",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/ParticipantsTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Session",
        "suites": [
          {
            "title": "#constructor",
            "suites": [],
            "tests": [
              {
                "title": "should create teams",
                "fullTitle": "Session #constructor should create teams",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "b1bdc4a6-0a4e-4712-baeb-85bc7d248bbc",
                "parentUUID": "80705461-3b58-4ad9-b010-4844d2420045",
                "skipped": false
              },
              {
                "title": "should not create teams",
                "fullTitle": "Session #constructor should not create teams",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>should(s.teams).be.null();",
                "isRoot": false,
                "uuid": "cfed6945-f95a-4820-8b1e-cee911207d2f",
                "parentUUID": "80705461-3b58-4ad9-b010-4844d2420045",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "80705461-3b58-4ad9-b010-4844d2420045",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should create teams",
                "fullTitle": "Session #constructor should create teams",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "b1bdc4a6-0a4e-4712-baeb-85bc7d248bbc",
                "parentUUID": "80705461-3b58-4ad9-b010-4844d2420045",
                "skipped": false
              },
              {
                "title": "should not create teams",
                "fullTitle": "Session #constructor should not create teams",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>should(s.teams).be.null();",
                "isRoot": false,
                "uuid": "cfed6945-f95a-4820-8b1e-cee911207d2f",
                "parentUUID": "80705461-3b58-4ad9-b010-4844d2420045",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "#id",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #id should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.id = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "604c7ee9-1899-4131-89e3-fa87ef0fe0cb",
                "parentUUID": "4a706c7b-fb3d-4c7a-b593-10e274883cdb",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #id should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "8f93829f-e0d5-4031-b957-afc2ea6c0930",
                "parentUUID": "4a706c7b-fb3d-4c7a-b593-10e274883cdb",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "4a706c7b-fb3d-4c7a-b593-10e274883cdb",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #id should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.id = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "604c7ee9-1899-4131-89e3-fa87ef0fe0cb",
                "parentUUID": "4a706c7b-fb3d-4c7a-b593-10e274883cdb",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #id should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
                "isRoot": false,
                "uuid": "8f93829f-e0d5-4031-b957-afc2ea6c0930",
                "parentUUID": "4a706c7b-fb3d-4c7a-b593-10e274883cdb",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#roundsPlayed",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #roundsPlayed should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundsPlayed = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "197f5e02-c1e6-40ce-b53b-d8aad87f24c3",
                "parentUUID": "e2d7a4f2-9543-48cb-b8d6-6478d2153138",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #roundsPlayed should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "5cc10d25-57f0-4832-862b-8cf99096d040",
                "parentUUID": "e2d7a4f2-9543-48cb-b8d6-6478d2153138",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "e2d7a4f2-9543-48cb-b8d6-6478d2153138",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #roundsPlayed should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundsPlayed = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "197f5e02-c1e6-40ce-b53b-d8aad87f24c3",
                "parentUUID": "e2d7a4f2-9543-48cb-b8d6-6478d2153138",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #roundsPlayed should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "5cc10d25-57f0-4832-862b-8cf99096d040",
                "parentUUID": "e2d7a4f2-9543-48cb-b8d6-6478d2153138",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#previousWinners",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #previousWinners should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.previousWinners = [<span class=\"hljs-string\">'SomeWinner'</span>];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "5b624f25-0eac-441c-bb3b-01a01c19f708",
                "parentUUID": "bf8b1094-71b6-43fd-af63-c86c4b7db0d9",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #previousWinners should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._previousWinners = [<span class=\"hljs-string\">'Winner1'</span>, <span class=\"hljs-string\">'Winner2'</span>];<br>s.previousWinners.should.be.Array();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
                "isRoot": false,
                "uuid": "5e6e0444-e585-48f3-bec8-b8e3117f9b7c",
                "parentUUID": "bf8b1094-71b6-43fd-af63-c86c4b7db0d9",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "bf8b1094-71b6-43fd-af63-c86c4b7db0d9",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #previousWinners should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.previousWinners = [<span class=\"hljs-string\">'SomeWinner'</span>];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "5b624f25-0eac-441c-bb3b-01a01c19f708",
                "parentUUID": "bf8b1094-71b6-43fd-af63-c86c4b7db0d9",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #previousWinners should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._previousWinners = [<span class=\"hljs-string\">'Winner1'</span>, <span class=\"hljs-string\">'Winner2'</span>];<br>s.previousWinners.should.be.Array();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
                "isRoot": false,
                "uuid": "5e6e0444-e585-48f3-bec8-b8e3117f9b7c",
                "parentUUID": "bf8b1094-71b6-43fd-af63-c86c4b7db0d9",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#roundWinner",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #roundWinner should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundWinner = <span class=\"hljs-string\">'SomeWinner'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "f0d174d1-69ad-4791-a7e8-c748a213403a",
                "parentUUID": "82816cca-e0a7-483c-8cfe-ac9503a93c31",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #roundWinner should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundWinner = <span class=\"hljs-string\">'Winner1'</span>;<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
                "isRoot": false,
                "uuid": "412a691e-cb3e-4e92-8878-7f6fb96f57ab",
                "parentUUID": "82816cca-e0a7-483c-8cfe-ac9503a93c31",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "82816cca-e0a7-483c-8cfe-ac9503a93c31",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #roundWinner should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundWinner = <span class=\"hljs-string\">'SomeWinner'</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "f0d174d1-69ad-4791-a7e8-c748a213403a",
                "parentUUID": "82816cca-e0a7-483c-8cfe-ac9503a93c31",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #roundWinner should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundWinner = <span class=\"hljs-string\">'Winner1'</span>;<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
                "isRoot": false,
                "uuid": "412a691e-cb3e-4e92-8878-7f6fb96f57ab",
                "parentUUID": "82816cca-e0a7-483c-8cfe-ac9503a93c31",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#isSessionCompleted",
            "suites": [],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "fa4dad58-2d7e-483c-aa58-9dfe283dc147",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": false,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#observers",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #observers should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.observers = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "6941e572-8c3d-47b1-89ae-c9c11aa3ac45",
                "parentUUID": "b2531c83-2487-4a84-842a-db549a7f2fe4",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #observers should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.observers.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.observers[<span class=\"hljs-number\">0</span>].should.equal(observer);",
                "isRoot": false,
                "uuid": "18deab5d-c04e-4950-8ab9-ddaaf21d476b",
                "parentUUID": "b2531c83-2487-4a84-842a-db549a7f2fe4",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "b2531c83-2487-4a84-842a-db549a7f2fe4",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #observers should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.observers = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "6941e572-8c3d-47b1-89ae-c9c11aa3ac45",
                "parentUUID": "b2531c83-2487-4a84-842a-db549a7f2fe4",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #observers should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.observers.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.observers[<span class=\"hljs-number\">0</span>].should.equal(observer);",
                "isRoot": false,
                "uuid": "18deab5d-c04e-4950-8ab9-ddaaf21d476b",
                "parentUUID": "b2531c83-2487-4a84-842a-db549a7f2fe4",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#contestants",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #contestants should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.contestants = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "9e924c00-7f01-4db0-8b75-81cb83002c59",
                "parentUUID": "96006e5e-be43-41e2-b233-bec809784477",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #contestants should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.contestants[<span class=\"hljs-number\">0</span>].should.equal(contestant);",
                "isRoot": false,
                "uuid": "b1a5a3d2-6a7d-4cfb-8e9e-788db54a68e5",
                "parentUUID": "96006e5e-be43-41e2-b233-bec809784477",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "96006e5e-be43-41e2-b233-bec809784477",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #contestants should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.contestants = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "9e924c00-7f01-4db0-8b75-81cb83002c59",
                "parentUUID": "96006e5e-be43-41e2-b233-bec809784477",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #contestants should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.contestants[<span class=\"hljs-number\">0</span>].should.equal(contestant);",
                "isRoot": false,
                "uuid": "b1a5a3d2-6a7d-4cfb-8e9e-788db54a68e5",
                "parentUUID": "96006e5e-be43-41e2-b233-bec809784477",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#host",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #host should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.host = host;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "0ef90589-c171-4de0-9a43-ce33cb98ae45",
                "parentUUID": "1a385f1e-df7c-4815-b0f5-49361dd4fa77",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #host should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.host.should.equal(host);",
                "isRoot": false,
                "uuid": "bc4e14ef-067d-4022-85a8-cbca2606ef23",
                "parentUUID": "1a385f1e-df7c-4815-b0f5-49361dd4fa77",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "1a385f1e-df7c-4815-b0f5-49361dd4fa77",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Session #host should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.host = host;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "0ef90589-c171-4de0-9a43-ce33cb98ae45",
                "parentUUID": "1a385f1e-df7c-4815-b0f5-49361dd4fa77",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Session #host should get value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.host.should.equal(host);",
                "isRoot": false,
                "uuid": "bc4e14ef-067d-4022-85a8-cbca2606ef23",
                "parentUUID": "1a385f1e-df7c-4815-b0f5-49361dd4fa77",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#currentState",
            "suites": [],
            "tests": [
              {
                "title": "should get value",
                "fullTitle": "Session #currentState should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
                "isRoot": false,
                "uuid": "fb22856c-061b-4b22-96b6-5f700d00fa2e",
                "parentUUID": "1d522940-e5e3-4fe1-babf-3996682494ae",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "1d522940-e5e3-4fe1-babf-3996682494ae",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should get value",
                "fullTitle": "Session #currentState should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
                "isRoot": false,
                "uuid": "fb22856c-061b-4b22-96b6-5f700d00fa2e",
                "parentUUID": "1d522940-e5e3-4fe1-babf-3996682494ae",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#incrementRoundsPlayed()",
            "suites": [],
            "tests": [
              {
                "title": "should increment rounds played",
                "fullTitle": "Session #incrementRoundsPlayed() should increment rounds played",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.incrementRoundsPlayed();<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "6cd6f234-82db-491f-9de1-0c3fc1a99eda",
                "parentUUID": "3cb1ef5e-73b3-4da7-a6ac-a096d8601c2e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "3cb1ef5e-73b3-4da7-a6ac-a096d8601c2e",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should increment rounds played",
                "fullTitle": "Session #incrementRoundsPlayed() should increment rounds played",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.incrementRoundsPlayed();<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "6cd6f234-82db-491f-9de1-0c3fc1a99eda",
                "parentUUID": "3cb1ef5e-73b3-4da7-a6ac-a096d8601c2e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#addContestant(contestant)",
            "suites": [
              {
                "title": "when in individual mode",
                "suites": [],
                "tests": [
                  {
                    "title": "should add contestant when session is not full",
                    "fullTitle": "#addContestant(contestant) when in individual mode should add contestant when session is not full",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
                    "isRoot": false,
                    "uuid": "fa5db502-e397-427b-9a87-3ea2948e61b5",
                    "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when session is full",
                    "fullTitle": "#addContestant(contestant) when in individual mode should not add contestant when session is full",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br>s.addContestant(c2);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();",
                    "isRoot": false,
                    "uuid": "6fe1645c-3754-4af0-a134-2db86a1cb921",
                    "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when username is already taken",
                    "fullTitle": "#addContestant(contestant) when in individual mode should not add contestant when username is already taken",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
                    "isRoot": false,
                    "uuid": "185ec52b-6753-4628-93be-64837ed4f05e",
                    "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
                    "skipped": false
                  },
                  {
                    "title": "BUG# username case should not matter",
                    "fullTitle": "#addContestant(contestant) when in individual mode BUG# username case should not matter",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'abc1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'ABC1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
                    "isRoot": false,
                    "uuid": "bb892d04-3cdf-466d-9f43-03b91a4dc16c",
                    "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
                    "skipped": false
                  },
                  {
                    "title": "should allow unlimited contestants when max is set to constants.UNLIMITED",
                    "fullTitle": "#addContestant(contestant) when in individual mode should allow unlimited contestants when max is set to constants.UNLIMITED",
                    "timedOut": false,
                    "duration": 561,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = constants.UNLIMITED;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>    c.username = <span class=\"hljs-string\">'c'</span> + i;<br>    <span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>    response.wasSuccessful.should.be.true();<br>}",
                    "isRoot": false,
                    "uuid": "8eba61ca-10eb-4760-9b2e-d590ce7a363f",
                    "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should add contestant when session is not full",
                    "fullTitle": "#addContestant(contestant) when in individual mode should add contestant when session is not full",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
                    "isRoot": false,
                    "uuid": "fa5db502-e397-427b-9a87-3ea2948e61b5",
                    "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when session is full",
                    "fullTitle": "#addContestant(contestant) when in individual mode should not add contestant when session is full",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br>s.addContestant(c2);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();",
                    "isRoot": false,
                    "uuid": "6fe1645c-3754-4af0-a134-2db86a1cb921",
                    "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when username is already taken",
                    "fullTitle": "#addContestant(contestant) when in individual mode should not add contestant when username is already taken",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
                    "isRoot": false,
                    "uuid": "185ec52b-6753-4628-93be-64837ed4f05e",
                    "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
                    "skipped": false
                  },
                  {
                    "title": "BUG# username case should not matter",
                    "fullTitle": "#addContestant(contestant) when in individual mode BUG# username case should not matter",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'abc1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'ABC1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
                    "isRoot": false,
                    "uuid": "bb892d04-3cdf-466d-9f43-03b91a4dc16c",
                    "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
                    "skipped": false
                  },
                  {
                    "title": "should allow unlimited contestants when max is set to constants.UNLIMITED",
                    "fullTitle": "#addContestant(contestant) when in individual mode should allow unlimited contestants when max is set to constants.UNLIMITED",
                    "timedOut": false,
                    "duration": 561,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = constants.UNLIMITED;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>    c.username = <span class=\"hljs-string\">'c'</span> + i;<br>    <span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>    response.wasSuccessful.should.be.true();<br>}",
                    "isRoot": false,
                    "uuid": "8eba61ca-10eb-4760-9b2e-d590ce7a363f",
                    "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 563
              },
              {
                "title": "when in team mode",
                "suites": [],
                "tests": [
                  {
                    "title": "should add contestant when teams is not full",
                    "fullTitle": "#addContestant(contestant) when in team mode should add contestant when teams is not full",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
                    "isRoot": false,
                    "uuid": "7a61955f-6b4a-4551-9ba9-81c51b516852",
                    "parentUUID": "80839e57-70af-45c3-9595-3bef74fa3ad0",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when teams are full",
                    "fullTitle": "#addContestant(contestant) when in team mode should not add contestant when teams are full",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.TEAMS_ARE_FULL);",
                    "isRoot": false,
                    "uuid": "db46afab-873b-4a64-805c-6ff841851a8f",
                    "parentUUID": "80839e57-70af-45c3-9595-3bef74fa3ad0",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when username is already taken",
                    "fullTitle": "#addContestant(contestant) when in team mode should not add contestant when username is already taken",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
                    "isRoot": false,
                    "uuid": "bb6e6718-06a5-479a-86b5-f191d4adae9e",
                    "parentUUID": "80839e57-70af-45c3-9595-3bef74fa3ad0",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "80839e57-70af-45c3-9595-3bef74fa3ad0",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should add contestant when teams is not full",
                    "fullTitle": "#addContestant(contestant) when in team mode should add contestant when teams is not full",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
                    "isRoot": false,
                    "uuid": "7a61955f-6b4a-4551-9ba9-81c51b516852",
                    "parentUUID": "80839e57-70af-45c3-9595-3bef74fa3ad0",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when teams are full",
                    "fullTitle": "#addContestant(contestant) when in team mode should not add contestant when teams are full",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.TEAMS_ARE_FULL);",
                    "isRoot": false,
                    "uuid": "db46afab-873b-4a64-805c-6ff841851a8f",
                    "parentUUID": "80839e57-70af-45c3-9595-3bef74fa3ad0",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant when username is already taken",
                    "fullTitle": "#addContestant(contestant) when in team mode should not add contestant when username is already taken",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
                    "isRoot": false,
                    "uuid": "bb6e6718-06a5-479a-86b5-f191d4adae9e",
                    "parentUUID": "80839e57-70af-45c3-9595-3bef74fa3ad0",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 3
              }
            ],
            "tests": [
              {
                "title": "should not allow a contestant username with bad words",
                "fullTitle": "Session #addContestant(contestant) should not allow a contestant username with bad words",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Penis #YOLO'</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_CONTAINS_PROFANITY);",
                "isRoot": false,
                "uuid": "20378836-969f-4292-ad35-04c1de154095",
                "parentUUID": "c096e9e3-918e-4725-a8bb-15d7331ef950",
                "skipped": false
              },
              {
                "title": "should not allow when username is empty",
                "fullTitle": "Session #addContestant(contestant) should not allow when username is empty",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">' '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_IS_REQUIRED);",
                "isRoot": false,
                "uuid": "2e2f2a17-e266-4981-95cb-a04d42b44e86",
                "parentUUID": "c096e9e3-918e-4725-a8bb-15d7331ef950",
                "skipped": false
              },
              {
                "title": "should trim username",
                "fullTitle": "Session #addContestant(contestant) should trim username",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Wade  '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>c.username.should.equal(<span class=\"hljs-string\">'Wade'</span>);",
                "isRoot": false,
                "uuid": "faa0196f-2cfd-4724-a3f3-8e588a164ff6",
                "parentUUID": "c096e9e3-918e-4725-a8bb-15d7331ef950",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "c096e9e3-918e-4725-a8bb-15d7331ef950",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should not allow a contestant username with bad words",
                "fullTitle": "Session #addContestant(contestant) should not allow a contestant username with bad words",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Penis #YOLO'</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_CONTAINS_PROFANITY);",
                "isRoot": false,
                "uuid": "20378836-969f-4292-ad35-04c1de154095",
                "parentUUID": "c096e9e3-918e-4725-a8bb-15d7331ef950",
                "skipped": false
              },
              {
                "title": "should not allow when username is empty",
                "fullTitle": "Session #addContestant(contestant) should not allow when username is empty",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">' '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_IS_REQUIRED);",
                "isRoot": false,
                "uuid": "2e2f2a17-e266-4981-95cb-a04d42b44e86",
                "parentUUID": "c096e9e3-918e-4725-a8bb-15d7331ef950",
                "skipped": false
              },
              {
                "title": "should trim username",
                "fullTitle": "Session #addContestant(contestant) should trim username",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Wade  '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>c.username.should.equal(<span class=\"hljs-string\">'Wade'</span>);",
                "isRoot": false,
                "uuid": "faa0196f-2cfd-4724-a3f3-8e588a164ff6",
                "parentUUID": "c096e9e3-918e-4725-a8bb-15d7331ef950",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 4
          },
          {
            "title": "#subscribeForStateChange(event, callback)",
            "suites": [],
            "tests": [
              {
                "title": "should subscribe callback to the correct event",
                "fullTitle": "Session #subscribeForStateChange(event, callback) should subscribe callback to the correct event",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> r = s.addContestant(c);<br>r.wasSuccessful.should.be.true();<br>s.subscribeForStateChange(<span class=\"hljs-string\">'onpending'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">session, event, from, to</span>) </span>{<br>    session.should.equal(s);<br>    event.should.equal(<span class=\"hljs-string\">'buzzerPressed'</span>);<br>    from.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>    to.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>    done();<br>});<br>s.tryBuzzerPressRegister(c.id).should.be.true();",
                "isRoot": false,
                "uuid": "70115ce2-9fe3-4cef-9fc1-39e9a478ed08",
                "parentUUID": "f4583c9f-e613-4399-a9af-b815ceff16bb",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "f4583c9f-e613-4399-a9af-b815ceff16bb",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should subscribe callback to the correct event",
                "fullTitle": "Session #subscribeForStateChange(event, callback) should subscribe callback to the correct event",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> r = s.addContestant(c);<br>r.wasSuccessful.should.be.true();<br>s.subscribeForStateChange(<span class=\"hljs-string\">'onpending'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">session, event, from, to</span>) </span>{<br>    session.should.equal(s);<br>    event.should.equal(<span class=\"hljs-string\">'buzzerPressed'</span>);<br>    from.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>    to.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>    done();<br>});<br>s.tryBuzzerPressRegister(c.id).should.be.true();",
                "isRoot": false,
                "uuid": "70115ce2-9fe3-4cef-9fc1-39e9a478ed08",
                "parentUUID": "f4583c9f-e613-4399-a9af-b815ceff16bb",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "tryBuzzerPressRegister(contestantId)",
            "suites": [],
            "tests": [
              {
                "title": "should register when state is ready",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should register when state is ready",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);",
                "isRoot": false,
                "uuid": "f1bd0f4a-5843-4804-b720-6a8954bd448f",
                "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
                "skipped": false
              },
              {
                "title": "should not register when state is not ready",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not register when state is not ready",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.false();",
                "isRoot": false,
                "uuid": "4d4e195d-410d-45b3-ab97-62ef2e323dac",
                "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
                "skipped": false
              },
              {
                "title": "should not register when contestant does not exist",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not register when contestant does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(idUtility.generateParticipantId()).should.be.false();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
                "isRoot": false,
                "uuid": "63122334-0a23-4429-a8a9-6cbc2fc6634b",
                "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
                "skipped": false
              },
              {
                "title": "should not replace previous round winner with pending contestant",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not replace previous round winner with pending contestant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                "isRoot": false,
                "uuid": "b543f642-197f-4629-97b7-1ed07b6808dd",
                "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
                "skipped": false
              },
              {
                "title": "should not add previous round winner to winners list",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not add previous round winner to winners list",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "6a19519c-dd50-43a4-9c39-7f26fa8f9f44",
                "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should register when state is ready",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should register when state is ready",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);",
                "isRoot": false,
                "uuid": "f1bd0f4a-5843-4804-b720-6a8954bd448f",
                "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
                "skipped": false
              },
              {
                "title": "should not register when state is not ready",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not register when state is not ready",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.false();",
                "isRoot": false,
                "uuid": "4d4e195d-410d-45b3-ab97-62ef2e323dac",
                "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
                "skipped": false
              },
              {
                "title": "should not register when contestant does not exist",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not register when contestant does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(idUtility.generateParticipantId()).should.be.false();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
                "isRoot": false,
                "uuid": "63122334-0a23-4429-a8a9-6cbc2fc6634b",
                "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
                "skipped": false
              },
              {
                "title": "should not replace previous round winner with pending contestant",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not replace previous round winner with pending contestant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                "isRoot": false,
                "uuid": "b543f642-197f-4629-97b7-1ed07b6808dd",
                "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
                "skipped": false
              },
              {
                "title": "should not add previous round winner to winners list",
                "fullTitle": "Session tryBuzzerPressRegister(contestantId) should not add previous round winner to winners list",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "6a19519c-dd50-43a4-9c39-7f26fa8f9f44",
                "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "tryBuzzerAction(action)",
            "suites": [
              {
                "title": "action->ACCEPT",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should allow when game state is pending",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();",
                    "isRoot": false,
                    "uuid": "180ec4d4-9421-43b1-a8b1-1cf9f0fec4fa",
                    "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when game state is not pending",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should not allow when game state is not pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.false();",
                    "isRoot": false,
                    "uuid": "0140ee77-15c0-4ec6-9a16-da4b53161b89",
                    "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
                    "skipped": false
                  },
                  {
                    "title": "should update contestant's score",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should update contestant's score",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "5106da1b-9413-4007-8337-503e3dcbd9ac",
                    "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
                    "skipped": false
                  },
                  {
                    "title": "should update contestant's team score",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should update contestant's team score",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>s.teams.all[<span class=\"hljs-number\">0</span>].score.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "9c2b5e72-b9de-4fb2-abca-65e55635ddea",
                    "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
                    "skipped": false
                  },
                  {
                    "title": "should add previous round winner to winners list",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should add previous round winner to winners list",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "b457cd70-39cd-4d26-be80-c3e5622d6c75",
                    "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
                    "skipped": false
                  },
                  {
                    "title": "should change game state back to ready",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should change game state back to ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "a5d2e401-7105-4cbe-b693-bd342d71c0b7",
                    "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
                    "skipped": false
                  },
                  {
                    "title": "should clear pending winner",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should clear pending winner",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>should(s.pendingWinner).be.null();",
                    "isRoot": false,
                    "uuid": "3e78dfab-5090-488d-9e02-4d350acaf806",
                    "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should allow when game state is pending",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();",
                    "isRoot": false,
                    "uuid": "180ec4d4-9421-43b1-a8b1-1cf9f0fec4fa",
                    "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when game state is not pending",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should not allow when game state is not pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.false();",
                    "isRoot": false,
                    "uuid": "0140ee77-15c0-4ec6-9a16-da4b53161b89",
                    "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
                    "skipped": false
                  },
                  {
                    "title": "should update contestant's score",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should update contestant's score",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "5106da1b-9413-4007-8337-503e3dcbd9ac",
                    "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
                    "skipped": false
                  },
                  {
                    "title": "should update contestant's team score",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should update contestant's team score",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>s.teams.all[<span class=\"hljs-number\">0</span>].score.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "9c2b5e72-b9de-4fb2-abca-65e55635ddea",
                    "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
                    "skipped": false
                  },
                  {
                    "title": "should add previous round winner to winners list",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should add previous round winner to winners list",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "b457cd70-39cd-4d26-be80-c3e5622d6c75",
                    "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
                    "skipped": false
                  },
                  {
                    "title": "should change game state back to ready",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should change game state back to ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "a5d2e401-7105-4cbe-b693-bd342d71c0b7",
                    "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
                    "skipped": false
                  },
                  {
                    "title": "should clear pending winner",
                    "fullTitle": "tryBuzzerAction(action) action->ACCEPT should clear pending winner",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>should(s.pendingWinner).be.null();",
                    "isRoot": false,
                    "uuid": "3e78dfab-5090-488d-9e02-4d350acaf806",
                    "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 7,
                "totalPasses": 7,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 2
              },
              {
                "title": "action->REJECT",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should allow when game state is pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();",
                    "isRoot": false,
                    "uuid": "d5d5503b-bed2-4a83-982a-fefc54bd2307",
                    "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when game state is not pending",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should not allow when game state is not pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.false();",
                    "isRoot": false,
                    "uuid": "bc913894-ba50-4114-9834-a286c4121efb",
                    "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
                    "skipped": false
                  },
                  {
                    "title": "should not replace round winner with pending contestant",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should not replace round winner with pending contestant",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "1fc01360-a2c5-4461-8ce3-5ae019db83ff",
                    "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
                    "skipped": false
                  },
                  {
                    "title": "should not update pending contestant's score",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should not update pending contestant's score",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.score.should.equal(<span class=\"hljs-number\">0</span>);",
                    "isRoot": false,
                    "uuid": "c19f88bf-98ad-4dda-bc4d-26e68c20b3a1",
                    "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
                    "skipped": false
                  },
                  {
                    "title": "should add round winner to previous winners list",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should add round winner to previous winners list",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "9cbc7c7d-4ed0-4daf-b8ac-0d804faf277b",
                    "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
                    "skipped": false
                  },
                  {
                    "title": "should change game state back to ready",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should change game state back to ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "e93f18de-abcd-4020-8a47-f946e45918d0",
                    "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should allow when game state is pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();",
                    "isRoot": false,
                    "uuid": "d5d5503b-bed2-4a83-982a-fefc54bd2307",
                    "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when game state is not pending",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should not allow when game state is not pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.false();",
                    "isRoot": false,
                    "uuid": "bc913894-ba50-4114-9834-a286c4121efb",
                    "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
                    "skipped": false
                  },
                  {
                    "title": "should not replace round winner with pending contestant",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should not replace round winner with pending contestant",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "1fc01360-a2c5-4461-8ce3-5ae019db83ff",
                    "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
                    "skipped": false
                  },
                  {
                    "title": "should not update pending contestant's score",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should not update pending contestant's score",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.score.should.equal(<span class=\"hljs-number\">0</span>);",
                    "isRoot": false,
                    "uuid": "c19f88bf-98ad-4dda-bc4d-26e68c20b3a1",
                    "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
                    "skipped": false
                  },
                  {
                    "title": "should add round winner to previous winners list",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should add round winner to previous winners list",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "9cbc7c7d-4ed0-4daf-b8ac-0d804faf277b",
                    "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
                    "skipped": false
                  },
                  {
                    "title": "should change game state back to ready",
                    "fullTitle": "tryBuzzerAction(action) action->REJECT should change game state back to ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "e93f18de-abcd-4020-8a47-f946e45918d0",
                    "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              },
              {
                "title": "action->RESET",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when game state is ready",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should allow when game state is ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
                    "isRoot": false,
                    "uuid": "f795c33e-2520-4cbd-8dc0-814f5f29d718",
                    "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
                    "skipped": false
                  },
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should allow when game state is pending",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
                    "isRoot": false,
                    "uuid": "f594b5d2-9ace-40fc-bc0f-8bd589147ae0",
                    "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
                    "skipped": false
                  },
                  {
                    "title": "should not replace previous round winner with pending contestant",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should not replace previous round winner with pending contestant",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "332c5e6e-5f65-4e6d-ab6c-eeec8e50dc6e",
                    "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
                    "skipped": false
                  },
                  {
                    "title": "should add previous round winner to winners list",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should add previous round winner to winners list",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "f571d110-35e4-4f85-8ccd-78363bffccae",
                    "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
                    "skipped": false
                  },
                  {
                    "title": "should change game state back to ready",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should change game state back to ready",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "51377fba-c478-4168-ba21-8b3b1ed03bda",
                    "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "859df7c9-144b-4682-b2da-130992793f65",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should allow when game state is ready",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should allow when game state is ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
                    "isRoot": false,
                    "uuid": "f795c33e-2520-4cbd-8dc0-814f5f29d718",
                    "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
                    "skipped": false
                  },
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should allow when game state is pending",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
                    "isRoot": false,
                    "uuid": "f594b5d2-9ace-40fc-bc0f-8bd589147ae0",
                    "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
                    "skipped": false
                  },
                  {
                    "title": "should not replace previous round winner with pending contestant",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should not replace previous round winner with pending contestant",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "332c5e6e-5f65-4e6d-ab6c-eeec8e50dc6e",
                    "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
                    "skipped": false
                  },
                  {
                    "title": "should add previous round winner to winners list",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should add previous round winner to winners list",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "f571d110-35e4-4f85-8ccd-78363bffccae",
                    "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
                    "skipped": false
                  },
                  {
                    "title": "should change game state back to ready",
                    "fullTitle": "tryBuzzerAction(action) action->RESET should change game state back to ready",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "51377fba-c478-4168-ba21-8b3b1ed03bda",
                    "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 2
              },
              {
                "title": "action->DISABLE",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when game state is ready",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should allow when game state is ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
                    "isRoot": false,
                    "uuid": "d103bfc0-3186-4c51-9943-c8a83123afe2",
                    "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
                    "skipped": false
                  },
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should allow when game state is pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
                    "isRoot": false,
                    "uuid": "8637f90a-c57b-4a8b-97e5-703a8e9fe29c",
                    "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
                    "skipped": false
                  },
                  {
                    "title": "should not replace previous round winner with pending contestant",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should not replace previous round winner with pending contestant",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "a161da32-8f71-486b-80fc-bfe5c41d5572",
                    "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
                    "skipped": false
                  },
                  {
                    "title": "should add previous round winner to winners list",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should add previous round winner to winners list",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "6d8336b4-4a55-4784-939b-a279d03ecca1",
                    "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
                    "skipped": false
                  },
                  {
                    "title": "should change game state to buzzerLock",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should change game state to buzzerLock",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.BUZZER_LOCK);",
                    "isRoot": false,
                    "uuid": "58cb1170-f470-4e5f-bb92-46300df31cdf",
                    "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should allow when game state is ready",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should allow when game state is ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
                    "isRoot": false,
                    "uuid": "d103bfc0-3186-4c51-9943-c8a83123afe2",
                    "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
                    "skipped": false
                  },
                  {
                    "title": "should allow when game state is pending",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should allow when game state is pending",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
                    "isRoot": false,
                    "uuid": "8637f90a-c57b-4a8b-97e5-703a8e9fe29c",
                    "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
                    "skipped": false
                  },
                  {
                    "title": "should not replace previous round winner with pending contestant",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should not replace previous round winner with pending contestant",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "a161da32-8f71-486b-80fc-bfe5c41d5572",
                    "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
                    "skipped": false
                  },
                  {
                    "title": "should add previous round winner to winners list",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should add previous round winner to winners list",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
                    "isRoot": false,
                    "uuid": "6d8336b4-4a55-4784-939b-a279d03ecca1",
                    "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
                    "skipped": false
                  },
                  {
                    "title": "should change game state to buzzerLock",
                    "fullTitle": "tryBuzzerAction(action) action->DISABLE should change game state to buzzerLock",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.BUZZER_LOCK);",
                    "isRoot": false,
                    "uuid": "58cb1170-f470-4e5f-bb92-46300df31cdf",
                    "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 5,
                "totalPasses": 5,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "action->ENABLE",
                "suites": [],
                "tests": [
                  {
                    "title": "should allow when game state is buzzerLock",
                    "fullTitle": "tryBuzzerAction(action) action->ENABLE should allow when game state is buzzerLock",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();",
                    "isRoot": false,
                    "uuid": "84c0380d-3896-4f21-9415-1001a5653b14",
                    "parentUUID": "c81a0878-4615-4254-abae-de14193b35f2",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when game state is not buzzerLock",
                    "fullTitle": "tryBuzzerAction(action) action->ENABLE should not allow when game state is not buzzerLock",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.false();",
                    "isRoot": false,
                    "uuid": "08c0373b-ce65-4071-920f-2be08ad2bb64",
                    "parentUUID": "c81a0878-4615-4254-abae-de14193b35f2",
                    "skipped": false
                  },
                  {
                    "title": "should change game state to ready",
                    "fullTitle": "tryBuzzerAction(action) action->ENABLE should change game state to ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "258f940b-61e0-4f74-8102-5a5a24cd5ea3",
                    "parentUUID": "c81a0878-4615-4254-abae-de14193b35f2",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/SessionTests.js",
                "uuid": "c81a0878-4615-4254-abae-de14193b35f2",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
                "passes": [
                  {
                    "title": "should allow when game state is buzzerLock",
                    "fullTitle": "tryBuzzerAction(action) action->ENABLE should allow when game state is buzzerLock",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();",
                    "isRoot": false,
                    "uuid": "84c0380d-3896-4f21-9415-1001a5653b14",
                    "parentUUID": "c81a0878-4615-4254-abae-de14193b35f2",
                    "skipped": false
                  },
                  {
                    "title": "should not allow when game state is not buzzerLock",
                    "fullTitle": "tryBuzzerAction(action) action->ENABLE should not allow when game state is not buzzerLock",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.false();",
                    "isRoot": false,
                    "uuid": "08c0373b-ce65-4071-920f-2be08ad2bb64",
                    "parentUUID": "c81a0878-4615-4254-abae-de14193b35f2",
                    "skipped": false
                  },
                  {
                    "title": "should change game state to ready",
                    "fullTitle": "tryBuzzerAction(action) action->ENABLE should change game state to ready",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
                    "isRoot": false,
                    "uuid": "258f940b-61e0-4f74-8102-5a5a24cd5ea3",
                    "parentUUID": "c81a0878-4615-4254-abae-de14193b35f2",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "37b34bce-a013-4c0e-b99e-95ff7013d59a",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#pendingWinner",
            "suites": [],
            "tests": [
              {
                "title": "should return the pending winner",
                "fullTitle": "Session #pendingWinner should return the pending winner",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.pendingWinner.should.equal(<span class=\"hljs-string\">'testUser'</span>);",
                "isRoot": false,
                "uuid": "8110cf93-da8e-4c85-8f9b-78da313813fb",
                "parentUUID": "58979f2a-9a7e-48ef-a2e2-790295c8e849",
                "skipped": false
              },
              {
                "title": "should not return the pending winner",
                "fullTitle": "Session #pendingWinner should not return the pending winner",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>should(s.pendingWinner).be.null();",
                "isRoot": false,
                "uuid": "6f0e5a33-8ddf-4897-a2a5-be949d8eb488",
                "parentUUID": "58979f2a-9a7e-48ef-a2e2-790295c8e849",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "58979f2a-9a7e-48ef-a2e2-790295c8e849",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should return the pending winner",
                "fullTitle": "Session #pendingWinner should return the pending winner",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.pendingWinner.should.equal(<span class=\"hljs-string\">'testUser'</span>);",
                "isRoot": false,
                "uuid": "8110cf93-da8e-4c85-8f9b-78da313813fb",
                "parentUUID": "58979f2a-9a7e-48ef-a2e2-790295c8e849",
                "skipped": false
              },
              {
                "title": "should not return the pending winner",
                "fullTitle": "Session #pendingWinner should not return the pending winner",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>should(s.pendingWinner).be.null();",
                "isRoot": false,
                "uuid": "6f0e5a33-8ddf-4897-a2a5-be949d8eb488",
                "parentUUID": "58979f2a-9a7e-48ef-a2e2-790295c8e849",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "#updateSessionName(name)",
            "suites": [],
            "tests": [
              {
                "title": "should update session name",
                "fullTitle": "Session #updateSessionName(name) should update session name",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.updateSessionName(<span class=\"hljs-string\">'session2'</span>);<br>settings.sessionName.should.equal(<span class=\"hljs-string\">'session2'</span>);",
                "isRoot": false,
                "uuid": "9ecab26d-0a8b-4e5a-8f58-ef493eb400ab",
                "parentUUID": "81df9373-1625-4bb3-a867-3b0fc59e47c3",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "81df9373-1625-4bb3-a867-3b0fc59e47c3",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should update session name",
                "fullTitle": "Session #updateSessionName(name) should update session name",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.updateSessionName(<span class=\"hljs-string\">'session2'</span>);<br>settings.sessionName.should.equal(<span class=\"hljs-string\">'session2'</span>);",
                "isRoot": false,
                "uuid": "9ecab26d-0a8b-4e5a-8f58-ef493eb400ab",
                "parentUUID": "81df9373-1625-4bb3-a867-3b0fc59e47c3",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#updateMaxContestants(maxContestants)",
            "suites": [],
            "tests": [
              {
                "title": "should update max contestants",
                "fullTitle": "Session #updateMaxContestants(maxContestants) should update max contestants",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "256f648f-c4e4-4270-9185-241893157ade",
                "parentUUID": "bc4dfd09-aea7-4fb9-a8a3-44934e164133",
                "skipped": false
              },
              {
                "title": "should not allow below current connected amount",
                "fullTitle": "Session #updateMaxContestants(maxContestants) should not allow below current connected amount",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>s.addContestant(c1).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>s.addContestant(c2).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">1</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_CONTESTANTS_MUST_BE_GREATER_THAN_ALREADY_CONNECTED);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "c2ee8699-e277-44f9-afce-63288c19779e",
                "parentUUID": "bc4dfd09-aea7-4fb9-a8a3-44934e164133",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "bc4dfd09-aea7-4fb9-a8a3-44934e164133",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should update max contestants",
                "fullTitle": "Session #updateMaxContestants(maxContestants) should update max contestants",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "256f648f-c4e4-4270-9185-241893157ade",
                "parentUUID": "bc4dfd09-aea7-4fb9-a8a3-44934e164133",
                "skipped": false
              },
              {
                "title": "should not allow below current connected amount",
                "fullTitle": "Session #updateMaxContestants(maxContestants) should not allow below current connected amount",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.maxContestants = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>s.addContestant(c1).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>s.addContestant(c2).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">1</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_CONTESTANTS_MUST_BE_GREATER_THAN_ALREADY_CONNECTED);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "c2ee8699-e277-44f9-afce-63288c19779e",
                "parentUUID": "bc4dfd09-aea7-4fb9-a8a3-44934e164133",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#updateTeamSize(teamSize)",
            "suites": [],
            "tests": [
              {
                "title": "should update team size",
                "fullTitle": "Session #updateTeamSize(teamSize) should update team size",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.teamSize.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "df85fb4d-caf8-451b-872c-b423495fa283",
                "parentUUID": "18844933-31ba-4130-89e7-61500a668d55",
                "skipped": false
              },
              {
                "title": "should not allow below current setting",
                "fullTitle": "Session #updateTeamSize(teamSize) should not allow below current setting",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.TEAM_SIZE_MUST_BE_GREATER_THAN_ALREADY_SET);",
                "isRoot": false,
                "uuid": "5c7b2de6-dc33-41af-81eb-defd349275de",
                "parentUUID": "18844933-31ba-4130-89e7-61500a668d55",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "18844933-31ba-4130-89e7-61500a668d55",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should update team size",
                "fullTitle": "Session #updateTeamSize(teamSize) should update team size",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.teamSize.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "df85fb4d-caf8-451b-872c-b423495fa283",
                "parentUUID": "18844933-31ba-4130-89e7-61500a668d55",
                "skipped": false
              },
              {
                "title": "should not allow below current setting",
                "fullTitle": "Session #updateTeamSize(teamSize) should not allow below current setting",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.TEAM_SIZE_MUST_BE_GREATER_THAN_ALREADY_SET);",
                "isRoot": false,
                "uuid": "5c7b2de6-dc33-41af-81eb-defd349275de",
                "parentUUID": "18844933-31ba-4130-89e7-61500a668d55",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#updateMaxTeams(maxTeams)",
            "suites": [],
            "tests": [
              {
                "title": "should update max teams",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should update max teams",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxTeams.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "ac9a50a5-f122-438c-baa1-970b78ac4fe6",
                "parentUUID": "06034981-0511-4bc1-bfb6-6532f69a57c1",
                "skipped": false
              },
              {
                "title": "should add teams",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should add teams",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">5</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "4046378b-6cba-4d1c-ba0e-0a33012ac519",
                "parentUUID": "06034981-0511-4bc1-bfb6-6532f69a57c1",
                "skipped": false
              },
              {
                "title": "should not allow below current setting",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should not allow below current setting",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_MUST_BE_GREATER_THAN_ALREADY_SET);",
                "isRoot": false,
                "uuid": "951c3142-e1d2-4b06-9332-b39e57c0b5cf",
                "parentUUID": "06034981-0511-4bc1-bfb6-6532f69a57c1",
                "skipped": false
              },
              {
                "title": "should not allow if teams are PLAYER_CHOICE",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should not allow if teams are PLAYER_CHOICE",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">6</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_CANNOT_BE_CHANGED_WHEN_PLAYER_CHOICE);",
                "isRoot": false,
                "uuid": "410e84af-1d53-4fd4-b9cd-853c653aea8a",
                "parentUUID": "06034981-0511-4bc1-bfb6-6532f69a57c1",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionTests.js",
            "uuid": "06034981-0511-4bc1-bfb6-6532f69a57c1",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
            "passes": [
              {
                "title": "should update max teams",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should update max teams",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxTeams.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "ac9a50a5-f122-438c-baa1-970b78ac4fe6",
                "parentUUID": "06034981-0511-4bc1-bfb6-6532f69a57c1",
                "skipped": false
              },
              {
                "title": "should add teams",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should add teams",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">5</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "4046378b-6cba-4d1c-ba0e-0a33012ac519",
                "parentUUID": "06034981-0511-4bc1-bfb6-6532f69a57c1",
                "skipped": false
              },
              {
                "title": "should not allow below current setting",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should not allow below current setting",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_MUST_BE_GREATER_THAN_ALREADY_SET);",
                "isRoot": false,
                "uuid": "951c3142-e1d2-4b06-9332-b39e57c0b5cf",
                "parentUUID": "06034981-0511-4bc1-bfb6-6532f69a57c1",
                "skipped": false
              },
              {
                "title": "should not allow if teams are PLAYER_CHOICE",
                "fullTitle": "Session #updateMaxTeams(maxTeams) should not allow if teams are PLAYER_CHOICE",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">6</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_CANNOT_BE_CHANGED_WHEN_PLAYER_CHOICE);",
                "isRoot": false,
                "uuid": "410e84af-1d53-4fd4-b9cd-853c653aea8a",
                "parentUUID": "06034981-0511-4bc1-bfb6-6532f69a57c1",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/SessionTests.js",
        "uuid": "815d4294-02f9-4e7f-8a3e-27f635f6e8ed",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Sessions",
        "suites": [
          {
            "title": "#all",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Sessions #all should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    sc.all = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "a9443023-bff1-4b18-b2c5-b5f9446c665d",
                "parentUUID": "58edba13-c4a9-49a9-b7d0-3ded8dad5819",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Sessions #all should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
                "isRoot": false,
                "uuid": "4f5ee7db-7af1-4cd2-9323-0591874a4d2b",
                "parentUUID": "58edba13-c4a9-49a9-b7d0-3ded8dad5819",
                "skipped": false
              },
              {
                "title": "should get copy of val and not reference",
                "fullTitle": "Sessions #all should get copy of val and not reference",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all.pop();<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
                "isRoot": false,
                "uuid": "8ee75885-3139-41c0-9c06-68bf977a6658",
                "parentUUID": "58edba13-c4a9-49a9-b7d0-3ded8dad5819",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionsTests.js",
            "uuid": "58edba13-c4a9-49a9-b7d0-3ded8dad5819",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionsTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Sessions #all should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    sc.all = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "a9443023-bff1-4b18-b2c5-b5f9446c665d",
                "parentUUID": "58edba13-c4a9-49a9-b7d0-3ded8dad5819",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Sessions #all should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
                "isRoot": false,
                "uuid": "4f5ee7db-7af1-4cd2-9323-0591874a4d2b",
                "parentUUID": "58edba13-c4a9-49a9-b7d0-3ded8dad5819",
                "skipped": false
              },
              {
                "title": "should get copy of val and not reference",
                "fullTitle": "Sessions #all should get copy of val and not reference",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all.pop();<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
                "isRoot": false,
                "uuid": "8ee75885-3139-41c0-9c06-68bf977a6658",
                "parentUUID": "58edba13-c4a9-49a9-b7d0-3ded8dad5819",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#add(host, settings)",
            "suites": [],
            "tests": [
              {
                "title": "add and return session",
                "fullTitle": "Sessions #add(host, settings) add and return session",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-keyword\">var</span> ses = sc.add(h, s);<br>ses.should.be.instanceof(Session);",
                "isRoot": false,
                "uuid": "5ecdb3d9-f37a-49fe-849c-25f5c575612d",
                "parentUUID": "29837c6f-77a9-4ea4-b38a-190b2f9381e2",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionsTests.js",
            "uuid": "29837c6f-77a9-4ea4-b38a-190b2f9381e2",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionsTests.js",
            "passes": [
              {
                "title": "add and return session",
                "fullTitle": "Sessions #add(host, settings) add and return session",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-keyword\">var</span> ses = sc.add(h, s);<br>ses.should.be.instanceof(Session);",
                "isRoot": false,
                "uuid": "5ecdb3d9-f37a-49fe-849c-25f5c575612d",
                "parentUUID": "29837c6f-77a9-4ea4-b38a-190b2f9381e2",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#getById(id)",
            "suites": [],
            "tests": [
              {
                "title": "when given valid id should return session",
                "fullTitle": "Sessions #getById(id) when given valid id should return session",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-comment\">/* eslint-disable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses1 = sc.add(h, s);<br><span class=\"hljs-comment\">/* eslint-enable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses2 = sc.add(h, s);<br><span class=\"hljs-keyword\">var</span> sessionLocate = sc.getById(ses2.id);<br>sessionLocate.should.be.instanceof(Session)<br>    .and.equal(ses2);",
                "isRoot": false,
                "uuid": "cc6c0e43-01ec-44b0-9ffd-5a8f6c194b92",
                "parentUUID": "8cd01a6a-f5f2-4fd8-8e99-ff11bf1291c7",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionsTests.js",
            "uuid": "8cd01a6a-f5f2-4fd8-8e99-ff11bf1291c7",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionsTests.js",
            "passes": [
              {
                "title": "when given valid id should return session",
                "fullTitle": "Sessions #getById(id) when given valid id should return session",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-comment\">/* eslint-disable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses1 = sc.add(h, s);<br><span class=\"hljs-comment\">/* eslint-enable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses2 = sc.add(h, s);<br><span class=\"hljs-keyword\">var</span> sessionLocate = sc.getById(ses2.id);<br>sessionLocate.should.be.instanceof(Session)<br>    .and.equal(ses2);",
                "isRoot": false,
                "uuid": "cc6c0e43-01ec-44b0-9ffd-5a8f6c194b92",
                "parentUUID": "8cd01a6a-f5f2-4fd8-8e99-ff11bf1291c7",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#purgeCompleted()",
            "suites": [],
            "tests": [
              {
                "title": "should remove complete sc",
                "fullTitle": "Sessions #purgeCompleted() should remove complete sc",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.all[<span class=\"hljs-number\">0</span>].complete();<br>sc.all[<span class=\"hljs-number\">1</span>].complete();<br>sc.purgeCompleted();<br>sc.all.length.should.equal(<span class=\"hljs-number\">3</span>);",
                "isRoot": false,
                "uuid": "f47ec904-1390-4d90-87d4-c4be81206513",
                "parentUUID": "7ca47d67-f130-48ce-ba8f-ee134b3fe4b9",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SessionsTests.js",
            "uuid": "7ca47d67-f130-48ce-ba8f-ee134b3fe4b9",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionsTests.js",
            "passes": [
              {
                "title": "should remove complete sc",
                "fullTitle": "Sessions #purgeCompleted() should remove complete sc",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.all[<span class=\"hljs-number\">0</span>].complete();<br>sc.all[<span class=\"hljs-number\">1</span>].complete();<br>sc.purgeCompleted();<br>sc.all.length.should.equal(<span class=\"hljs-number\">3</span>);",
                "isRoot": false,
                "uuid": "f47ec904-1390-4d90-87d4-c4be81206513",
                "parentUUID": "7ca47d67-f130-48ce-ba8f-ee134b3fe4b9",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/SessionsTests.js",
        "uuid": "39b9d2f5-d94c-4ea3-911d-fb07a787708b",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SessionsTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Settings",
        "suites": [
          {
            "title": "#hasTeams",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #hasTeams should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s._hasTeams.should.be.true();",
                "isRoot": false,
                "uuid": "26429829-fdb8-4667-85c4-2877774a5753",
                "parentUUID": "dca5d607-45b1-4f15-8936-d08172958893",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #hasTeams should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.hasTeams.should.be.true();",
                "isRoot": false,
                "uuid": "61acbe9f-6927-45e5-b7af-8121ea936e6b",
                "parentUUID": "dca5d607-45b1-4f15-8936-d08172958893",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "dca5d607-45b1-4f15-8936-d08172958893",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #hasTeams should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s._hasTeams.should.be.true();",
                "isRoot": false,
                "uuid": "26429829-fdb8-4667-85c4-2877774a5753",
                "parentUUID": "dca5d607-45b1-4f15-8936-d08172958893",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #hasTeams should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.hasTeams.should.be.true();",
                "isRoot": false,
                "uuid": "61acbe9f-6927-45e5-b7af-8121ea936e6b",
                "parentUUID": "dca5d607-45b1-4f15-8936-d08172958893",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#teamSize",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamSize should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s._teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "31a88dfc-f71d-47c9-a555-a50cebd866fa",
                "parentUUID": "2f1c8671-387e-46d8-a738-bff92cc60d59",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamSize should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "c905c4d4-a234-488f-880d-ca2c815bb27e",
                "parentUUID": "2f1c8671-387e-46d8-a738-bff92cc60d59",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "2f1c8671-387e-46d8-a738-bff92cc60d59",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamSize should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s._teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "31a88dfc-f71d-47c9-a555-a50cebd866fa",
                "parentUUID": "2f1c8671-387e-46d8-a738-bff92cc60d59",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamSize should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "c905c4d4-a234-488f-880d-ca2c815bb27e",
                "parentUUID": "2f1c8671-387e-46d8-a738-bff92cc60d59",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#maxTeams",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #maxTeams should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s._maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "112b3965-8d5a-4f79-86e3-77cd7d1eb058",
                "parentUUID": "1742aecf-f305-46a2-a322-a66b7cf8b586",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #maxTeams should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxTeams = <span class=\"hljs-number\">1</span>;<br>s.maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "d3969d10-c21a-4541-8499-142237d44330",
                "parentUUID": "1742aecf-f305-46a2-a322-a66b7cf8b586",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "1742aecf-f305-46a2-a322-a66b7cf8b586",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #maxTeams should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s._maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "112b3965-8d5a-4f79-86e3-77cd7d1eb058",
                "parentUUID": "1742aecf-f305-46a2-a322-a66b7cf8b586",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #maxTeams should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxTeams = <span class=\"hljs-number\">1</span>;<br>s.maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "d3969d10-c21a-4541-8499-142237d44330",
                "parentUUID": "1742aecf-f305-46a2-a322-a66b7cf8b586",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#teamLeaderSelectionMethod",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamLeaderSelectionMethod should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s._teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
                "isRoot": false,
                "uuid": "e157bfc0-5992-4eaa-a00f-ce0706cffad4",
                "parentUUID": "3d8ea888-2908-4e2a-b7bf-300aba6eee02",
                "skipped": false
              },
              {
                "title": "should throw on set when constant value is invalid",
                "fullTitle": "Settings #teamLeaderSelectionMethod should throw on set when constant value is invalid",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamLeaderSelectionMethod.all.slice().sort(<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> a - b;<br>        }).pop();<br>    s.teamLeaderSelectionMethod = ++high;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "e2420f48-9bb3-432b-b736-da5aad8aa0ca",
                "parentUUID": "3d8ea888-2908-4e2a-b7bf-300aba6eee02",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamLeaderSelectionMethod should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s.teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
                "isRoot": false,
                "uuid": "baa3e1ea-e57a-4804-bc26-8e5c0aa97bda",
                "parentUUID": "3d8ea888-2908-4e2a-b7bf-300aba6eee02",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "3d8ea888-2908-4e2a-b7bf-300aba6eee02",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamLeaderSelectionMethod should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s._teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
                "isRoot": false,
                "uuid": "e157bfc0-5992-4eaa-a00f-ce0706cffad4",
                "parentUUID": "3d8ea888-2908-4e2a-b7bf-300aba6eee02",
                "skipped": false
              },
              {
                "title": "should throw on set when constant value is invalid",
                "fullTitle": "Settings #teamLeaderSelectionMethod should throw on set when constant value is invalid",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamLeaderSelectionMethod.all.slice().sort(<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> a - b;<br>        }).pop();<br>    s.teamLeaderSelectionMethod = ++high;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "e2420f48-9bb3-432b-b736-da5aad8aa0ca",
                "parentUUID": "3d8ea888-2908-4e2a-b7bf-300aba6eee02",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamLeaderSelectionMethod should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s.teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
                "isRoot": false,
                "uuid": "baa3e1ea-e57a-4804-bc26-8e5c0aa97bda",
                "parentUUID": "3d8ea888-2908-4e2a-b7bf-300aba6eee02",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#teamNameEdit",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamNameEdit should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s._teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
                "isRoot": false,
                "uuid": "14575311-2f44-4665-9655-c7fa165d426f",
                "parentUUID": "75ef43dc-5aa0-416f-95f6-6a7c5ccad663",
                "skipped": false
              },
              {
                "title": "should throw on set when constant value is invalid",
                "fullTitle": "Settings #teamNameEdit should throw on set when constant value is invalid",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamNameEdit.all.slice().sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,<br>        b</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> a - b;<br>    }).pop();<br>    s.teamNameEdit = ++high;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "031ea721-b271-47de-aac8-4af946039517",
                "parentUUID": "75ef43dc-5aa0-416f-95f6-6a7c5ccad663",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamNameEdit should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
                "isRoot": false,
                "uuid": "f340dafb-ddc3-4c8e-a9bf-346d49f03e5a",
                "parentUUID": "75ef43dc-5aa0-416f-95f6-6a7c5ccad663",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "75ef43dc-5aa0-416f-95f6-6a7c5ccad663",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamNameEdit should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s._teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
                "isRoot": false,
                "uuid": "14575311-2f44-4665-9655-c7fa165d426f",
                "parentUUID": "75ef43dc-5aa0-416f-95f6-6a7c5ccad663",
                "skipped": false
              },
              {
                "title": "should throw on set when constant value is invalid",
                "fullTitle": "Settings #teamNameEdit should throw on set when constant value is invalid",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamNameEdit.all.slice().sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,<br>        b</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> a - b;<br>    }).pop();<br>    s.teamNameEdit = ++high;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "031ea721-b271-47de-aac8-4af946039517",
                "parentUUID": "75ef43dc-5aa0-416f-95f6-6a7c5ccad663",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamNameEdit should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
                "isRoot": false,
                "uuid": "f340dafb-ddc3-4c8e-a9bf-346d49f03e5a",
                "parentUUID": "75ef43dc-5aa0-416f-95f6-6a7c5ccad663",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#maxContestants",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #maxContestants should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br>s._maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "fbdd5230-ef6f-459a-bd4c-30bd00b56e08",
                "parentUUID": "d6140793-bfa4-451b-9f3e-45655eb7baa8",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #maxContestants should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxContestants = <span class=\"hljs-number\">1</span>;<br>s.maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "422473c1-93cb-4632-a7a7-b33584b7eac2",
                "parentUUID": "d6140793-bfa4-451b-9f3e-45655eb7baa8",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "d6140793-bfa4-451b-9f3e-45655eb7baa8",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #maxContestants should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br>s._maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "fbdd5230-ef6f-459a-bd4c-30bd00b56e08",
                "parentUUID": "d6140793-bfa4-451b-9f3e-45655eb7baa8",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #maxContestants should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxContestants = <span class=\"hljs-number\">1</span>;<br>s.maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "422473c1-93cb-4632-a7a7-b33584b7eac2",
                "parentUUID": "d6140793-bfa4-451b-9f3e-45655eb7baa8",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#sessionName",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #sessionName should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s._sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
                "isRoot": false,
                "uuid": "1925e390-70f3-486c-8b6f-34e5fde536cf",
                "parentUUID": "243d9a63-2734-4930-b51e-f7af931d3f44",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #sessionName should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s.sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
                "isRoot": false,
                "uuid": "f3794a21-1c7f-4051-a831-bf34332966fb",
                "parentUUID": "243d9a63-2734-4930-b51e-f7af931d3f44",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "243d9a63-2734-4930-b51e-f7af931d3f44",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #sessionName should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s._sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
                "isRoot": false,
                "uuid": "1925e390-70f3-486c-8b6f-34e5fde536cf",
                "parentUUID": "243d9a63-2734-4930-b51e-f7af931d3f44",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #sessionName should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s.sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
                "isRoot": false,
                "uuid": "f3794a21-1c7f-4051-a831-bf34332966fb",
                "parentUUID": "243d9a63-2734-4930-b51e-f7af931d3f44",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#teamNames",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamNames should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s._teamNames.should.be.Array();<br>s._teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s._teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
                "isRoot": false,
                "uuid": "2f84af5a-0e45-4eff-87b4-bbf392291d40",
                "parentUUID": "fcb45884-6f4e-4c4d-a5ab-fc2e81d53a1c",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamNames should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s.teamNames.should.be.Array();<br>s.teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
                "isRoot": false,
                "uuid": "794cd7bf-d9b6-47d6-82fa-a3c55dff4dd8",
                "parentUUID": "fcb45884-6f4e-4c4d-a5ab-fc2e81d53a1c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/SettingsTests.js",
            "uuid": "fcb45884-6f4e-4c4d-a5ab-fc2e81d53a1c",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SettingsTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Settings #teamNames should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s._teamNames.should.be.Array();<br>s._teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s._teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
                "isRoot": false,
                "uuid": "2f84af5a-0e45-4eff-87b4-bbf392291d40",
                "parentUUID": "fcb45884-6f4e-4c4d-a5ab-fc2e81d53a1c",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Settings #teamNames should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s.teamNames.should.be.Array();<br>s.teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
                "isRoot": false,
                "uuid": "794cd7bf-d9b6-47d6-82fa-a3c55dff4dd8",
                "parentUUID": "fcb45884-6f4e-4c4d-a5ab-fc2e81d53a1c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/SettingsTests.js",
        "uuid": "1f881f27-00a8-41ec-b2cf-92e7788761dd",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/SettingsTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "TeamFactory",
        "suites": [
          {
            "title": "#create(teams, settings)",
            "suites": [],
            "tests": [
              {
                "title": "should throw when settings.maxTeams is less than 1",
                "fullTitle": "TeamFactory #create(teams, settings) should throw when settings.maxTeams is less than 1",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    teamFactory.create(tc, s);<br>}).should.throw();",
                "isRoot": false,
                "uuid": "eb1ee70e-0027-4c04-8228-5a193922ec0f",
                "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
                "skipped": false
              },
              {
                "title": "should create the correct amount of teams",
                "fullTitle": "TeamFactory #create(teams, settings) should create the correct amount of teams",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "712a0da1-4c6b-4a20-9b43-69d06af9f54f",
                "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
                "skipped": false
              },
              {
                "title": "should not fail with a large team size",
                "fullTitle": "TeamFactory #create(teams, settings) should not fail with a large team size",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">500</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">500</span>);<br><span class=\"hljs-comment\">// ensure team names are unique</span><br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> i = names.indexOf(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> n === t.teamName;<br>    });<br>    i.should.equal(-<span class=\"hljs-number\">1</span>);<br>    names.push(t.teamName);<br>});",
                "isRoot": false,
                "uuid": "f9888306-9d5b-4c4f-8157-fbdd2f2162e6",
                "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
                "skipped": false
              },
              {
                "title": "should use settings.teamNames first, before random selection",
                "fullTitle": "TeamFactory #create(teams, settings) should use settings.teamNames first, before random selection",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">10</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>, <span class=\"hljs-string\">'t3'</span>, <span class=\"hljs-string\">'t4'</span>, <span class=\"hljs-string\">'t5'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);<br>tc.all[<span class=\"hljs-number\">2</span>].teamName.should.equal(<span class=\"hljs-string\">'t3'</span>);<br>tc.all[<span class=\"hljs-number\">3</span>].teamName.should.equal(<span class=\"hljs-string\">'t4'</span>);<br>tc.all[<span class=\"hljs-number\">4</span>].teamName.should.equal(<span class=\"hljs-string\">'t5'</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">5</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">6</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">7</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">8</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">9</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "d5fff7d4-476f-44fb-8bc1-8d65b5f934df",
                "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
                "skipped": false
              },
              {
                "title": "should only create a single team when using unlimited teams",
                "fullTitle": "TeamFactory #create(teams, settings) should only create a single team when using unlimited teams",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "06765014-4e1e-469f-864e-cd7d09285ffc",
                "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamFactoryTests.js",
            "uuid": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamFactoryTests.js",
            "passes": [
              {
                "title": "should throw when settings.maxTeams is less than 1",
                "fullTitle": "TeamFactory #create(teams, settings) should throw when settings.maxTeams is less than 1",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    teamFactory.create(tc, s);<br>}).should.throw();",
                "isRoot": false,
                "uuid": "eb1ee70e-0027-4c04-8228-5a193922ec0f",
                "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
                "skipped": false
              },
              {
                "title": "should create the correct amount of teams",
                "fullTitle": "TeamFactory #create(teams, settings) should create the correct amount of teams",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "712a0da1-4c6b-4a20-9b43-69d06af9f54f",
                "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
                "skipped": false
              },
              {
                "title": "should not fail with a large team size",
                "fullTitle": "TeamFactory #create(teams, settings) should not fail with a large team size",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">500</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">500</span>);<br><span class=\"hljs-comment\">// ensure team names are unique</span><br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> i = names.indexOf(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> n === t.teamName;<br>    });<br>    i.should.equal(-<span class=\"hljs-number\">1</span>);<br>    names.push(t.teamName);<br>});",
                "isRoot": false,
                "uuid": "f9888306-9d5b-4c4f-8157-fbdd2f2162e6",
                "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
                "skipped": false
              },
              {
                "title": "should use settings.teamNames first, before random selection",
                "fullTitle": "TeamFactory #create(teams, settings) should use settings.teamNames first, before random selection",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">10</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>, <span class=\"hljs-string\">'t3'</span>, <span class=\"hljs-string\">'t4'</span>, <span class=\"hljs-string\">'t5'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);<br>tc.all[<span class=\"hljs-number\">2</span>].teamName.should.equal(<span class=\"hljs-string\">'t3'</span>);<br>tc.all[<span class=\"hljs-number\">3</span>].teamName.should.equal(<span class=\"hljs-string\">'t4'</span>);<br>tc.all[<span class=\"hljs-number\">4</span>].teamName.should.equal(<span class=\"hljs-string\">'t5'</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">5</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">6</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">7</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">8</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">9</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "d5fff7d4-476f-44fb-8bc1-8d65b5f934df",
                "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
                "skipped": false
              },
              {
                "title": "should only create a single team when using unlimited teams",
                "fullTitle": "TeamFactory #create(teams, settings) should only create a single team when using unlimited teams",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "06765014-4e1e-469f-864e-cd7d09285ffc",
                "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 30
          },
          {
            "title": "#add(teams, settings)",
            "suites": [],
            "tests": [
              {
                "title": "should add a team",
                "fullTitle": "TeamFactory #add(teams, settings) should add a team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>teamFactory.add(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "7af21cef-4c30-469c-98ce-4256736d8ad6",
                "parentUUID": "e50f969b-98ae-4baa-8dad-27be4e430deb",
                "skipped": false
              },
              {
                "title": "should reuse team names specified in settings",
                "fullTitle": "TeamFactory #add(teams, settings) should reuse team names specified in settings",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>teamFactory.add(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);",
                "isRoot": false,
                "uuid": "56755694-f809-4357-bfbf-2c9d179056d6",
                "parentUUID": "e50f969b-98ae-4baa-8dad-27be4e430deb",
                "skipped": false
              },
              {
                "title": "should factor in team names which are already in use",
                "fullTitle": "TeamFactory #add(teams, settings) should factor in team names which are already in use",
                "timedOut": false,
                "duration": 118,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    teamFactory.add(tc, s);<br>}<br>tc.all.length.should.equal(<span class=\"hljs-number\">1001</span>);<br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    names.push(t.teamName);<br>});<br><span class=\"hljs-keyword\">var</span> uniqueNames = unique(names);<br>names.length.should.equal(uniqueNames.length);",
                "isRoot": false,
                "uuid": "08df5c90-fb84-4e4a-ad71-4e3e1f73f310",
                "parentUUID": "e50f969b-98ae-4baa-8dad-27be4e430deb",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamFactoryTests.js",
            "uuid": "e50f969b-98ae-4baa-8dad-27be4e430deb",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamFactoryTests.js",
            "passes": [
              {
                "title": "should add a team",
                "fullTitle": "TeamFactory #add(teams, settings) should add a team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>teamFactory.add(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "7af21cef-4c30-469c-98ce-4256736d8ad6",
                "parentUUID": "e50f969b-98ae-4baa-8dad-27be4e430deb",
                "skipped": false
              },
              {
                "title": "should reuse team names specified in settings",
                "fullTitle": "TeamFactory #add(teams, settings) should reuse team names specified in settings",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>teamFactory.add(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);",
                "isRoot": false,
                "uuid": "56755694-f809-4357-bfbf-2c9d179056d6",
                "parentUUID": "e50f969b-98ae-4baa-8dad-27be4e430deb",
                "skipped": false
              },
              {
                "title": "should factor in team names which are already in use",
                "fullTitle": "TeamFactory #add(teams, settings) should factor in team names which are already in use",
                "timedOut": false,
                "duration": 118,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    teamFactory.add(tc, s);<br>}<br>tc.all.length.should.equal(<span class=\"hljs-number\">1001</span>);<br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    names.push(t.teamName);<br>});<br><span class=\"hljs-keyword\">var</span> uniqueNames = unique(names);<br>names.length.should.equal(uniqueNames.length);",
                "isRoot": false,
                "uuid": "08df5c90-fb84-4e4a-ad71-4e3e1f73f310",
                "parentUUID": "e50f969b-98ae-4baa-8dad-27be4e430deb",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 118
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/TeamFactoryTests.js",
        "uuid": "e410db34-4491-4b66-a4bc-42c34fa19ca2",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamFactoryTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Team",
        "suites": [
          {
            "title": "#teamName",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Team #teamName should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t._teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
                "isRoot": false,
                "uuid": "947cdd86-2d46-4751-8e58-b295388887af",
                "parentUUID": "bbf129e6-fde6-48c1-b7fa-4bd3307ed261",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #teamName should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t._teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t.teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
                "isRoot": false,
                "uuid": "97512edb-86b4-4a7b-8303-52c8f47744d1",
                "parentUUID": "bbf129e6-fde6-48c1-b7fa-4bd3307ed261",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "bbf129e6-fde6-48c1-b7fa-4bd3307ed261",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Team #teamName should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t._teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
                "isRoot": false,
                "uuid": "947cdd86-2d46-4751-8e58-b295388887af",
                "parentUUID": "bbf129e6-fde6-48c1-b7fa-4bd3307ed261",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #teamName should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t._teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t.teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
                "isRoot": false,
                "uuid": "97512edb-86b4-4a7b-8303-52c8f47744d1",
                "parentUUID": "bbf129e6-fde6-48c1-b7fa-4bd3307ed261",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#teamLeader",
            "suites": [],
            "tests": [
              {
                "title": "should set value",
                "fullTitle": "Team #teamLeader should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t.teamLeader = c;<br>t._teamLeader.should.equal(c);",
                "isRoot": false,
                "uuid": "0705405b-1acc-439b-a3b5-6c6170aa82cf",
                "parentUUID": "72db4fca-4288-41db-9dab-d63ffc2f4e85",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #teamLeader should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t._teamLeader = c;<br>t.teamLeader.should.equal(c);",
                "isRoot": false,
                "uuid": "56c2bc92-8161-471d-8447-4a0171bed49e",
                "parentUUID": "72db4fca-4288-41db-9dab-d63ffc2f4e85",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "72db4fca-4288-41db-9dab-d63ffc2f4e85",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should set value",
                "fullTitle": "Team #teamLeader should set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t.teamLeader = c;<br>t._teamLeader.should.equal(c);",
                "isRoot": false,
                "uuid": "0705405b-1acc-439b-a3b5-6c6170aa82cf",
                "parentUUID": "72db4fca-4288-41db-9dab-d63ffc2f4e85",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #teamLeader should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t._teamLeader = c;<br>t.teamLeader.should.equal(c);",
                "isRoot": false,
                "uuid": "56c2bc92-8161-471d-8447-4a0171bed49e",
                "parentUUID": "72db4fca-4288-41db-9dab-d63ffc2f4e85",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#score",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Team #score should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "a571c314-78dd-4efa-87f4-cd9979e19da8",
                "parentUUID": "39cdb8ee-63ab-4f31-b31c-943ea1231362",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #score should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br>p._score = <span class=\"hljs-number\">5</span>;<br>p.score.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "0f6adf54-0399-4676-ab3f-7561f6fdc8c0",
                "parentUUID": "39cdb8ee-63ab-4f31-b31c-943ea1231362",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "39cdb8ee-63ab-4f31-b31c-943ea1231362",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Team #score should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "a571c314-78dd-4efa-87f4-cd9979e19da8",
                "parentUUID": "39cdb8ee-63ab-4f31-b31c-943ea1231362",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #score should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br>p._score = <span class=\"hljs-number\">5</span>;<br>p.score.should.equal(<span class=\"hljs-number\">5</span>);",
                "isRoot": false,
                "uuid": "0f6adf54-0399-4676-ab3f-7561f6fdc8c0",
                "parentUUID": "39cdb8ee-63ab-4f31-b31c-943ea1231362",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#contestants",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Team #contestants should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "647c7e61-21a7-4ae8-95be-11b06eb46b5b",
                "parentUUID": "a1a6e824-06b5-4f69-b7dd-b238b30a1b9d",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #contestants should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = p.contestants;<br>c.should.be.instanceOf(Participants);",
                "isRoot": false,
                "uuid": "d2ddfaff-f365-40c2-ad6d-cab3d8323a36",
                "parentUUID": "a1a6e824-06b5-4f69-b7dd-b238b30a1b9d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "a1a6e824-06b5-4f69-b7dd-b238b30a1b9d",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Team #contestants should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
                "isRoot": false,
                "uuid": "647c7e61-21a7-4ae8-95be-11b06eb46b5b",
                "parentUUID": "a1a6e824-06b5-4f69-b7dd-b238b30a1b9d",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Team #contestants should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = p.contestants;<br>c.should.be.instanceOf(Participants);",
                "isRoot": false,
                "uuid": "d2ddfaff-f365-40c2-ad6d-cab3d8323a36",
                "parentUUID": "a1a6e824-06b5-4f69-b7dd-b238b30a1b9d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "when a contestant scores",
            "suites": [],
            "tests": [
              {
                "title": "should update the teams score",
                "fullTitle": "Team when a contestant scores should update the teams score",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br>c1.incrementScore();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.incrementScore();<br>c2.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "be094496-4b99-4893-bbaa-d50e72dd6292",
                "parentUUID": "33917cd5-2054-4f04-acc1-22af16a5736f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "33917cd5-2054-4f04-acc1-22af16a5736f",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should update the teams score",
                "fullTitle": "Team when a contestant scores should update the teams score",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br>c1.incrementScore();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.incrementScore();<br>c2.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">2</span>);",
                "isRoot": false,
                "uuid": "be094496-4b99-4893-bbaa-d50e72dd6292",
                "parentUUID": "33917cd5-2054-4f04-acc1-22af16a5736f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "tryAssignTeamLeader(contestant, hostOverride)",
            "suites": [],
            "tests": [
              {
                "title": "should allow it when no team leader is set",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should allow it when no team leader is set",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.id = <span class=\"hljs-string\">'c1'</span>;<br>t.contestants.add(c);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);",
                "isRoot": false,
                "uuid": "936324e5-7d07-42e5-b4fc-3d461989c5c0",
                "parentUUID": "af7244ab-f2ab-4f62-b06b-b11a25b4ebed",
                "skipped": false
              },
              {
                "title": "should not allow it when a team leader is set",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should not allow it when a team leader is set",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);",
                "isRoot": false,
                "uuid": "3ce760ba-f858-4eda-9927-b65eab83e680",
                "parentUUID": "af7244ab-f2ab-4f62-b06b-b11a25b4ebed",
                "skipped": false
              },
              {
                "title": "should not allow it when a contestant is not in team",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should not allow it when a contestant is not in team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_NOT_CONTESTANT);",
                "isRoot": false,
                "uuid": "6351aca0-e4b2-498b-9f1e-1d07b25d2ff0",
                "parentUUID": "af7244ab-f2ab-4f62-b06b-b11a25b4ebed",
                "skipped": false
              },
              {
                "title": "should allow it when a team leader is set and host override is flagged",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should allow it when a team leader is set and host override is flagged",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">true</span>);<br>r.should.be.true();<br>should.not.exist(m);",
                "isRoot": false,
                "uuid": "ee930d48-bcde-4d37-93d3-74b5fefae2f6",
                "parentUUID": "af7244ab-f2ab-4f62-b06b-b11a25b4ebed",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "af7244ab-f2ab-4f62-b06b-b11a25b4ebed",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should allow it when no team leader is set",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should allow it when no team leader is set",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.id = <span class=\"hljs-string\">'c1'</span>;<br>t.contestants.add(c);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);",
                "isRoot": false,
                "uuid": "936324e5-7d07-42e5-b4fc-3d461989c5c0",
                "parentUUID": "af7244ab-f2ab-4f62-b06b-b11a25b4ebed",
                "skipped": false
              },
              {
                "title": "should not allow it when a team leader is set",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should not allow it when a team leader is set",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);",
                "isRoot": false,
                "uuid": "3ce760ba-f858-4eda-9927-b65eab83e680",
                "parentUUID": "af7244ab-f2ab-4f62-b06b-b11a25b4ebed",
                "skipped": false
              },
              {
                "title": "should not allow it when a contestant is not in team",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should not allow it when a contestant is not in team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_NOT_CONTESTANT);",
                "isRoot": false,
                "uuid": "6351aca0-e4b2-498b-9f1e-1d07b25d2ff0",
                "parentUUID": "af7244ab-f2ab-4f62-b06b-b11a25b4ebed",
                "skipped": false
              },
              {
                "title": "should allow it when a team leader is set and host override is flagged",
                "fullTitle": "Team tryAssignTeamLeader(contestant, hostOverride) should allow it when a team leader is set and host override is flagged",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">true</span>);<br>r.should.be.true();<br>should.not.exist(m);",
                "isRoot": false,
                "uuid": "ee930d48-bcde-4d37-93d3-74b5fefae2f6",
                "parentUUID": "af7244ab-f2ab-4f62-b06b-b11a25b4ebed",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "tryChangeTeamName(teamName, settings, hostOverride)",
            "suites": [
              {
                "title": "when host override",
                "suites": [],
                "tests": [
                  {
                    "title": "should change name when request is valid",
                    "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) when host override should change name when request is valid",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                    "isRoot": false,
                    "uuid": "0df4ad15-3f80-4819-9233-44cedc636b75",
                    "parentUUID": "a841d216-4a4e-4a1b-9fb2-6b407191b06e",
                    "skipped": false
                  },
                  {
                    "title": "should change name when setting do not allow it",
                    "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) when host override should change name when setting do not allow it",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                    "isRoot": false,
                    "uuid": "855df071-4a74-45b0-ae26-e63ff8e7e2ea",
                    "parentUUID": "a841d216-4a4e-4a1b-9fb2-6b407191b06e",
                    "skipped": false
                  },
                  {
                    "title": "should change name when name contains profanity",
                    "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) when host override should change name when name contains profanity",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                    "isRoot": false,
                    "uuid": "522b7ce2-f99a-4dde-8762-f565e7ad5277",
                    "parentUUID": "a841d216-4a4e-4a1b-9fb2-6b407191b06e",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/TeamTests.js",
                "uuid": "a841d216-4a4e-4a1b-9fb2-6b407191b06e",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
                "passes": [
                  {
                    "title": "should change name when request is valid",
                    "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) when host override should change name when request is valid",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                    "isRoot": false,
                    "uuid": "0df4ad15-3f80-4819-9233-44cedc636b75",
                    "parentUUID": "a841d216-4a4e-4a1b-9fb2-6b407191b06e",
                    "skipped": false
                  },
                  {
                    "title": "should change name when setting do not allow it",
                    "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) when host override should change name when setting do not allow it",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                    "isRoot": false,
                    "uuid": "855df071-4a74-45b0-ae26-e63ff8e7e2ea",
                    "parentUUID": "a841d216-4a4e-4a1b-9fb2-6b407191b06e",
                    "skipped": false
                  },
                  {
                    "title": "should change name when name contains profanity",
                    "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) when host override should change name when name contains profanity",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                    "isRoot": false,
                    "uuid": "522b7ce2-f99a-4dde-8762-f565e7ad5277",
                    "parentUUID": "a841d216-4a4e-4a1b-9fb2-6b407191b06e",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              }
            ],
            "tests": [
              {
                "title": "should change name when request is valid",
                "fullTitle": "Team tryChangeTeamName(teamName, settings, hostOverride) should change name when request is valid",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                "isRoot": false,
                "uuid": "79e151ff-3f5d-4ef5-b025-d68676f5490b",
                "parentUUID": "dcb3537d-c975-46a4-9904-3d0905322b97",
                "skipped": false
              },
              {
                "title": "should not change name when setting do not allow it",
                "fullTitle": "Team tryChangeTeamName(teamName, settings, hostOverride) should not change name when setting do not allow it",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>r.should.be.false();",
                "isRoot": false,
                "uuid": "e22483e0-8f54-4fee-8f2f-576c3b3ada09",
                "parentUUID": "dcb3537d-c975-46a4-9904-3d0905322b97",
                "skipped": false
              },
              {
                "title": "should not change name when name contains profanity",
                "fullTitle": "Team tryChangeTeamName(teamName, settings, hostOverride) should not change name when name contains profanity",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>r.should.be.false();",
                "isRoot": false,
                "uuid": "84f9bbb8-a6f4-4503-a33c-0809f4aaa88a",
                "parentUUID": "dcb3537d-c975-46a4-9904-3d0905322b97",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "dcb3537d-c975-46a4-9904-3d0905322b97",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should change name when request is valid",
                "fullTitle": "Team tryChangeTeamName(teamName, settings, hostOverride) should change name when request is valid",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>should.not.exist(em);<br>r.should.be.true();",
                "isRoot": false,
                "uuid": "79e151ff-3f5d-4ef5-b025-d68676f5490b",
                "parentUUID": "dcb3537d-c975-46a4-9904-3d0905322b97",
                "skipped": false
              },
              {
                "title": "should not change name when setting do not allow it",
                "fullTitle": "Team tryChangeTeamName(teamName, settings, hostOverride) should not change name when setting do not allow it",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>r.should.be.false();",
                "isRoot": false,
                "uuid": "e22483e0-8f54-4fee-8f2f-576c3b3ada09",
                "parentUUID": "dcb3537d-c975-46a4-9904-3d0905322b97",
                "skipped": false
              },
              {
                "title": "should not change name when name contains profanity",
                "fullTitle": "Team tryChangeTeamName(teamName, settings, hostOverride) should not change name when name contains profanity",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>r.should.be.false();",
                "isRoot": false,
                "uuid": "84f9bbb8-a6f4-4503-a33c-0809f4aaa88a",
                "parentUUID": "dcb3537d-c975-46a4-9904-3d0905322b97",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "getContestantByUsername(username)",
            "suites": [],
            "tests": [
              {
                "title": "should get contestant when contest with username exists",
                "fullTitle": "Team getContestantByUsername(username) should get contestant when contest with username exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(c1.username);<br>c.should.equal(c1);<br>c = t.getContestantByUsername(<span class=\"hljs-string\">'c1abc'</span>);<br>c.should.equal(c1);",
                "isRoot": false,
                "uuid": "53c675ed-83c7-45a1-99d4-761ff74a3a03",
                "parentUUID": "72668379-771c-43c3-a909-3aa5f7712d50",
                "skipped": false
              },
              {
                "title": "should not get contestant when contest with username does not exist",
                "fullTitle": "Team getContestantByUsername(username) should not get contestant when contest with username does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(<span class=\"hljs-string\">'John Doe'</span>);<br>should(c).be.null();",
                "isRoot": false,
                "uuid": "0ad57395-8731-4bbd-89c5-62881e01fc14",
                "parentUUID": "72668379-771c-43c3-a909-3aa5f7712d50",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamTests.js",
            "uuid": "72668379-771c-43c3-a909-3aa5f7712d50",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
            "passes": [
              {
                "title": "should get contestant when contest with username exists",
                "fullTitle": "Team getContestantByUsername(username) should get contestant when contest with username exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(c1.username);<br>c.should.equal(c1);<br>c = t.getContestantByUsername(<span class=\"hljs-string\">'c1abc'</span>);<br>c.should.equal(c1);",
                "isRoot": false,
                "uuid": "53c675ed-83c7-45a1-99d4-761ff74a3a03",
                "parentUUID": "72668379-771c-43c3-a909-3aa5f7712d50",
                "skipped": false
              },
              {
                "title": "should not get contestant when contest with username does not exist",
                "fullTitle": "Team getContestantByUsername(username) should not get contestant when contest with username does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(<span class=\"hljs-string\">'John Doe'</span>);<br>should(c).be.null();",
                "isRoot": false,
                "uuid": "0ad57395-8731-4bbd-89c5-62881e01fc14",
                "parentUUID": "72668379-771c-43c3-a909-3aa5f7712d50",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/TeamTests.js",
        "uuid": "e6acaf06-aa79-481c-b986-c7c13a00e499",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Teams",
        "suites": [
          {
            "title": "#contains(teamName)",
            "suites": [],
            "tests": [
              {
                "title": "should return true when team with teamName does exist",
                "fullTitle": "Teams #contains(teamName) should return true when team with teamName does exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(t.teamName).should.be.true();",
                "isRoot": false,
                "uuid": "70f24e36-014f-429e-a1e3-c5917023e8fd",
                "parentUUID": "4fb41ba3-bc75-4e52-b4da-ec7bafbbc2ce",
                "skipped": false
              },
              {
                "title": "should return false when no team with teamName does exist",
                "fullTitle": "Teams #contains(teamName) should return false when no team with teamName does exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(<span class=\"hljs-string\">'other team name'</span>).should.be.false();",
                "isRoot": false,
                "uuid": "38135676-2599-4708-95e5-157db6e031e5",
                "parentUUID": "4fb41ba3-bc75-4e52-b4da-ec7bafbbc2ce",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "4fb41ba3-bc75-4e52-b4da-ec7bafbbc2ce",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should return true when team with teamName does exist",
                "fullTitle": "Teams #contains(teamName) should return true when team with teamName does exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(t.teamName).should.be.true();",
                "isRoot": false,
                "uuid": "70f24e36-014f-429e-a1e3-c5917023e8fd",
                "parentUUID": "4fb41ba3-bc75-4e52-b4da-ec7bafbbc2ce",
                "skipped": false
              },
              {
                "title": "should return false when no team with teamName does exist",
                "fullTitle": "Teams #contains(teamName) should return false when no team with teamName does exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(<span class=\"hljs-string\">'other team name'</span>).should.be.false();",
                "isRoot": false,
                "uuid": "38135676-2599-4708-95e5-157db6e031e5",
                "parentUUID": "4fb41ba3-bc75-4e52-b4da-ec7bafbbc2ce",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#all",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Teams #all should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.all = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "1917c9a3-7187-4bce-a27c-495fd1405c1a",
                "parentUUID": "ed21b3ce-7c65-4f6b-8bce-33f2c643d7da",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Teams #all should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
                "isRoot": false,
                "uuid": "9ff04152-96eb-413a-aa4d-905fe7180de4",
                "parentUUID": "ed21b3ce-7c65-4f6b-8bce-33f2c643d7da",
                "skipped": false
              },
              {
                "title": "should get copy of val and not reference",
                "fullTitle": "Teams #all should get copy of val and not reference",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all.pop();<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
                "isRoot": false,
                "uuid": "652dcdea-1175-4bd9-bc85-261d74625043",
                "parentUUID": "ed21b3ce-7c65-4f6b-8bce-33f2c643d7da",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "ed21b3ce-7c65-4f6b-8bce-33f2c643d7da",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Teams #all should throw on set value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.all = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "1917c9a3-7187-4bce-a27c-495fd1405c1a",
                "parentUUID": "ed21b3ce-7c65-4f6b-8bce-33f2c643d7da",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Teams #all should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
                "isRoot": false,
                "uuid": "9ff04152-96eb-413a-aa4d-905fe7180de4",
                "parentUUID": "ed21b3ce-7c65-4f6b-8bce-33f2c643d7da",
                "skipped": false
              },
              {
                "title": "should get copy of val and not reference",
                "fullTitle": "Teams #all should get copy of val and not reference",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all.pop();<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
                "isRoot": false,
                "uuid": "652dcdea-1175-4bd9-bc85-261d74625043",
                "parentUUID": "ed21b3ce-7c65-4f6b-8bce-33f2c643d7da",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#length",
            "suites": [],
            "tests": [
              {
                "title": "should throw on set value",
                "fullTitle": "Teams #length should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.length = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "e94aff7f-e752-4049-b114-1ee12d48b7e0",
                "parentUUID": "2857f0df-712b-4a7b-b60b-2b1cb17e430f",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Teams #length should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "c6408ff5-3365-49cd-b5a8-48b7a1a23a2e",
                "parentUUID": "2857f0df-712b-4a7b-b60b-2b1cb17e430f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "2857f0df-712b-4a7b-b60b-2b1cb17e430f",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should throw on set value",
                "fullTitle": "Teams #length should throw on set value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.length = [];<br>}).should.throw();",
                "isRoot": false,
                "uuid": "e94aff7f-e752-4049-b114-1ee12d48b7e0",
                "parentUUID": "2857f0df-712b-4a7b-b60b-2b1cb17e430f",
                "skipped": false
              },
              {
                "title": "should get value",
                "fullTitle": "Teams #length should get value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "c6408ff5-3365-49cd-b5a8-48b7a1a23a2e",
                "parentUUID": "2857f0df-712b-4a7b-b60b-2b1cb17e430f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#add(team)",
            "suites": [],
            "tests": [
              {
                "title": "should add the given team",
                "fullTitle": "Teams #add(team) should add the given team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
                "isRoot": false,
                "uuid": "c1b14c2b-4a29-4e2a-bc55-68b8c0caa323",
                "parentUUID": "831c28b2-a738-417d-aa2a-f5b3a2a79298",
                "skipped": false
              },
              {
                "title": "should error if team with teamName already exists",
                "fullTitle": "Teams #add(team) should error if team with teamName already exists",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.add(t);<br>}).should.throw();",
                "isRoot": false,
                "uuid": "8c0a9957-801d-431e-a19d-89deeac1dd48",
                "parentUUID": "831c28b2-a738-417d-aa2a-f5b3a2a79298",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "831c28b2-a738-417d-aa2a-f5b3a2a79298",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should add the given team",
                "fullTitle": "Teams #add(team) should add the given team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
                "isRoot": false,
                "uuid": "c1b14c2b-4a29-4e2a-bc55-68b8c0caa323",
                "parentUUID": "831c28b2-a738-417d-aa2a-f5b3a2a79298",
                "skipped": false
              },
              {
                "title": "should error if team with teamName already exists",
                "fullTitle": "Teams #add(team) should error if team with teamName already exists",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.add(t);<br>}).should.throw();",
                "isRoot": false,
                "uuid": "8c0a9957-801d-431e-a19d-89deeac1dd48",
                "parentUUID": "831c28b2-a738-417d-aa2a-f5b3a2a79298",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#remove(team)",
            "suites": [],
            "tests": [
              {
                "title": "should remove the existing team",
                "fullTitle": "Teams #remove(team) should remove the existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "7d25e4f5-39ee-46f8-882c-57a34a8460d5",
                "parentUUID": "cb85281e-0f5a-4178-96f6-1795c2b00f26",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing team",
                "fullTitle": "Teams #remove(team) should not remove the non-existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t1).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "3ee04000-5763-4048-b7fc-1878718c04e1",
                "parentUUID": "cb85281e-0f5a-4178-96f6-1795c2b00f26",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "cb85281e-0f5a-4178-96f6-1795c2b00f26",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should remove the existing team",
                "fullTitle": "Teams #remove(team) should remove the existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "7d25e4f5-39ee-46f8-882c-57a34a8460d5",
                "parentUUID": "cb85281e-0f5a-4178-96f6-1795c2b00f26",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing team",
                "fullTitle": "Teams #remove(team) should not remove the non-existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t1).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "3ee04000-5763-4048-b7fc-1878718c04e1",
                "parentUUID": "cb85281e-0f5a-4178-96f6-1795c2b00f26",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#removeByTeamName(team)",
            "suites": [],
            "tests": [
              {
                "title": "should remove the existing team",
                "fullTitle": "Teams #removeByTeamName(team) should remove the existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t.teamName).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "edd43707-9016-4925-bd30-d5b9f1e71c8a",
                "parentUUID": "211f5b44-a401-42a9-bd59-9a0374f1dc02",
                "skipped": false
              },
              {
                "title": "should ignore team name case",
                "fullTitle": "Teams #removeByTeamName(team) should ignore team name case",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'abc1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(<span class=\"hljs-string\">'ABC1'</span>).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "ebb4e9fc-f444-4d6f-bdc5-d126ff388d23",
                "parentUUID": "211f5b44-a401-42a9-bd59-9a0374f1dc02",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing team",
                "fullTitle": "Teams #removeByTeamName(team) should not remove the non-existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t1.teamName).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "b86a8652-e123-472e-b5c4-05ffaf314663",
                "parentUUID": "211f5b44-a401-42a9-bd59-9a0374f1dc02",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "211f5b44-a401-42a9-bd59-9a0374f1dc02",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should remove the existing team",
                "fullTitle": "Teams #removeByTeamName(team) should remove the existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t.teamName).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "edd43707-9016-4925-bd30-d5b9f1e71c8a",
                "parentUUID": "211f5b44-a401-42a9-bd59-9a0374f1dc02",
                "skipped": false
              },
              {
                "title": "should ignore team name case",
                "fullTitle": "Teams #removeByTeamName(team) should ignore team name case",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'abc1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(<span class=\"hljs-string\">'ABC1'</span>).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
                "isRoot": false,
                "uuid": "ebb4e9fc-f444-4d6f-bdc5-d126ff388d23",
                "parentUUID": "211f5b44-a401-42a9-bd59-9a0374f1dc02",
                "skipped": false
              },
              {
                "title": "should not remove the non-existing team",
                "fullTitle": "Teams #removeByTeamName(team) should not remove the non-existing team",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t1.teamName).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "b86a8652-e123-472e-b5c4-05ffaf314663",
                "parentUUID": "211f5b44-a401-42a9-bd59-9a0374f1dc02",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName)",
            "suites": [
              {
                "title": "when teams are full",
                "suites": [],
                "tests": [
                  {
                    "title": "should return a valid response",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teams are full should return a valid response",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);",
                    "isRoot": false,
                    "uuid": "82ebf1ae-75c2-4b61-ab96-7009e5b0426e",
                    "parentUUID": "5d942ab2-c907-42af-8f8c-08ca41f7779a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/TeamsTests.js",
                "uuid": "5d942ab2-c907-42af-8f8c-08ca41f7779a",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
                "passes": [
                  {
                    "title": "should return a valid response",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teams are full should return a valid response",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);",
                    "isRoot": false,
                    "uuid": "82ebf1ae-75c2-4b61-ab96-7009e5b0426e",
                    "parentUUID": "5d942ab2-c907-42af-8f8c-08ca41f7779a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "when teamLeader selection is PLAYER_CHOICE",
                "suites": [],
                "tests": [
                  {
                    "title": "should inquire for team leader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is PLAYER_CHOICE should inquire for team leader",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> inquired = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    inquired = <span class=\"hljs-literal\">true</span>;<br>});<br>r.should.be.true();<br>inquired.should.be.true();",
                    "isRoot": false,
                    "uuid": "8bd02066-c546-4cb1-93d1-9e3ce865dace",
                    "parentUUID": "9f146894-a549-4984-90ab-c5212213e9a8",
                    "skipped": false
                  },
                  {
                    "title": "should not inquire for team leader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is PLAYER_CHOICE should not inquire for team leader",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>tc.all[<span class=\"hljs-number\">0</span>].teamLeader = c1;<br><span class=\"hljs-keyword\">var</span> didNotInquire = <span class=\"hljs-literal\">true</span>;<br>tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    didNotInquire = <span class=\"hljs-literal\">false</span>;<br>});<br>didNotInquire.should.be.true();<br>t.teamLeader.should.equal(c1);",
                    "isRoot": false,
                    "uuid": "8efbf0ef-f0c4-4c19-97ef-1b68cf4541f6",
                    "parentUUID": "9f146894-a549-4984-90ab-c5212213e9a8",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant as teamLeader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is PLAYER_CHOICE should not add contestant as teamLeader",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should(t.teamLeader).be.null();",
                    "isRoot": false,
                    "uuid": "11f2d5f7-632a-4423-b653-a8bdd88520fb",
                    "parentUUID": "9f146894-a549-4984-90ab-c5212213e9a8",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/TeamsTests.js",
                "uuid": "9f146894-a549-4984-90ab-c5212213e9a8",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
                "passes": [
                  {
                    "title": "should inquire for team leader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is PLAYER_CHOICE should inquire for team leader",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> inquired = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    inquired = <span class=\"hljs-literal\">true</span>;<br>});<br>r.should.be.true();<br>inquired.should.be.true();",
                    "isRoot": false,
                    "uuid": "8bd02066-c546-4cb1-93d1-9e3ce865dace",
                    "parentUUID": "9f146894-a549-4984-90ab-c5212213e9a8",
                    "skipped": false
                  },
                  {
                    "title": "should not inquire for team leader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is PLAYER_CHOICE should not inquire for team leader",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>tc.all[<span class=\"hljs-number\">0</span>].teamLeader = c1;<br><span class=\"hljs-keyword\">var</span> didNotInquire = <span class=\"hljs-literal\">true</span>;<br>tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    didNotInquire = <span class=\"hljs-literal\">false</span>;<br>});<br>didNotInquire.should.be.true();<br>t.teamLeader.should.equal(c1);",
                    "isRoot": false,
                    "uuid": "8efbf0ef-f0c4-4c19-97ef-1b68cf4541f6",
                    "parentUUID": "9f146894-a549-4984-90ab-c5212213e9a8",
                    "skipped": false
                  },
                  {
                    "title": "should not add contestant as teamLeader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is PLAYER_CHOICE should not add contestant as teamLeader",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should(t.teamLeader).be.null();",
                    "isRoot": false,
                    "uuid": "11f2d5f7-632a-4423-b653-a8bdd88520fb",
                    "parentUUID": "9f146894-a549-4984-90ab-c5212213e9a8",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              },
              {
                "title": "when teamLeader selection is RANDOM",
                "suites": [],
                "tests": [
                  {
                    "title": "should not inquire for team leader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is RANDOM should not inquire for team leader",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> notInquired = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    notInquired = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>r.should.be.true();<br>notInquired.should.be.true();",
                    "isRoot": false,
                    "uuid": "22ea512f-aee5-4380-abdb-aaa059f6af55",
                    "parentUUID": "fc92b54a-d4c6-4c70-9eed-a7af6969965b",
                    "skipped": false
                  },
                  {
                    "title": "should automatically add team leader when team is filled",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is RANDOM should automatically add team leader when team is filled",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).not.be.null();<br>});",
                    "isRoot": false,
                    "uuid": "1688a426-8496-410f-b3d0-7d3886227302",
                    "parentUUID": "fc92b54a-d4c6-4c70-9eed-a7af6969965b",
                    "skipped": false
                  },
                  {
                    "title": "should not automatically add team leader when team is not filled",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is RANDOM should not automatically add team leader when team is not filled",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).be.null();<br>});",
                    "isRoot": false,
                    "uuid": "bb18a338-2ed1-4d61-99ae-9cb0d54da575",
                    "parentUUID": "fc92b54a-d4c6-4c70-9eed-a7af6969965b",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/TeamsTests.js",
                "uuid": "fc92b54a-d4c6-4c70-9eed-a7af6969965b",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
                "passes": [
                  {
                    "title": "should not inquire for team leader",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is RANDOM should not inquire for team leader",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> notInquired = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    notInquired = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>r.should.be.true();<br>notInquired.should.be.true();",
                    "isRoot": false,
                    "uuid": "22ea512f-aee5-4380-abdb-aaa059f6af55",
                    "parentUUID": "fc92b54a-d4c6-4c70-9eed-a7af6969965b",
                    "skipped": false
                  },
                  {
                    "title": "should automatically add team leader when team is filled",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is RANDOM should automatically add team leader when team is filled",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).not.be.null();<br>});",
                    "isRoot": false,
                    "uuid": "1688a426-8496-410f-b3d0-7d3886227302",
                    "parentUUID": "fc92b54a-d4c6-4c70-9eed-a7af6969965b",
                    "skipped": false
                  },
                  {
                    "title": "should not automatically add team leader when team is not filled",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when teamLeader selection is RANDOM should not automatically add team leader when team is not filled",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).be.null();<br>});",
                    "isRoot": false,
                    "uuid": "bb18a338-2ed1-4d61-99ae-9cb0d54da575",
                    "parentUUID": "fc92b54a-d4c6-4c70-9eed-a7af6969965b",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              },
              {
                "title": "when set to use unlimited teams",
                "suites": [],
                "tests": [
                  {
                    "title": "should add team when teams are full",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when set to use unlimited teams should add team when teams are full",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
                    "isRoot": false,
                    "uuid": "a29eaabc-071b-4104-a2d6-9bce62069689",
                    "parentUUID": "7ea42ccd-f70e-4a95-872f-cc928d6420bc",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/TeamsTests.js",
                "uuid": "7ea42ccd-f70e-4a95-872f-cc928d6420bc",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
                "passes": [
                  {
                    "title": "should add team when teams are full",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when set to use unlimited teams should add team when teams are full",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
                    "isRoot": false,
                    "uuid": "a29eaabc-071b-4104-a2d6-9bce62069689",
                    "parentUUID": "7ea42ccd-f70e-4a95-872f-cc928d6420bc",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              },
              {
                "title": "when team selection method is PLAYER_CHOICE",
                "suites": [],
                "tests": [
                  {
                    "title": "should throw when no team name is given",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when team selection method is PLAYER_CHOICE should throw when no team name is given",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>}).should.throw();",
                    "isRoot": false,
                    "uuid": "d4ab06d6-b118-4b54-b7e6-edbdc21e7a92",
                    "parentUUID": "982d9c29-7ba9-415f-af11-6f2b6e1eadf8",
                    "skipped": false
                  },
                  {
                    "title": "should add contestant to correct team",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when team selection method is PLAYER_CHOICE should add contestant to correct team",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "4d31aad5-5b18-495a-a923-c781a229eb12",
                    "parentUUID": "982d9c29-7ba9-415f-af11-6f2b6e1eadf8",
                    "skipped": false
                  },
                  {
                    "title": "should not add to full team",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when team selection method is PLAYER_CHOICE should not add to full team",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "ec35edf8-3251-4763-a51c-8c26c8ea91d5",
                    "parentUUID": "982d9c29-7ba9-415f-af11-6f2b6e1eadf8",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/tests/BDD/lib/TeamsTests.js",
                "uuid": "982d9c29-7ba9-415f-af11-6f2b6e1eadf8",
                "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
                "passes": [
                  {
                    "title": "should throw when no team name is given",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when team selection method is PLAYER_CHOICE should throw when no team name is given",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>}).should.throw();",
                    "isRoot": false,
                    "uuid": "d4ab06d6-b118-4b54-b7e6-edbdc21e7a92",
                    "parentUUID": "982d9c29-7ba9-415f-af11-6f2b6e1eadf8",
                    "skipped": false
                  },
                  {
                    "title": "should add contestant to correct team",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when team selection method is PLAYER_CHOICE should add contestant to correct team",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "4d31aad5-5b18-495a-a923-c781a229eb12",
                    "parentUUID": "982d9c29-7ba9-415f-af11-6f2b6e1eadf8",
                    "skipped": false
                  },
                  {
                    "title": "should not add to full team",
                    "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) when team selection method is PLAYER_CHOICE should not add to full team",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
                    "isRoot": false,
                    "uuid": "ec35edf8-3251-4763-a51c-8c26c8ea91d5",
                    "parentUUID": "982d9c29-7ba9-415f-af11-6f2b6e1eadf8",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              }
            ],
            "tests": [
              {
                "title": "should give contestant an id",
                "fullTitle": "Teams addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) should give contestant an id",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Username'</span>;<br>should(c.id).be.null();<br>tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>should(c.id).not.be.null();",
                "isRoot": false,
                "uuid": "c7390ab6-a445-419f-9dc0-88a989df4739",
                "parentUUID": "a84f581b-8b23-436f-a030-ace45e4c4e60",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "a84f581b-8b23-436f-a030-ace45e4c4e60",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should give contestant an id",
                "fullTitle": "Teams addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) should give contestant an id",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Username'</span>;<br>should(c.id).be.null();<br>tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>should(c.id).not.be.null();",
                "isRoot": false,
                "uuid": "c7390ab6-a445-419f-9dc0-88a989df4739",
                "parentUUID": "a84f581b-8b23-436f-a030-ace45e4c4e60",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "getByContestant(contestant)",
            "suites": [],
            "tests": [
              {
                "title": "should get team of contestant",
                "fullTitle": "Teams getByContestant(contestant) should get team of contestant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">5</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>    r.should.be.true();<br>});<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">4</span>]);<br>t.should.not.be.null();<br>t.contestants.getById(cc[<span class=\"hljs-number\">4</span>].id).should.equal(cc[<span class=\"hljs-number\">4</span>]);",
                "isRoot": false,
                "uuid": "878a7521-b784-49e6-ba22-fcbbdd7ed755",
                "parentUUID": "c4e64ff7-42ea-4d24-af8f-af488cee6781",
                "skipped": false
              },
              {
                "title": "should not get team of contestant",
                "fullTitle": "Teams getByContestant(contestant) should not get team of contestant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">1</span>);<br>cc[<span class=\"hljs-number\">0</span>].id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">0</span>]);<br>should(t).be.null();",
                "isRoot": false,
                "uuid": "b462f697-5593-4a2f-b68e-00bf83de4341",
                "parentUUID": "c4e64ff7-42ea-4d24-af8f-af488cee6781",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "c4e64ff7-42ea-4d24-af8f-af488cee6781",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should get team of contestant",
                "fullTitle": "Teams getByContestant(contestant) should get team of contestant",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">5</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>    r.should.be.true();<br>});<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">4</span>]);<br>t.should.not.be.null();<br>t.contestants.getById(cc[<span class=\"hljs-number\">4</span>].id).should.equal(cc[<span class=\"hljs-number\">4</span>]);",
                "isRoot": false,
                "uuid": "878a7521-b784-49e6-ba22-fcbbdd7ed755",
                "parentUUID": "c4e64ff7-42ea-4d24-af8f-af488cee6781",
                "skipped": false
              },
              {
                "title": "should not get team of contestant",
                "fullTitle": "Teams getByContestant(contestant) should not get team of contestant",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">1</span>);<br>cc[<span class=\"hljs-number\">0</span>].id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">0</span>]);<br>should(t).be.null();",
                "isRoot": false,
                "uuid": "b462f697-5593-4a2f-b68e-00bf83de4341",
                "parentUUID": "c4e64ff7-42ea-4d24-af8f-af488cee6781",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "getByTeamName(temName)",
            "suites": [],
            "tests": [
              {
                "title": "should get team when team with name exists",
                "fullTitle": "Teams getByTeamName(temName) should get team when team with name exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t1 = tc.all[<span class=\"hljs-number\">0</span>];<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(t1.teamName);<br>t.should.equal(t1);",
                "isRoot": false,
                "uuid": "3dddb838-8a3c-4964-9956-c6b52386aa6f",
                "parentUUID": "88772f2f-5c74-4119-af9b-546eb1d70e85",
                "skipped": false
              },
              {
                "title": "should not get team when team with name does not exist",
                "fullTitle": "Teams getByTeamName(temName) should not get team when team with name does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(<span class=\"hljs-string\">'Not a team name that exists'</span>);<br>should(t).be.null();",
                "isRoot": false,
                "uuid": "08a07428-eaa5-4708-a95f-88cf0dfcd0e9",
                "parentUUID": "88772f2f-5c74-4119-af9b-546eb1d70e85",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "88772f2f-5c74-4119-af9b-546eb1d70e85",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should get team when team with name exists",
                "fullTitle": "Teams getByTeamName(temName) should get team when team with name exists",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t1 = tc.all[<span class=\"hljs-number\">0</span>];<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(t1.teamName);<br>t.should.equal(t1);",
                "isRoot": false,
                "uuid": "3dddb838-8a3c-4964-9956-c6b52386aa6f",
                "parentUUID": "88772f2f-5c74-4119-af9b-546eb1d70e85",
                "skipped": false
              },
              {
                "title": "should not get team when team with name does not exist",
                "fullTitle": "Teams getByTeamName(temName) should not get team when team with name does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(<span class=\"hljs-string\">'Not a team name that exists'</span>);<br>should(t).be.null();",
                "isRoot": false,
                "uuid": "08a07428-eaa5-4708-a95f-88cf0dfcd0e9",
                "parentUUID": "88772f2f-5c74-4119-af9b-546eb1d70e85",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "getAvailable(settings)",
            "suites": [],
            "tests": [
              {
                "title": "should not return full teams",
                "fullTitle": "Teams getAvailable(settings) should not return full teams",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">2</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "0f831a7b-96fc-4cb2-93ba-cf05f0a9d2af",
                "parentUUID": "c784e08f-53ab-4d4a-8413-d3fbe61baead",
                "skipped": false
              },
              {
                "title": "should return teams with space",
                "fullTitle": "Teams getAvailable(settings) should return teams with space",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
                "isRoot": false,
                "uuid": "357f65d5-62f7-4c1a-bb95-cd6a3d9c7634",
                "parentUUID": "c784e08f-53ab-4d4a-8413-d3fbe61baead",
                "skipped": false
              },
              {
                "title": "should return teams with unlimited space",
                "fullTitle": "Teams getAvailable(settings) should return teams with unlimited space",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = constants.UNLIMITED;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
                "isRoot": false,
                "uuid": "5af2d83f-f7b7-4547-8a0e-7f5eebcb7da3",
                "parentUUID": "c784e08f-53ab-4d4a-8413-d3fbe61baead",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/BDD/lib/TeamsTests.js",
            "uuid": "c784e08f-53ab-4d4a-8413-d3fbe61baead",
            "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
            "passes": [
              {
                "title": "should not return full teams",
                "fullTitle": "Teams getAvailable(settings) should not return full teams",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">2</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "0f831a7b-96fc-4cb2-93ba-cf05f0a9d2af",
                "parentUUID": "c784e08f-53ab-4d4a-8413-d3fbe61baead",
                "skipped": false
              },
              {
                "title": "should return teams with space",
                "fullTitle": "Teams getAvailable(settings) should return teams with space",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
                "isRoot": false,
                "uuid": "357f65d5-62f7-4c1a-bb95-cd6a3d9c7634",
                "parentUUID": "c784e08f-53ab-4d4a-8413-d3fbe61baead",
                "skipped": false
              },
              {
                "title": "should return teams with unlimited space",
                "fullTitle": "Teams getAvailable(settings) should return teams with unlimited space",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = constants.UNLIMITED;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
                "isRoot": false,
                "uuid": "5af2d83f-f7b7-4547-8a0e-7f5eebcb7da3",
                "parentUUID": "c784e08f-53ab-4d4a-8413-d3fbe61baead",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/BDD/lib/TeamsTests.js",
        "uuid": "30a12e34-e28b-4a02-9b70-972d07c7c3ff",
        "fullFile": "/Users/clarkd/Documents/Development/javascript/buzzer.click/tests/BDD/lib/TeamsTests.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "c57224cc-748d-477c-95a6-6097652cef61",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should throw on set value",
      "fullTitle": "#wasSuccessful should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.wasSuccessful = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "dce0c4ea-b19a-4497-981a-9aa72cf4a6c1",
      "parentUUID": "f74ddc0d-31aa-4f66-9207-d4cf4f1123fd",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#wasSuccessful should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._wasSuccessful = <span class=\"hljs-literal\">true</span>;<br>r.wasSuccessful.should.be.true();",
      "isRoot": false,
      "uuid": "af45fe55-f752-4a42-92ba-13d62c29afb7",
      "parentUUID": "f74ddc0d-31aa-4f66-9207-d4cf4f1123fd",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#enquireForTeamLeaderPosition should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r._enquireForTeamLeaderPosition.should.be.true();",
      "isRoot": false,
      "uuid": "7ab9323d-0a26-42ff-86e6-5ba0d2cd118f",
      "parentUUID": "2f5788cc-9e58-41c8-815f-27aa8e7b16f9",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#enquireForTeamLeaderPosition should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r.enquireForTeamLeaderPosition.should.be.true();",
      "isRoot": false,
      "uuid": "60e9688e-cbf1-4e60-8396-b07d75a36ae6",
      "parentUUID": "2f5788cc-9e58-41c8-815f-27aa8e7b16f9",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#errorMessage should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.errorMessage = <span class=\"hljs-string\">'test'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "ecf3641a-46e4-4f6f-99a2-868db67d519b",
      "parentUUID": "260659d4-c137-46d7-b6bc-4c4a36de0f90",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#errorMessage should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._errorMessage = <span class=\"hljs-string\">'errorMessage_test'</span>;<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'errorMessage_test'</span>);",
      "isRoot": false,
      "uuid": "412bdb95-4a08-4092-94cf-2a7bc8934dc0",
      "parentUUID": "260659d4-c137-46d7-b6bc-4c4a36de0f90",
      "skipped": false
    },
    {
      "title": "should change the state to not successful",
      "fullTitle": "#setNotSuccessful(errorMessage) should change the state to not successful",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.setNotSuccessful(<span class=\"hljs-string\">'Test error message'</span>);<br>r.wasSuccessful.should.be.false();<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'Test error message'</span>);",
      "isRoot": false,
      "uuid": "7629cf2b-ace1-4b3e-852d-8edad4541f4c",
      "parentUUID": "44bb2a5b-3274-49a8-9706-bfe7b61f1bb5",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#username should set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'username_test'</span>;<br>c._username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
      "isRoot": false,
      "uuid": "250282f3-6412-4522-a0be-144dc8d69cf0",
      "parentUUID": "c7be32a1-351e-4736-9676-c25c081d47ad",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#username should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._username = <span class=\"hljs-string\">'username_test'</span>;<br>c.username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
      "isRoot": false,
      "uuid": "4fe1b9f3-a017-431f-b6e3-f10755b03c24",
      "parentUUID": "c7be32a1-351e-4736-9676-c25c081d47ad",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#score should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    c.score = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "f69fd7b3-a92e-4f80-8f88-a98a1c6f8827",
      "parentUUID": "2aa2d7d4-9e08-41cc-b305-573cd2c90ad5",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#score should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._score = <span class=\"hljs-number\">1</span>;<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "8d95230c-dc52-4194-8f94-fb456eb28321",
      "parentUUID": "2aa2d7d4-9e08-41cc-b305-573cd2c90ad5",
      "skipped": false
    },
    {
      "title": "should increment the contestant's score",
      "fullTitle": "#incrementScore() should increment the contestant's score",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.incrementScore();<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "1d838211-1626-4942-8bd2-3013f3d0a219",
      "parentUUID": "ab0bcf7b-8b8a-457c-bf23-e02b6290f7fb",
      "skipped": false
    },
    {
      "title": "should emit scoreUpdate event",
      "fullTitle": "#incrementScore() should emit scoreUpdate event",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.on(<span class=\"hljs-string\">'scoreUpdate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    done();<br>});<br>c.incrementScore();",
      "isRoot": false,
      "uuid": "880c2f75-aa25-410c-bb3d-e74ed7754334",
      "parentUUID": "ab0bcf7b-8b8a-457c-bf23-e02b6290f7fb",
      "skipped": false
    },
    {
      "title": "should return a non-null non-empty key",
      "fullTitle": "#generateSessionId() should return a non-null non-empty key",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.generateSessionId().should.not.be.equal(<span class=\"hljs-string\">''</span>).and.not.be.equal(<span class=\"hljs-literal\">null</span>);",
      "isRoot": false,
      "uuid": "bd322478-eaac-41f4-bcb2-4330fe1b0fe1",
      "parentUUID": "da694a0b-4de4-46f4-afbb-4e3a06e85ebf",
      "skipped": false
    },
    {
      "title": "should return a id of the correct length",
      "fullTitle": "#generateSessionId() should return a id of the correct length",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.generateSessionId()<br>    .length.should.be.Number().and.equal(idUtility.keyLength);",
      "isRoot": false,
      "uuid": "fac1d518-d98c-41d3-9e99-143db0451d64",
      "parentUUID": "da694a0b-4de4-46f4-afbb-4e3a06e85ebf",
      "skipped": false
    },
    {
      "title": "should record id so it cannot be reused.",
      "fullTitle": "#generateSessionId() should record id so it cannot be reused.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> id = idUtility.generateSessionId();<br>idUtility._sessionKeysInUse.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cachedId</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> cachedId === id;<br>}).should.equal(id);",
      "isRoot": false,
      "uuid": "a2be7b8f-3d72-45ec-92ca-3169a61ed042",
      "parentUUID": "da694a0b-4de4-46f4-afbb-4e3a06e85ebf",
      "skipped": false
    },
    {
      "title": "should return a UUID",
      "fullTitle": "#generateParticipantId() should return a UUID",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.generateParticipantId()<br>    .should.match(<span class=\"hljs-regexp\">/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i</span>);",
      "isRoot": false,
      "uuid": "67ba4dcb-e307-43b3-8c48-945c4d502b64",
      "parentUUID": "51501f2e-a08d-4ddf-856a-86496a6f222d",
      "skipped": false
    },
    {
      "title": "should store the ids to stop reuse",
      "fullTitle": "#registerSessionIdsInUse(ids) should store the ids to stop reuse",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.length.should.be.aboveOrEqual(<span class=\"hljs-number\">2</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "2ebf5a4a-139e-4fe8-b2da-55be7f11269b",
      "parentUUID": "441a1892-65e4-4d8c-9a40-728a7437f1c0",
      "skipped": false
    },
    {
      "title": "should return a UUID",
      "fullTitle": "#releaseSessionId(id) should return a UUID",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility.releaseSessionId(<span class=\"hljs-string\">'111AAA'</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.equal(-<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "ac202c74-d7d2-47b6-8f4b-eab0cda5a27b",
      "parentUUID": "8a4669a7-1fba-43da-8905-4c350d2e2017",
      "skipped": false
    },
    {
      "title": "should return false when not referenced",
      "fullTitle": "#isInstanceAndTypeOf() should return false when not referenced",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf().should.be.false();",
      "isRoot": false,
      "uuid": "69eaaa78-5ffb-41bb-8734-1513df73d21e",
      "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
      "skipped": false
    },
    {
      "title": "should return false when null",
      "fullTitle": "#isInstanceAndTypeOf() should return false when null",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">''</span>).should.be.false();",
      "isRoot": false,
      "uuid": "beba0726-3fd1-4efd-9bd5-0c0931579fad",
      "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
      "skipped": false
    },
    {
      "title": "should return false when not the correct type",
      "fullTitle": "#isInstanceAndTypeOf() should return false when not the correct type",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-string\">''</span>, <span class=\"hljs-string\">'Int'</span>).should.be.false();",
      "isRoot": false,
      "uuid": "bd88cc8f-32e5-4af9-8876-04cd1a333baf",
      "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
      "skipped": false
    },
    {
      "title": "should return true when is a built-in type",
      "fullTitle": "#isInstanceAndTypeOf() should return true when is a built-in type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'Number'</span>).should.be.true();",
      "isRoot": false,
      "uuid": "11705336-ffb0-48fa-9756-77681268ba40",
      "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
      "skipped": false
    },
    {
      "title": "should return true when is user defined type",
      "fullTitle": "#isInstanceAndTypeOf() should return true when is user defined type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-keyword\">new</span> UserDefinedType(),<br>    UserDefinedType).should.be.true();",
      "isRoot": false,
      "uuid": "405dea7d-48bb-46a9-b368-8b08b125d90a",
      "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#id should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'id_test'</span>;<br>p._id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "d6541852-0f6b-45e9-85b7-ed62ea5f6edc",
      "parentUUID": "8bcb4853-f7c1-4938-889b-789e37f393fd",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#id should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "1cbb17b3-ab19-4938-8773-048da0e1f494",
      "parentUUID": "8bcb4853-f7c1-4938-889b-789e37f393fd",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#isDisconnected should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    p.isDisconnected = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "9f2ef2b5-e0b4-4838-bf8b-6bf1464f5175",
      "parentUUID": "0a3922fb-8af2-4426-a364-dbdda37cf1d1",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#isDisconnected should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "d25c4533-e417-473f-a419-83759670b9a7",
      "parentUUID": "0a3922fb-8af2-4426-a364-dbdda37cf1d1",
      "skipped": false
    },
    {
      "title": "should change participant state to disconnected",
      "fullTitle": "#disconnect() should change participant state to disconnected",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">false</span>;<br>p.disconnect();<br>p.isDisconnected.should.be.true();",
      "isRoot": false,
      "uuid": "06ad7b66-8dba-48b7-b9a8-0751b7265e81",
      "parentUUID": "911f0b2d-8fd9-40ab-9e50-50c00fbd104b",
      "skipped": false
    },
    {
      "title": "should change participant state to connected",
      "fullTitle": "#reconnect() should change participant state to connected",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">true</span>;<br>p.reconnect();<br>p.isDisconnected.should.be.false();",
      "isRoot": false,
      "uuid": "2246372f-3273-4391-8c48-3effd2c5cd14",
      "parentUUID": "d05f420b-650c-4752-95a8-3fec0159940b",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#all should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.all = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "f8576ff1-dd00-4255-a300-eef4b0ce8ee5",
      "parentUUID": "fdbfa351-fc4f-47e2-bc8b-a27cb6e726f4",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#all should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
      "isRoot": false,
      "uuid": "a0866e79-a07a-4fe0-b6d0-f8f87c8ea33d",
      "parentUUID": "fdbfa351-fc4f-47e2-bc8b-a27cb6e726f4",
      "skipped": false
    },
    {
      "title": "should get copy of val and not reference",
      "fullTitle": "#all should get copy of val and not reference",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all.pop();<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
      "isRoot": false,
      "uuid": "da9588aa-0b2b-458d-a1c5-e645693efde2",
      "parentUUID": "fdbfa351-fc4f-47e2-bc8b-a27cb6e726f4",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#length should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.length = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "cbc2a335-598e-4793-8a73-3cda0f7eda77",
      "parentUUID": "24b3832d-0f0b-4d44-a51e-50cd857860d7",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#length should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "ba78044d-9944-4682-b4ba-3096650db587",
      "parentUUID": "24b3832d-0f0b-4d44-a51e-50cd857860d7",
      "skipped": false
    },
    {
      "title": "should return true when id does exist",
      "fullTitle": "#contains(id) should return true when id does exist",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(p.id).should.be.true();",
      "isRoot": false,
      "uuid": "a09c225b-9095-4329-a9c8-29adbd9ec6ad",
      "parentUUID": "f3edd53d-91ff-47da-9b3a-05af9c78eaa3",
      "skipped": false
    },
    {
      "title": "should return false when id does not exist",
      "fullTitle": "#contains(id) should return false when id does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(<span class=\"hljs-string\">'p2'</span>).should.be.false();",
      "isRoot": false,
      "uuid": "6cfbc48f-f667-4e3c-809f-fc0d778afff9",
      "parentUUID": "f3edd53d-91ff-47da-9b3a-05af9c78eaa3",
      "skipped": false
    },
    {
      "title": "should add the given participant",
      "fullTitle": "#add(participant) should add the given participant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc._participants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc._participants[<span class=\"hljs-number\">0</span>].should.equal(p);",
      "isRoot": false,
      "uuid": "c1a7977c-1a09-45b8-aed4-9d6ad327f845",
      "parentUUID": "866b53a2-681a-4795-a5f4-269824218164",
      "skipped": false
    },
    {
      "title": "should error if participant with id already exists",
      "fullTitle": "#add(participant) should error if participant with id already exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.add(p);<br>}).should.throw();",
      "isRoot": false,
      "uuid": "d4506e74-7f3d-4c04-bd64-7acd6de8cf62",
      "parentUUID": "866b53a2-681a-4795-a5f4-269824218164",
      "skipped": false
    },
    {
      "title": "should emit add event",
      "fullTitle": "#add(participant) should emit add event",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.on(<span class=\"hljs-string\">'add'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">participant</span>) </span>{<br>    participant.should.equal(p);<br>    done();<br>});<br>pc.add(p);",
      "isRoot": false,
      "uuid": "70d1fb62-4355-4da9-b4a9-3477d21602c2",
      "parentUUID": "866b53a2-681a-4795-a5f4-269824218164",
      "skipped": false
    },
    {
      "title": "should remove the existing participant",
      "fullTitle": "#remove(participant) should remove the existing participant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "bcfca60d-eff8-4a71-b711-5d3d428e0f64",
      "parentUUID": "4eb6750d-1da8-4f79-bdac-bc43240716bd",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing participant",
      "fullTitle": "#remove(participant) should not remove the non-existing participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p1).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "70b2d67d-8ec0-4a60-8093-a1fd240f0406",
      "parentUUID": "4eb6750d-1da8-4f79-bdac-bc43240716bd",
      "skipped": false
    },
    {
      "title": "should remove the existing participant",
      "fullTitle": "#removeById(id) should remove the existing participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p.id).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "e07ab294-7549-4d8a-9666-3e103a3fed46",
      "parentUUID": "78b90355-f7fe-4790-947c-5e79745448e5",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing participant",
      "fullTitle": "#removeById(id) should not remove the non-existing participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p1.id).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "7873cbd1-b2c0-458f-9152-415b445c4ab2",
      "parentUUID": "78b90355-f7fe-4790-947c-5e79745448e5",
      "skipped": false
    },
    {
      "title": "should create teams",
      "fullTitle": "#constructor should create teams",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "be4e44d9-0fea-43b4-b9a8-60fdc72062ae",
      "parentUUID": "80705461-3b58-4ad9-b010-4844d2420045",
      "skipped": false
    },
    {
      "title": "should not create teams",
      "fullTitle": "#constructor should not create teams",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>should(s.teams).be.null();",
      "isRoot": false,
      "uuid": "bd709758-4531-4ac6-98b2-41fd40bbb5e1",
      "parentUUID": "80705461-3b58-4ad9-b010-4844d2420045",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#id should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.id = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "1ba8885b-200c-4e5d-8ff2-b2bb738397c4",
      "parentUUID": "4a706c7b-fb3d-4c7a-b593-10e274883cdb",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#id should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "911eda34-4338-4ef0-9abb-ee557ee36dc4",
      "parentUUID": "4a706c7b-fb3d-4c7a-b593-10e274883cdb",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#roundsPlayed should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundsPlayed = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "eeccb605-34e8-4285-8e92-1005f80c7127",
      "parentUUID": "e2d7a4f2-9543-48cb-b8d6-6478d2153138",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#roundsPlayed should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "0549b534-c1af-469a-b959-59953fb1fca8",
      "parentUUID": "e2d7a4f2-9543-48cb-b8d6-6478d2153138",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#previousWinners should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.previousWinners = [<span class=\"hljs-string\">'SomeWinner'</span>];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "662d86b3-3f32-42f8-8769-2c9279f524a2",
      "parentUUID": "bf8b1094-71b6-43fd-af63-c86c4b7db0d9",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#previousWinners should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._previousWinners = [<span class=\"hljs-string\">'Winner1'</span>, <span class=\"hljs-string\">'Winner2'</span>];<br>s.previousWinners.should.be.Array();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
      "isRoot": false,
      "uuid": "c548374e-3007-4aee-8b6a-2f42af221431",
      "parentUUID": "bf8b1094-71b6-43fd-af63-c86c4b7db0d9",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#roundWinner should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundWinner = <span class=\"hljs-string\">'SomeWinner'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "d6ccf49f-25f0-4bda-9cde-a1a2a8387514",
      "parentUUID": "82816cca-e0a7-483c-8cfe-ac9503a93c31",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#roundWinner should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundWinner = <span class=\"hljs-string\">'Winner1'</span>;<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
      "isRoot": false,
      "uuid": "76460e89-a83e-4415-afee-740373d42e5c",
      "parentUUID": "82816cca-e0a7-483c-8cfe-ac9503a93c31",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#observers should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.observers = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "d281f29e-d3e7-432e-ac0a-b4f7552b510c",
      "parentUUID": "b2531c83-2487-4a84-842a-db549a7f2fe4",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#observers should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.observers.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.observers[<span class=\"hljs-number\">0</span>].should.equal(observer);",
      "isRoot": false,
      "uuid": "f5ef9d71-f88a-4320-9ca8-b6ee6d76f326",
      "parentUUID": "b2531c83-2487-4a84-842a-db549a7f2fe4",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#contestants should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.contestants = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "d0a3b772-547a-4746-82d6-686c74e7538a",
      "parentUUID": "96006e5e-be43-41e2-b233-bec809784477",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#contestants should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.contestants[<span class=\"hljs-number\">0</span>].should.equal(contestant);",
      "isRoot": false,
      "uuid": "b88d075e-ae0c-4630-8665-8da36cadf0fe",
      "parentUUID": "96006e5e-be43-41e2-b233-bec809784477",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#host should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.host = host;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "ceb3f4fe-7a30-4477-ba79-acf5d9d1d43d",
      "parentUUID": "1a385f1e-df7c-4815-b0f5-49361dd4fa77",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#host should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.host.should.equal(host);",
      "isRoot": false,
      "uuid": "4c817893-f3ea-489c-9263-dd8cc76d90dd",
      "parentUUID": "1a385f1e-df7c-4815-b0f5-49361dd4fa77",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#currentState should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
      "isRoot": false,
      "uuid": "cbb7e756-4f82-480b-b32b-32c93c8ea1c9",
      "parentUUID": "1d522940-e5e3-4fe1-babf-3996682494ae",
      "skipped": false
    },
    {
      "title": "should increment rounds played",
      "fullTitle": "#incrementRoundsPlayed() should increment rounds played",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.incrementRoundsPlayed();<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "0404e92a-5858-4272-9bea-4acc7fb0a179",
      "parentUUID": "3cb1ef5e-73b3-4da7-a6ac-a096d8601c2e",
      "skipped": false
    },
    {
      "title": "should not allow a contestant username with bad words",
      "fullTitle": "#addContestant(contestant) should not allow a contestant username with bad words",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Penis #YOLO'</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_CONTAINS_PROFANITY);",
      "isRoot": false,
      "uuid": "895f13b8-0431-44c3-adb2-8227adfc3424",
      "parentUUID": "c096e9e3-918e-4725-a8bb-15d7331ef950",
      "skipped": false
    },
    {
      "title": "should not allow when username is empty",
      "fullTitle": "#addContestant(contestant) should not allow when username is empty",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">' '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_IS_REQUIRED);",
      "isRoot": false,
      "uuid": "9e70c6aa-545a-4841-8fff-55e4637426eb",
      "parentUUID": "c096e9e3-918e-4725-a8bb-15d7331ef950",
      "skipped": false
    },
    {
      "title": "should trim username",
      "fullTitle": "#addContestant(contestant) should trim username",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Wade  '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>c.username.should.equal(<span class=\"hljs-string\">'Wade'</span>);",
      "isRoot": false,
      "uuid": "b6937122-d1c9-439c-9bb9-c2f8eb6fc939",
      "parentUUID": "c096e9e3-918e-4725-a8bb-15d7331ef950",
      "skipped": false
    },
    {
      "title": "should add contestant when session is not full",
      "fullTitle": "when in individual mode should add contestant when session is not full",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
      "isRoot": false,
      "uuid": "a35f0be3-d254-4073-8a0b-49dd56af9684",
      "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
      "skipped": false
    },
    {
      "title": "should not add contestant when session is full",
      "fullTitle": "when in individual mode should not add contestant when session is full",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br>s.addContestant(c2);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();",
      "isRoot": false,
      "uuid": "2589997b-ac26-4ea9-9921-a8b0235ebcdd",
      "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
      "skipped": false
    },
    {
      "title": "should not add contestant when username is already taken",
      "fullTitle": "when in individual mode should not add contestant when username is already taken",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
      "isRoot": false,
      "uuid": "59437e23-bd1b-4829-9276-dffef9b19123",
      "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
      "skipped": false
    },
    {
      "title": "BUG# username case should not matter",
      "fullTitle": "when in individual mode BUG# username case should not matter",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'abc1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'ABC1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
      "isRoot": false,
      "uuid": "eb69dc72-c17e-4993-9815-4e3232315318",
      "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
      "skipped": false
    },
    {
      "title": "should allow unlimited contestants when max is set to constants.UNLIMITED",
      "fullTitle": "when in individual mode should allow unlimited contestants when max is set to constants.UNLIMITED",
      "timedOut": false,
      "duration": 561,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = constants.UNLIMITED;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>    c.username = <span class=\"hljs-string\">'c'</span> + i;<br>    <span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>    response.wasSuccessful.should.be.true();<br>}",
      "isRoot": false,
      "uuid": "0e3afffb-1717-4bb1-8584-05909402736c",
      "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
      "skipped": false
    },
    {
      "title": "should add contestant when teams is not full",
      "fullTitle": "when in team mode should add contestant when teams is not full",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
      "isRoot": false,
      "uuid": "32152dbf-0bc0-41b2-9404-3d2cf0124d08",
      "parentUUID": "80839e57-70af-45c3-9595-3bef74fa3ad0",
      "skipped": false
    },
    {
      "title": "should not add contestant when teams are full",
      "fullTitle": "when in team mode should not add contestant when teams are full",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.TEAMS_ARE_FULL);",
      "isRoot": false,
      "uuid": "b0cf84a6-f0aa-423c-84ea-b07612802ea1",
      "parentUUID": "80839e57-70af-45c3-9595-3bef74fa3ad0",
      "skipped": false
    },
    {
      "title": "should not add contestant when username is already taken",
      "fullTitle": "when in team mode should not add contestant when username is already taken",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
      "isRoot": false,
      "uuid": "49a06026-7117-4cec-a8a6-f41e0986d1a1",
      "parentUUID": "80839e57-70af-45c3-9595-3bef74fa3ad0",
      "skipped": false
    },
    {
      "title": "should subscribe callback to the correct event",
      "fullTitle": "#subscribeForStateChange(event, callback) should subscribe callback to the correct event",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> r = s.addContestant(c);<br>r.wasSuccessful.should.be.true();<br>s.subscribeForStateChange(<span class=\"hljs-string\">'onpending'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">session, event, from, to</span>) </span>{<br>    session.should.equal(s);<br>    event.should.equal(<span class=\"hljs-string\">'buzzerPressed'</span>);<br>    from.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>    to.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>    done();<br>});<br>s.tryBuzzerPressRegister(c.id).should.be.true();",
      "isRoot": false,
      "uuid": "b6173337-bc21-47e3-9bae-e3c923127abb",
      "parentUUID": "f4583c9f-e613-4399-a9af-b815ceff16bb",
      "skipped": false
    },
    {
      "title": "should register when state is ready",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should register when state is ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);",
      "isRoot": false,
      "uuid": "e12c96e9-f5d2-4a6e-80da-0bc0c1e57714",
      "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
      "skipped": false
    },
    {
      "title": "should not register when state is not ready",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not register when state is not ready",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.false();",
      "isRoot": false,
      "uuid": "3e158989-e8fd-4522-a470-fef65f82a913",
      "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
      "skipped": false
    },
    {
      "title": "should not register when contestant does not exist",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not register when contestant does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(idUtility.generateParticipantId()).should.be.false();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
      "isRoot": false,
      "uuid": "71d18f20-84f5-4c69-b826-e8507f2caf92",
      "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
      "skipped": false
    },
    {
      "title": "should not replace previous round winner with pending contestant",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not replace previous round winner with pending contestant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "680d187d-17d9-4fba-8290-746bd0055fa0",
      "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
      "skipped": false
    },
    {
      "title": "should not add previous round winner to winners list",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not add previous round winner to winners list",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "499156a2-cd8f-4cb3-ad2b-8d8a25536505",
      "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->ACCEPT should allow when game state is pending",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();",
      "isRoot": false,
      "uuid": "8d2e3226-4f47-4871-9244-b1bc9bd7b15b",
      "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
      "skipped": false
    },
    {
      "title": "should not allow when game state is not pending",
      "fullTitle": "action->ACCEPT should not allow when game state is not pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.false();",
      "isRoot": false,
      "uuid": "4de7f222-a89f-4a85-b5c9-2bac39b33168",
      "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
      "skipped": false
    },
    {
      "title": "should update contestant's score",
      "fullTitle": "action->ACCEPT should update contestant's score",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "d2cfe2be-e37d-4c61-a359-856275046606",
      "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
      "skipped": false
    },
    {
      "title": "should update contestant's team score",
      "fullTitle": "action->ACCEPT should update contestant's team score",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>s.teams.all[<span class=\"hljs-number\">0</span>].score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "10e06e35-f6c6-4e41-a3f3-4c638d6535f2",
      "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
      "skipped": false
    },
    {
      "title": "should add previous round winner to winners list",
      "fullTitle": "action->ACCEPT should add previous round winner to winners list",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "23524295-b274-45e2-9a10-94129414461e",
      "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
      "skipped": false
    },
    {
      "title": "should change game state back to ready",
      "fullTitle": "action->ACCEPT should change game state back to ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "b3d7242a-04e0-438a-a7e8-73705392cd2b",
      "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
      "skipped": false
    },
    {
      "title": "should clear pending winner",
      "fullTitle": "action->ACCEPT should clear pending winner",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>should(s.pendingWinner).be.null();",
      "isRoot": false,
      "uuid": "8d30664b-0106-4ff1-8575-f82d1bf81e76",
      "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->REJECT should allow when game state is pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();",
      "isRoot": false,
      "uuid": "64a9bb32-48b3-4f9f-88f3-719947833984",
      "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
      "skipped": false
    },
    {
      "title": "should not allow when game state is not pending",
      "fullTitle": "action->REJECT should not allow when game state is not pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.false();",
      "isRoot": false,
      "uuid": "d0adebd6-8c9a-4495-b643-2ca9cddd163b",
      "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
      "skipped": false
    },
    {
      "title": "should not replace round winner with pending contestant",
      "fullTitle": "action->REJECT should not replace round winner with pending contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "07be9949-1799-42d5-a80f-7bb591ee1c9e",
      "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
      "skipped": false
    },
    {
      "title": "should not update pending contestant's score",
      "fullTitle": "action->REJECT should not update pending contestant's score",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.score.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "2109784a-6ec6-4d35-9995-b9038cfc88c3",
      "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
      "skipped": false
    },
    {
      "title": "should add round winner to previous winners list",
      "fullTitle": "action->REJECT should add round winner to previous winners list",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "e0ae797b-aea1-44c0-be07-eebe69700035",
      "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
      "skipped": false
    },
    {
      "title": "should change game state back to ready",
      "fullTitle": "action->REJECT should change game state back to ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "6dad9ed0-aab0-449b-9f7b-d5f08b427914",
      "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
      "skipped": false
    },
    {
      "title": "should allow when game state is ready",
      "fullTitle": "action->RESET should allow when game state is ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
      "isRoot": false,
      "uuid": "9f34f13b-471d-4067-b436-ba4685e05570",
      "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->RESET should allow when game state is pending",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
      "isRoot": false,
      "uuid": "e398ca8b-172e-4e22-9cd1-9dbb5d7fae3b",
      "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
      "skipped": false
    },
    {
      "title": "should not replace previous round winner with pending contestant",
      "fullTitle": "action->RESET should not replace previous round winner with pending contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "29ff8798-0625-4672-ac05-d43ae8fc8d6f",
      "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
      "skipped": false
    },
    {
      "title": "should add previous round winner to winners list",
      "fullTitle": "action->RESET should add previous round winner to winners list",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "68a02c5d-c474-49e7-bae8-6fae08234cce",
      "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
      "skipped": false
    },
    {
      "title": "should change game state back to ready",
      "fullTitle": "action->RESET should change game state back to ready",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "ebfdd059-c581-42d7-8b30-c7e89a7eb739",
      "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
      "skipped": false
    },
    {
      "title": "should allow when game state is ready",
      "fullTitle": "action->DISABLE should allow when game state is ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
      "isRoot": false,
      "uuid": "0476db69-cd2a-40dd-858d-958c42831b0a",
      "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->DISABLE should allow when game state is pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
      "isRoot": false,
      "uuid": "9bbcf948-b9c2-46f1-bcd9-eb0a13e5402c",
      "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
      "skipped": false
    },
    {
      "title": "should not replace previous round winner with pending contestant",
      "fullTitle": "action->DISABLE should not replace previous round winner with pending contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "51f3c9b0-cc94-4b28-af51-60100fcd7f06",
      "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
      "skipped": false
    },
    {
      "title": "should add previous round winner to winners list",
      "fullTitle": "action->DISABLE should add previous round winner to winners list",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "ce54c1f2-f63f-40ba-977f-eeb93e360354",
      "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
      "skipped": false
    },
    {
      "title": "should change game state to buzzerLock",
      "fullTitle": "action->DISABLE should change game state to buzzerLock",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.BUZZER_LOCK);",
      "isRoot": false,
      "uuid": "134f7c68-1770-4eb7-ad38-d623a6ec6a41",
      "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
      "skipped": false
    },
    {
      "title": "should allow when game state is buzzerLock",
      "fullTitle": "action->ENABLE should allow when game state is buzzerLock",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();",
      "isRoot": false,
      "uuid": "5544dc39-cabb-4e27-ab9e-ab1f3bd17961",
      "parentUUID": "c81a0878-4615-4254-abae-de14193b35f2",
      "skipped": false
    },
    {
      "title": "should not allow when game state is not buzzerLock",
      "fullTitle": "action->ENABLE should not allow when game state is not buzzerLock",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.false();",
      "isRoot": false,
      "uuid": "53fe0bef-93ca-419e-9cdb-cd4e1e12a40b",
      "parentUUID": "c81a0878-4615-4254-abae-de14193b35f2",
      "skipped": false
    },
    {
      "title": "should change game state to ready",
      "fullTitle": "action->ENABLE should change game state to ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "9a899d9a-2274-4d8c-a930-b7999fb70d34",
      "parentUUID": "c81a0878-4615-4254-abae-de14193b35f2",
      "skipped": false
    },
    {
      "title": "should return the pending winner",
      "fullTitle": "#pendingWinner should return the pending winner",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.pendingWinner.should.equal(<span class=\"hljs-string\">'testUser'</span>);",
      "isRoot": false,
      "uuid": "7a47e2fd-d649-461f-8936-d683a68641f5",
      "parentUUID": "58979f2a-9a7e-48ef-a2e2-790295c8e849",
      "skipped": false
    },
    {
      "title": "should not return the pending winner",
      "fullTitle": "#pendingWinner should not return the pending winner",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>should(s.pendingWinner).be.null();",
      "isRoot": false,
      "uuid": "88418d58-a346-4049-ac47-92e76b700aaf",
      "parentUUID": "58979f2a-9a7e-48ef-a2e2-790295c8e849",
      "skipped": false
    },
    {
      "title": "should update session name",
      "fullTitle": "#updateSessionName(name) should update session name",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.updateSessionName(<span class=\"hljs-string\">'session2'</span>);<br>settings.sessionName.should.equal(<span class=\"hljs-string\">'session2'</span>);",
      "isRoot": false,
      "uuid": "64d56b66-fd20-4c64-8123-85e56304fee4",
      "parentUUID": "81df9373-1625-4bb3-a867-3b0fc59e47c3",
      "skipped": false
    },
    {
      "title": "should update max contestants",
      "fullTitle": "#updateMaxContestants(maxContestants) should update max contestants",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "c20e6983-365a-4253-ae2d-a36167906163",
      "parentUUID": "bc4dfd09-aea7-4fb9-a8a3-44934e164133",
      "skipped": false
    },
    {
      "title": "should not allow below current connected amount",
      "fullTitle": "#updateMaxContestants(maxContestants) should not allow below current connected amount",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>s.addContestant(c1).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>s.addContestant(c2).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">1</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_CONTESTANTS_MUST_BE_GREATER_THAN_ALREADY_CONNECTED);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "53c1922f-71d1-4b44-ad7a-f35540b4cc4e",
      "parentUUID": "bc4dfd09-aea7-4fb9-a8a3-44934e164133",
      "skipped": false
    },
    {
      "title": "should update team size",
      "fullTitle": "#updateTeamSize(teamSize) should update team size",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.teamSize.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "33f45bd4-87c6-47a7-a1ad-f1ea1d4966de",
      "parentUUID": "18844933-31ba-4130-89e7-61500a668d55",
      "skipped": false
    },
    {
      "title": "should not allow below current setting",
      "fullTitle": "#updateTeamSize(teamSize) should not allow below current setting",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.TEAM_SIZE_MUST_BE_GREATER_THAN_ALREADY_SET);",
      "isRoot": false,
      "uuid": "f7023b38-7188-40eb-9f82-913276551e2b",
      "parentUUID": "18844933-31ba-4130-89e7-61500a668d55",
      "skipped": false
    },
    {
      "title": "should update max teams",
      "fullTitle": "#updateMaxTeams(maxTeams) should update max teams",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxTeams.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "379a35e2-c238-4a26-99fd-0d7558da6698",
      "parentUUID": "06034981-0511-4bc1-bfb6-6532f69a57c1",
      "skipped": false
    },
    {
      "title": "should add teams",
      "fullTitle": "#updateMaxTeams(maxTeams) should add teams",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">5</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "0faac27d-6ee3-4189-a59b-6bc2490036ae",
      "parentUUID": "06034981-0511-4bc1-bfb6-6532f69a57c1",
      "skipped": false
    },
    {
      "title": "should not allow below current setting",
      "fullTitle": "#updateMaxTeams(maxTeams) should not allow below current setting",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_MUST_BE_GREATER_THAN_ALREADY_SET);",
      "isRoot": false,
      "uuid": "ddfc0b10-cd4b-455c-9932-55d0b99274f6",
      "parentUUID": "06034981-0511-4bc1-bfb6-6532f69a57c1",
      "skipped": false
    },
    {
      "title": "should not allow if teams are PLAYER_CHOICE",
      "fullTitle": "#updateMaxTeams(maxTeams) should not allow if teams are PLAYER_CHOICE",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">6</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_CANNOT_BE_CHANGED_WHEN_PLAYER_CHOICE);",
      "isRoot": false,
      "uuid": "39de5250-7b56-482e-a50f-7e59e387954b",
      "parentUUID": "06034981-0511-4bc1-bfb6-6532f69a57c1",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#all should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    sc.all = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "c18dcacf-ce4c-4669-b366-3ef5f1d62e2a",
      "parentUUID": "58edba13-c4a9-49a9-b7d0-3ded8dad5819",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#all should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
      "isRoot": false,
      "uuid": "1001841a-4d47-45c6-8ed5-ebe4afcaec7c",
      "parentUUID": "58edba13-c4a9-49a9-b7d0-3ded8dad5819",
      "skipped": false
    },
    {
      "title": "should get copy of val and not reference",
      "fullTitle": "#all should get copy of val and not reference",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all.pop();<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
      "isRoot": false,
      "uuid": "566a152d-07b7-4540-9e66-515b91327265",
      "parentUUID": "58edba13-c4a9-49a9-b7d0-3ded8dad5819",
      "skipped": false
    },
    {
      "title": "add and return session",
      "fullTitle": "#add(host, settings) add and return session",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-keyword\">var</span> ses = sc.add(h, s);<br>ses.should.be.instanceof(Session);",
      "isRoot": false,
      "uuid": "48753cfc-0204-49b7-8d12-0267bd6ab5e8",
      "parentUUID": "29837c6f-77a9-4ea4-b38a-190b2f9381e2",
      "skipped": false
    },
    {
      "title": "when given valid id should return session",
      "fullTitle": "#getById(id) when given valid id should return session",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-comment\">/* eslint-disable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses1 = sc.add(h, s);<br><span class=\"hljs-comment\">/* eslint-enable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses2 = sc.add(h, s);<br><span class=\"hljs-keyword\">var</span> sessionLocate = sc.getById(ses2.id);<br>sessionLocate.should.be.instanceof(Session)<br>    .and.equal(ses2);",
      "isRoot": false,
      "uuid": "2f535ff5-2dff-47e9-9e6a-4e530f448249",
      "parentUUID": "8cd01a6a-f5f2-4fd8-8e99-ff11bf1291c7",
      "skipped": false
    },
    {
      "title": "should remove complete sc",
      "fullTitle": "#purgeCompleted() should remove complete sc",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.all[<span class=\"hljs-number\">0</span>].complete();<br>sc.all[<span class=\"hljs-number\">1</span>].complete();<br>sc.purgeCompleted();<br>sc.all.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "6ec9503f-3cc1-411b-a97e-d06900a6e8f9",
      "parentUUID": "7ca47d67-f130-48ce-ba8f-ee134b3fe4b9",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#hasTeams should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s._hasTeams.should.be.true();",
      "isRoot": false,
      "uuid": "b5f4de07-e04a-4521-b487-e98fb19ff373",
      "parentUUID": "dca5d607-45b1-4f15-8936-d08172958893",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#hasTeams should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.hasTeams.should.be.true();",
      "isRoot": false,
      "uuid": "c0783e39-16b6-4a3d-b7fa-5608a7ad1f62",
      "parentUUID": "dca5d607-45b1-4f15-8936-d08172958893",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamSize should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s._teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "dc0fc973-b3f7-44b7-b8a5-ebf379577e8c",
      "parentUUID": "2f1c8671-387e-46d8-a738-bff92cc60d59",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamSize should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "898cd6f1-435b-44ec-a834-c2b2f9d91833",
      "parentUUID": "2f1c8671-387e-46d8-a738-bff92cc60d59",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#maxTeams should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s._maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "7151ac1d-2877-48e8-991f-602aab907453",
      "parentUUID": "1742aecf-f305-46a2-a322-a66b7cf8b586",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#maxTeams should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxTeams = <span class=\"hljs-number\">1</span>;<br>s.maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "83476e14-d317-4568-9e71-d182901213d6",
      "parentUUID": "1742aecf-f305-46a2-a322-a66b7cf8b586",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamLeaderSelectionMethod should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s._teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
      "isRoot": false,
      "uuid": "6637ae31-5cef-4ca9-91a0-0bfa8f5eb525",
      "parentUUID": "3d8ea888-2908-4e2a-b7bf-300aba6eee02",
      "skipped": false
    },
    {
      "title": "should throw on set when constant value is invalid",
      "fullTitle": "#teamLeaderSelectionMethod should throw on set when constant value is invalid",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamLeaderSelectionMethod.all.slice().sort(<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> a - b;<br>        }).pop();<br>    s.teamLeaderSelectionMethod = ++high;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "0f731da4-9b80-4827-bb1f-a1c2d7cb11e8",
      "parentUUID": "3d8ea888-2908-4e2a-b7bf-300aba6eee02",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamLeaderSelectionMethod should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s.teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
      "isRoot": false,
      "uuid": "61dd92d0-14f9-49c6-997a-5319df8c6e65",
      "parentUUID": "3d8ea888-2908-4e2a-b7bf-300aba6eee02",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamNameEdit should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s._teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
      "isRoot": false,
      "uuid": "629d3d57-1238-4a36-a74a-32a52cd913fd",
      "parentUUID": "75ef43dc-5aa0-416f-95f6-6a7c5ccad663",
      "skipped": false
    },
    {
      "title": "should throw on set when constant value is invalid",
      "fullTitle": "#teamNameEdit should throw on set when constant value is invalid",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamNameEdit.all.slice().sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,<br>        b</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> a - b;<br>    }).pop();<br>    s.teamNameEdit = ++high;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "b0bf381b-e4b1-43c7-89e5-cd0cf4bcc73f",
      "parentUUID": "75ef43dc-5aa0-416f-95f6-6a7c5ccad663",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamNameEdit should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
      "isRoot": false,
      "uuid": "9196facd-7cae-4e66-a51c-679e844411da",
      "parentUUID": "75ef43dc-5aa0-416f-95f6-6a7c5ccad663",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#maxContestants should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br>s._maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "42b5f8d5-33c8-4302-945c-461d0dd9858c",
      "parentUUID": "d6140793-bfa4-451b-9f3e-45655eb7baa8",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#maxContestants should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxContestants = <span class=\"hljs-number\">1</span>;<br>s.maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "d674cde9-0b30-45d9-94e7-a8a9bd7325e7",
      "parentUUID": "d6140793-bfa4-451b-9f3e-45655eb7baa8",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#sessionName should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s._sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
      "isRoot": false,
      "uuid": "4ff878af-62bb-4dab-96cc-7903758c71da",
      "parentUUID": "243d9a63-2734-4930-b51e-f7af931d3f44",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#sessionName should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s.sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
      "isRoot": false,
      "uuid": "24f77d96-38b5-416a-97ff-73262515466c",
      "parentUUID": "243d9a63-2734-4930-b51e-f7af931d3f44",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamNames should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s._teamNames.should.be.Array();<br>s._teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s._teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
      "isRoot": false,
      "uuid": "eef3a369-4bf3-4420-844b-dc107a301a45",
      "parentUUID": "fcb45884-6f4e-4c4d-a5ab-fc2e81d53a1c",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamNames should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s.teamNames.should.be.Array();<br>s.teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
      "isRoot": false,
      "uuid": "997b5a56-7eb0-4c7a-a4bb-57ff03b6dc1d",
      "parentUUID": "fcb45884-6f4e-4c4d-a5ab-fc2e81d53a1c",
      "skipped": false
    },
    {
      "title": "should throw when settings.maxTeams is less than 1",
      "fullTitle": "#create(teams, settings) should throw when settings.maxTeams is less than 1",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    teamFactory.create(tc, s);<br>}).should.throw();",
      "isRoot": false,
      "uuid": "97f144b9-0a7b-4edf-8edc-ee8d05094fe6",
      "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
      "skipped": false
    },
    {
      "title": "should create the correct amount of teams",
      "fullTitle": "#create(teams, settings) should create the correct amount of teams",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "d5c12894-63a2-4270-b6d2-cb356ff53e2b",
      "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
      "skipped": false
    },
    {
      "title": "should not fail with a large team size",
      "fullTitle": "#create(teams, settings) should not fail with a large team size",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">500</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">500</span>);<br><span class=\"hljs-comment\">// ensure team names are unique</span><br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> i = names.indexOf(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> n === t.teamName;<br>    });<br>    i.should.equal(-<span class=\"hljs-number\">1</span>);<br>    names.push(t.teamName);<br>});",
      "isRoot": false,
      "uuid": "39f7989a-585d-407e-99f2-7a68356626de",
      "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
      "skipped": false
    },
    {
      "title": "should use settings.teamNames first, before random selection",
      "fullTitle": "#create(teams, settings) should use settings.teamNames first, before random selection",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">10</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>, <span class=\"hljs-string\">'t3'</span>, <span class=\"hljs-string\">'t4'</span>, <span class=\"hljs-string\">'t5'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);<br>tc.all[<span class=\"hljs-number\">2</span>].teamName.should.equal(<span class=\"hljs-string\">'t3'</span>);<br>tc.all[<span class=\"hljs-number\">3</span>].teamName.should.equal(<span class=\"hljs-string\">'t4'</span>);<br>tc.all[<span class=\"hljs-number\">4</span>].teamName.should.equal(<span class=\"hljs-string\">'t5'</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">5</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">6</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">7</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">8</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">9</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "a8b0ffba-6ed0-4159-b5e4-1eacfa799561",
      "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
      "skipped": false
    },
    {
      "title": "should only create a single team when using unlimited teams",
      "fullTitle": "#create(teams, settings) should only create a single team when using unlimited teams",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "152642b4-1bad-4b05-820f-527777b86efa",
      "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
      "skipped": false
    },
    {
      "title": "should add a team",
      "fullTitle": "#add(teams, settings) should add a team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>teamFactory.add(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "d9d8f609-8a1b-4fbb-a9f2-1c9955d9ea9c",
      "parentUUID": "e50f969b-98ae-4baa-8dad-27be4e430deb",
      "skipped": false
    },
    {
      "title": "should reuse team names specified in settings",
      "fullTitle": "#add(teams, settings) should reuse team names specified in settings",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>teamFactory.add(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);",
      "isRoot": false,
      "uuid": "95177dba-ada2-46f8-b58c-a9cfefefaef7",
      "parentUUID": "e50f969b-98ae-4baa-8dad-27be4e430deb",
      "skipped": false
    },
    {
      "title": "should factor in team names which are already in use",
      "fullTitle": "#add(teams, settings) should factor in team names which are already in use",
      "timedOut": false,
      "duration": 118,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    teamFactory.add(tc, s);<br>}<br>tc.all.length.should.equal(<span class=\"hljs-number\">1001</span>);<br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    names.push(t.teamName);<br>});<br><span class=\"hljs-keyword\">var</span> uniqueNames = unique(names);<br>names.length.should.equal(uniqueNames.length);",
      "isRoot": false,
      "uuid": "e1d6b244-00f1-4c63-9c74-da6a40115830",
      "parentUUID": "e50f969b-98ae-4baa-8dad-27be4e430deb",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamName should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t._teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
      "isRoot": false,
      "uuid": "d1c2200a-5d01-4bed-800d-82b8f5eafb45",
      "parentUUID": "bbf129e6-fde6-48c1-b7fa-4bd3307ed261",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamName should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t._teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t.teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
      "isRoot": false,
      "uuid": "b195a677-92f4-467f-98d6-ae188234c118",
      "parentUUID": "bbf129e6-fde6-48c1-b7fa-4bd3307ed261",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamLeader should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t.teamLeader = c;<br>t._teamLeader.should.equal(c);",
      "isRoot": false,
      "uuid": "9b386502-034a-4e55-89ad-2a34a2fde220",
      "parentUUID": "72db4fca-4288-41db-9dab-d63ffc2f4e85",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamLeader should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t._teamLeader = c;<br>t.teamLeader.should.equal(c);",
      "isRoot": false,
      "uuid": "fce64a48-342d-4157-94c7-12fceedc5a2e",
      "parentUUID": "72db4fca-4288-41db-9dab-d63ffc2f4e85",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#score should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "5bb225fd-9d2d-4c35-a63d-3c11c5ab7a35",
      "parentUUID": "39cdb8ee-63ab-4f31-b31c-943ea1231362",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#score should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br>p._score = <span class=\"hljs-number\">5</span>;<br>p.score.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "d3d7b7a0-83b8-4898-be63-303f6ac51cbc",
      "parentUUID": "39cdb8ee-63ab-4f31-b31c-943ea1231362",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#contestants should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "61ba3431-fc23-4665-8f40-db22708d2f17",
      "parentUUID": "a1a6e824-06b5-4f69-b7dd-b238b30a1b9d",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#contestants should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = p.contestants;<br>c.should.be.instanceOf(Participants);",
      "isRoot": false,
      "uuid": "ca496a20-8635-4281-95a9-fddb9f2c17b7",
      "parentUUID": "a1a6e824-06b5-4f69-b7dd-b238b30a1b9d",
      "skipped": false
    },
    {
      "title": "should update the teams score",
      "fullTitle": "when a contestant scores should update the teams score",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br>c1.incrementScore();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.incrementScore();<br>c2.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "64826332-9f05-4428-85fb-f97b2d5f89fa",
      "parentUUID": "33917cd5-2054-4f04-acc1-22af16a5736f",
      "skipped": false
    },
    {
      "title": "should allow it when no team leader is set",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should allow it when no team leader is set",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.id = <span class=\"hljs-string\">'c1'</span>;<br>t.contestants.add(c);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);",
      "isRoot": false,
      "uuid": "6ce14c7e-c26e-456f-862d-4c9f49ceede3",
      "parentUUID": "af7244ab-f2ab-4f62-b06b-b11a25b4ebed",
      "skipped": false
    },
    {
      "title": "should not allow it when a team leader is set",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should not allow it when a team leader is set",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);",
      "isRoot": false,
      "uuid": "4c31ffa1-a099-4e06-b3eb-2802799286b6",
      "parentUUID": "af7244ab-f2ab-4f62-b06b-b11a25b4ebed",
      "skipped": false
    },
    {
      "title": "should not allow it when a contestant is not in team",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should not allow it when a contestant is not in team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_NOT_CONTESTANT);",
      "isRoot": false,
      "uuid": "18ec4abc-6f79-4c03-a7a4-73eb49bf6045",
      "parentUUID": "af7244ab-f2ab-4f62-b06b-b11a25b4ebed",
      "skipped": false
    },
    {
      "title": "should allow it when a team leader is set and host override is flagged",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should allow it when a team leader is set and host override is flagged",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">true</span>);<br>r.should.be.true();<br>should.not.exist(m);",
      "isRoot": false,
      "uuid": "e91b7b6c-dc70-42ae-b3a4-d129640f8722",
      "parentUUID": "af7244ab-f2ab-4f62-b06b-b11a25b4ebed",
      "skipped": false
    },
    {
      "title": "should change name when request is valid",
      "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) should change name when request is valid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "3b99adad-2154-4f38-8734-26629e1e5fc6",
      "parentUUID": "dcb3537d-c975-46a4-9904-3d0905322b97",
      "skipped": false
    },
    {
      "title": "should not change name when setting do not allow it",
      "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) should not change name when setting do not allow it",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>r.should.be.false();",
      "isRoot": false,
      "uuid": "e16d1030-1719-4f74-bcdc-14c610f33bc2",
      "parentUUID": "dcb3537d-c975-46a4-9904-3d0905322b97",
      "skipped": false
    },
    {
      "title": "should not change name when name contains profanity",
      "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) should not change name when name contains profanity",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>r.should.be.false();",
      "isRoot": false,
      "uuid": "aae32499-100c-410f-bec8-caefece6edb4",
      "parentUUID": "dcb3537d-c975-46a4-9904-3d0905322b97",
      "skipped": false
    },
    {
      "title": "should change name when request is valid",
      "fullTitle": "when host override should change name when request is valid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "79212eef-c539-41cd-a88c-4155060af4bb",
      "parentUUID": "a841d216-4a4e-4a1b-9fb2-6b407191b06e",
      "skipped": false
    },
    {
      "title": "should change name when setting do not allow it",
      "fullTitle": "when host override should change name when setting do not allow it",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "2a524eea-05aa-49cb-baf3-d6a3748f6390",
      "parentUUID": "a841d216-4a4e-4a1b-9fb2-6b407191b06e",
      "skipped": false
    },
    {
      "title": "should change name when name contains profanity",
      "fullTitle": "when host override should change name when name contains profanity",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "26a28aab-287d-4dc9-bcce-37b7384e7c14",
      "parentUUID": "a841d216-4a4e-4a1b-9fb2-6b407191b06e",
      "skipped": false
    },
    {
      "title": "should get contestant when contest with username exists",
      "fullTitle": "getContestantByUsername(username) should get contestant when contest with username exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(c1.username);<br>c.should.equal(c1);<br>c = t.getContestantByUsername(<span class=\"hljs-string\">'c1abc'</span>);<br>c.should.equal(c1);",
      "isRoot": false,
      "uuid": "3c1cd1bb-b1d9-494b-9f96-ff8a6b8959ad",
      "parentUUID": "72668379-771c-43c3-a909-3aa5f7712d50",
      "skipped": false
    },
    {
      "title": "should not get contestant when contest with username does not exist",
      "fullTitle": "getContestantByUsername(username) should not get contestant when contest with username does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(<span class=\"hljs-string\">'John Doe'</span>);<br>should(c).be.null();",
      "isRoot": false,
      "uuid": "55938fa1-f860-4a68-847c-70d79701a158",
      "parentUUID": "72668379-771c-43c3-a909-3aa5f7712d50",
      "skipped": false
    },
    {
      "title": "should return true when team with teamName does exist",
      "fullTitle": "#contains(teamName) should return true when team with teamName does exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(t.teamName).should.be.true();",
      "isRoot": false,
      "uuid": "3a9bad1a-98b2-4540-b710-f45b6ed27d9e",
      "parentUUID": "4fb41ba3-bc75-4e52-b4da-ec7bafbbc2ce",
      "skipped": false
    },
    {
      "title": "should return false when no team with teamName does exist",
      "fullTitle": "#contains(teamName) should return false when no team with teamName does exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(<span class=\"hljs-string\">'other team name'</span>).should.be.false();",
      "isRoot": false,
      "uuid": "e0c645ed-3347-41f0-aed0-012c3e76034e",
      "parentUUID": "4fb41ba3-bc75-4e52-b4da-ec7bafbbc2ce",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#all should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.all = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "8c196fe5-1c36-4d6e-a025-7c192593d7c2",
      "parentUUID": "ed21b3ce-7c65-4f6b-8bce-33f2c643d7da",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#all should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
      "isRoot": false,
      "uuid": "ef7bb749-e4ac-4281-a962-b43ff5795013",
      "parentUUID": "ed21b3ce-7c65-4f6b-8bce-33f2c643d7da",
      "skipped": false
    },
    {
      "title": "should get copy of val and not reference",
      "fullTitle": "#all should get copy of val and not reference",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all.pop();<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
      "isRoot": false,
      "uuid": "a786e758-a78e-4a64-82e5-202581b36244",
      "parentUUID": "ed21b3ce-7c65-4f6b-8bce-33f2c643d7da",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#length should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.length = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "e4a2b718-de86-4062-afe1-d78de66176ce",
      "parentUUID": "2857f0df-712b-4a7b-b60b-2b1cb17e430f",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#length should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "3cc4ae3b-5c99-4af5-ac5c-b8493625259c",
      "parentUUID": "2857f0df-712b-4a7b-b60b-2b1cb17e430f",
      "skipped": false
    },
    {
      "title": "should add the given team",
      "fullTitle": "#add(team) should add the given team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
      "isRoot": false,
      "uuid": "d0dc0fe2-ef18-45a3-bf02-8d10fa919a16",
      "parentUUID": "831c28b2-a738-417d-aa2a-f5b3a2a79298",
      "skipped": false
    },
    {
      "title": "should error if team with teamName already exists",
      "fullTitle": "#add(team) should error if team with teamName already exists",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.add(t);<br>}).should.throw();",
      "isRoot": false,
      "uuid": "8f371893-502c-4feb-a491-7167269c6699",
      "parentUUID": "831c28b2-a738-417d-aa2a-f5b3a2a79298",
      "skipped": false
    },
    {
      "title": "should remove the existing team",
      "fullTitle": "#remove(team) should remove the existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "cb8d6e93-9471-43fe-a3db-26ff044570f4",
      "parentUUID": "cb85281e-0f5a-4178-96f6-1795c2b00f26",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing team",
      "fullTitle": "#remove(team) should not remove the non-existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t1).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "f989d680-857c-4a55-a1ba-6a095f8ed133",
      "parentUUID": "cb85281e-0f5a-4178-96f6-1795c2b00f26",
      "skipped": false
    },
    {
      "title": "should remove the existing team",
      "fullTitle": "#removeByTeamName(team) should remove the existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t.teamName).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "1e3e6768-7592-4e99-b6a0-e4566e98eb8f",
      "parentUUID": "211f5b44-a401-42a9-bd59-9a0374f1dc02",
      "skipped": false
    },
    {
      "title": "should ignore team name case",
      "fullTitle": "#removeByTeamName(team) should ignore team name case",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'abc1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(<span class=\"hljs-string\">'ABC1'</span>).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "9eafd450-7e1a-4a73-8b93-dc1e7747751d",
      "parentUUID": "211f5b44-a401-42a9-bd59-9a0374f1dc02",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing team",
      "fullTitle": "#removeByTeamName(team) should not remove the non-existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t1.teamName).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "77c86c71-aa0b-4151-b67b-42f5b81f8314",
      "parentUUID": "211f5b44-a401-42a9-bd59-9a0374f1dc02",
      "skipped": false
    },
    {
      "title": "should give contestant an id",
      "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) should give contestant an id",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Username'</span>;<br>should(c.id).be.null();<br>tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>should(c.id).not.be.null();",
      "isRoot": false,
      "uuid": "18f4973c-2427-4380-964d-32da4a4eb25d",
      "parentUUID": "a84f581b-8b23-436f-a030-ace45e4c4e60",
      "skipped": false
    },
    {
      "title": "should return a valid response",
      "fullTitle": "when teams are full should return a valid response",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);",
      "isRoot": false,
      "uuid": "ec890659-d6d0-421d-b591-04b39ed9b46d",
      "parentUUID": "5d942ab2-c907-42af-8f8c-08ca41f7779a",
      "skipped": false
    },
    {
      "title": "should inquire for team leader",
      "fullTitle": "when teamLeader selection is PLAYER_CHOICE should inquire for team leader",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> inquired = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    inquired = <span class=\"hljs-literal\">true</span>;<br>});<br>r.should.be.true();<br>inquired.should.be.true();",
      "isRoot": false,
      "uuid": "d969bea4-c071-4b17-8520-ced743e54cbe",
      "parentUUID": "9f146894-a549-4984-90ab-c5212213e9a8",
      "skipped": false
    },
    {
      "title": "should not inquire for team leader",
      "fullTitle": "when teamLeader selection is PLAYER_CHOICE should not inquire for team leader",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>tc.all[<span class=\"hljs-number\">0</span>].teamLeader = c1;<br><span class=\"hljs-keyword\">var</span> didNotInquire = <span class=\"hljs-literal\">true</span>;<br>tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    didNotInquire = <span class=\"hljs-literal\">false</span>;<br>});<br>didNotInquire.should.be.true();<br>t.teamLeader.should.equal(c1);",
      "isRoot": false,
      "uuid": "333393c5-86a6-49f8-93cf-b105df2fb2fb",
      "parentUUID": "9f146894-a549-4984-90ab-c5212213e9a8",
      "skipped": false
    },
    {
      "title": "should not add contestant as teamLeader",
      "fullTitle": "when teamLeader selection is PLAYER_CHOICE should not add contestant as teamLeader",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should(t.teamLeader).be.null();",
      "isRoot": false,
      "uuid": "d05450ef-90c3-4dae-bc1a-f2ba4b602b03",
      "parentUUID": "9f146894-a549-4984-90ab-c5212213e9a8",
      "skipped": false
    },
    {
      "title": "should not inquire for team leader",
      "fullTitle": "when teamLeader selection is RANDOM should not inquire for team leader",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> notInquired = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    notInquired = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>r.should.be.true();<br>notInquired.should.be.true();",
      "isRoot": false,
      "uuid": "3edf7926-5b9f-4f26-93ed-fed17d741dff",
      "parentUUID": "fc92b54a-d4c6-4c70-9eed-a7af6969965b",
      "skipped": false
    },
    {
      "title": "should automatically add team leader when team is filled",
      "fullTitle": "when teamLeader selection is RANDOM should automatically add team leader when team is filled",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).not.be.null();<br>});",
      "isRoot": false,
      "uuid": "47a3fd50-b769-42a2-acd9-26eb2e9f81dd",
      "parentUUID": "fc92b54a-d4c6-4c70-9eed-a7af6969965b",
      "skipped": false
    },
    {
      "title": "should not automatically add team leader when team is not filled",
      "fullTitle": "when teamLeader selection is RANDOM should not automatically add team leader when team is not filled",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).be.null();<br>});",
      "isRoot": false,
      "uuid": "74ead267-0a95-4f31-839b-179e76b14ce1",
      "parentUUID": "fc92b54a-d4c6-4c70-9eed-a7af6969965b",
      "skipped": false
    },
    {
      "title": "should add team when teams are full",
      "fullTitle": "when set to use unlimited teams should add team when teams are full",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "72052cac-690f-455c-8ea0-124527b4b7a6",
      "parentUUID": "7ea42ccd-f70e-4a95-872f-cc928d6420bc",
      "skipped": false
    },
    {
      "title": "should throw when no team name is given",
      "fullTitle": "when team selection method is PLAYER_CHOICE should throw when no team name is given",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>}).should.throw();",
      "isRoot": false,
      "uuid": "142935b5-3e96-49f9-bc45-ffa7ccb2e3eb",
      "parentUUID": "982d9c29-7ba9-415f-af11-6f2b6e1eadf8",
      "skipped": false
    },
    {
      "title": "should add contestant to correct team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should add contestant to correct team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "e0ac92a0-459a-49c3-ac0c-ce022941d272",
      "parentUUID": "982d9c29-7ba9-415f-af11-6f2b6e1eadf8",
      "skipped": false
    },
    {
      "title": "should not add to full team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should not add to full team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "6afa472a-4560-4e6c-99b8-68734764c4a3",
      "parentUUID": "982d9c29-7ba9-415f-af11-6f2b6e1eadf8",
      "skipped": false
    },
    {
      "title": "should get team of contestant",
      "fullTitle": "getByContestant(contestant) should get team of contestant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">5</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>    r.should.be.true();<br>});<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">4</span>]);<br>t.should.not.be.null();<br>t.contestants.getById(cc[<span class=\"hljs-number\">4</span>].id).should.equal(cc[<span class=\"hljs-number\">4</span>]);",
      "isRoot": false,
      "uuid": "3e12aeda-a499-42d8-9ebb-552e88fa9eaa",
      "parentUUID": "c4e64ff7-42ea-4d24-af8f-af488cee6781",
      "skipped": false
    },
    {
      "title": "should not get team of contestant",
      "fullTitle": "getByContestant(contestant) should not get team of contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">1</span>);<br>cc[<span class=\"hljs-number\">0</span>].id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">0</span>]);<br>should(t).be.null();",
      "isRoot": false,
      "uuid": "792c1281-3602-4d00-a10a-78e19a36c0d4",
      "parentUUID": "c4e64ff7-42ea-4d24-af8f-af488cee6781",
      "skipped": false
    },
    {
      "title": "should get team when team with name exists",
      "fullTitle": "getByTeamName(temName) should get team when team with name exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t1 = tc.all[<span class=\"hljs-number\">0</span>];<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(t1.teamName);<br>t.should.equal(t1);",
      "isRoot": false,
      "uuid": "a5804fca-4c38-4b4e-9930-601f22a69db6",
      "parentUUID": "88772f2f-5c74-4119-af9b-546eb1d70e85",
      "skipped": false
    },
    {
      "title": "should not get team when team with name does not exist",
      "fullTitle": "getByTeamName(temName) should not get team when team with name does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(<span class=\"hljs-string\">'Not a team name that exists'</span>);<br>should(t).be.null();",
      "isRoot": false,
      "uuid": "e49e8a43-234c-44dd-9505-0934e8e2d1c9",
      "parentUUID": "88772f2f-5c74-4119-af9b-546eb1d70e85",
      "skipped": false
    },
    {
      "title": "should not return full teams",
      "fullTitle": "getAvailable(settings) should not return full teams",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">2</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "651194a6-1b21-4c2a-9250-d433b68c5e09",
      "parentUUID": "c784e08f-53ab-4d4a-8413-d3fbe61baead",
      "skipped": false
    },
    {
      "title": "should return teams with space",
      "fullTitle": "getAvailable(settings) should return teams with space",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "ff355c44-3161-44c4-a64f-85508f166122",
      "parentUUID": "c784e08f-53ab-4d4a-8413-d3fbe61baead",
      "skipped": false
    },
    {
      "title": "should return teams with unlimited space",
      "fullTitle": "getAvailable(settings) should return teams with unlimited space",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = constants.UNLIMITED;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "3b2d4184-96a8-4efa-90dd-eb1ede23918d",
      "parentUUID": "c784e08f-53ab-4d4a-8413-d3fbe61baead",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should throw on set value",
      "fullTitle": "#wasSuccessful should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.wasSuccessful = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "5fdef681-1e03-421e-b5f3-00e001b2714b",
      "parentUUID": "f74ddc0d-31aa-4f66-9207-d4cf4f1123fd",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#wasSuccessful should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._wasSuccessful = <span class=\"hljs-literal\">true</span>;<br>r.wasSuccessful.should.be.true();",
      "isRoot": false,
      "uuid": "de271de1-f1e7-4ad4-acc3-59f39b9bc717",
      "parentUUID": "f74ddc0d-31aa-4f66-9207-d4cf4f1123fd",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#enquireForTeamLeaderPosition should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r._enquireForTeamLeaderPosition.should.be.true();",
      "isRoot": false,
      "uuid": "09508146-6fb7-4a42-945f-030bf97083fa",
      "parentUUID": "2f5788cc-9e58-41c8-815f-27aa8e7b16f9",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#enquireForTeamLeaderPosition should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._enquireForTeamLeaderPosition = <span class=\"hljs-literal\">true</span>;<br>r.enquireForTeamLeaderPosition.should.be.true();",
      "isRoot": false,
      "uuid": "88d15d22-a7e8-4386-b5e6-b78dc1953a9c",
      "parentUUID": "2f5788cc-9e58-41c8-815f-27aa8e7b16f9",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#errorMessage should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    r.errorMessage = <span class=\"hljs-string\">'test'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "d04cbac5-fc4d-43a1-b8bd-770632ad8df5",
      "parentUUID": "260659d4-c137-46d7-b6bc-4c4a36de0f90",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#errorMessage should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r._errorMessage = <span class=\"hljs-string\">'errorMessage_test'</span>;<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'errorMessage_test'</span>);",
      "isRoot": false,
      "uuid": "018e9318-a0f3-47e1-9c84-5e1caf607303",
      "parentUUID": "260659d4-c137-46d7-b6bc-4c4a36de0f90",
      "skipped": false
    },
    {
      "title": "should change the state to not successful",
      "fullTitle": "#setNotSuccessful(errorMessage) should change the state to not successful",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> AddContestantResponse();<br>r.setNotSuccessful(<span class=\"hljs-string\">'Test error message'</span>);<br>r.wasSuccessful.should.be.false();<br>r.errorMessage.should.equal(<span class=\"hljs-string\">'Test error message'</span>);",
      "isRoot": false,
      "uuid": "5aa78579-7268-4508-984b-a5d9efb0063c",
      "parentUUID": "44bb2a5b-3274-49a8-9706-bfe7b61f1bb5",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#username should set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'username_test'</span>;<br>c._username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
      "isRoot": false,
      "uuid": "45384aaf-8c21-4c93-bf5b-7e15a720eebc",
      "parentUUID": "c7be32a1-351e-4736-9676-c25c081d47ad",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#username should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._username = <span class=\"hljs-string\">'username_test'</span>;<br>c.username.should.equal(<span class=\"hljs-string\">'username_test'</span>);",
      "isRoot": false,
      "uuid": "5fc5afcd-0785-4046-b1a8-700acd2579e7",
      "parentUUID": "c7be32a1-351e-4736-9676-c25c081d47ad",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#score should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    c.score = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "431bfcb4-70a7-45f8-8013-cd7277fe13d9",
      "parentUUID": "2aa2d7d4-9e08-41cc-b305-573cd2c90ad5",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#score should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c._score = <span class=\"hljs-number\">1</span>;<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "a0a08f2b-4214-4b96-820a-1a8d61b76b82",
      "parentUUID": "2aa2d7d4-9e08-41cc-b305-573cd2c90ad5",
      "skipped": false
    },
    {
      "title": "should increment the contestant's score",
      "fullTitle": "#incrementScore() should increment the contestant's score",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.incrementScore();<br>c.score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "3d820727-7d9d-4a9a-bede-5895cb5cc1ba",
      "parentUUID": "ab0bcf7b-8b8a-457c-bf23-e02b6290f7fb",
      "skipped": false
    },
    {
      "title": "should emit scoreUpdate event",
      "fullTitle": "#incrementScore() should emit scoreUpdate event",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.on(<span class=\"hljs-string\">'scoreUpdate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    done();<br>});<br>c.incrementScore();",
      "isRoot": false,
      "uuid": "5f657b9b-c5d2-4932-b615-594c107cd8ff",
      "parentUUID": "ab0bcf7b-8b8a-457c-bf23-e02b6290f7fb",
      "skipped": false
    },
    {
      "title": "should return a non-null non-empty key",
      "fullTitle": "#generateSessionId() should return a non-null non-empty key",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.generateSessionId().should.not.be.equal(<span class=\"hljs-string\">''</span>).and.not.be.equal(<span class=\"hljs-literal\">null</span>);",
      "isRoot": false,
      "uuid": "b45a51e4-2044-4cba-a11f-fdedca24539f",
      "parentUUID": "da694a0b-4de4-46f4-afbb-4e3a06e85ebf",
      "skipped": false
    },
    {
      "title": "should return a id of the correct length",
      "fullTitle": "#generateSessionId() should return a id of the correct length",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.generateSessionId()<br>    .length.should.be.Number().and.equal(idUtility.keyLength);",
      "isRoot": false,
      "uuid": "6e3d2acb-4470-4ec9-906e-f49f6521f6c0",
      "parentUUID": "da694a0b-4de4-46f4-afbb-4e3a06e85ebf",
      "skipped": false
    },
    {
      "title": "should record id so it cannot be reused.",
      "fullTitle": "#generateSessionId() should record id so it cannot be reused.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> id = idUtility.generateSessionId();<br>idUtility._sessionKeysInUse.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cachedId</span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> cachedId === id;<br>}).should.equal(id);",
      "isRoot": false,
      "uuid": "51ec661f-7786-4fc5-880f-4ec5aad95a08",
      "parentUUID": "da694a0b-4de4-46f4-afbb-4e3a06e85ebf",
      "skipped": false
    },
    {
      "title": "should return a UUID",
      "fullTitle": "#generateParticipantId() should return a UUID",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.generateParticipantId()<br>    .should.match(<span class=\"hljs-regexp\">/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i</span>);",
      "isRoot": false,
      "uuid": "2c958a3e-c6c5-4ebf-a9e5-3c4867291154",
      "parentUUID": "51501f2e-a08d-4ddf-856a-86496a6f222d",
      "skipped": false
    },
    {
      "title": "should store the ids to stop reuse",
      "fullTitle": "#registerSessionIdsInUse(ids) should store the ids to stop reuse",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.length.should.be.aboveOrEqual(<span class=\"hljs-number\">2</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "f4b13744-5005-4c45-ae22-45ebab193a87",
      "parentUUID": "441a1892-65e4-4d8c-9a40-728a7437f1c0",
      "skipped": false
    },
    {
      "title": "should return a UUID",
      "fullTitle": "#releaseSessionId(id) should return a UUID",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "idUtility.registerSessionIdsInUse([<span class=\"hljs-string\">'111AAA'</span>, <span class=\"hljs-string\">'222AAA'</span>]);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'222AAA'</span>).should.be.aboveOrEqual(<span class=\"hljs-number\">0</span>);<br>idUtility.releaseSessionId(<span class=\"hljs-string\">'111AAA'</span>);<br>idUtility._sessionKeysInUse.indexOf(<span class=\"hljs-string\">'111AAA'</span>).should.equal(-<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "8c2bc308-c9f8-4988-8772-d41a3baf97ee",
      "parentUUID": "8a4669a7-1fba-43da-8905-4c350d2e2017",
      "skipped": false
    },
    {
      "title": "should return false when not referenced",
      "fullTitle": "#isInstanceAndTypeOf() should return false when not referenced",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf().should.be.false();",
      "isRoot": false,
      "uuid": "59f6abc8-9a88-440c-afaa-e0c7435396ab",
      "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
      "skipped": false
    },
    {
      "title": "should return false when null",
      "fullTitle": "#isInstanceAndTypeOf() should return false when null",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">''</span>).should.be.false();",
      "isRoot": false,
      "uuid": "d31707da-f146-459f-a6d7-6f6d47d10440",
      "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
      "skipped": false
    },
    {
      "title": "should return false when not the correct type",
      "fullTitle": "#isInstanceAndTypeOf() should return false when not the correct type",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-string\">''</span>, <span class=\"hljs-string\">'Int'</span>).should.be.false();",
      "isRoot": false,
      "uuid": "c6b4c355-3ed0-47e3-931b-2a21388fb1a3",
      "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
      "skipped": false
    },
    {
      "title": "should return true when is a built-in type",
      "fullTitle": "#isInstanceAndTypeOf() should return true when is a built-in type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'Number'</span>).should.be.true();",
      "isRoot": false,
      "uuid": "f32ace73-5c6e-478e-aa06-f949fd54b5d8",
      "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
      "skipped": false
    },
    {
      "title": "should return true when is user defined type",
      "fullTitle": "#isInstanceAndTypeOf() should return true when is user defined type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> ParamCheck().isInstanceAndTypeOf(<span class=\"hljs-keyword\">new</span> UserDefinedType(),<br>    UserDefinedType).should.be.true();",
      "isRoot": false,
      "uuid": "e8192223-921e-4c9c-bfdc-a3566787f7a1",
      "parentUUID": "f471992e-a193-4c04-a4aa-0a05e4cdb4b0",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#id should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'id_test'</span>;<br>p._id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "cb3a47d7-31a7-4743-91ec-12cd32d0bf69",
      "parentUUID": "8bcb4853-f7c1-4938-889b-789e37f393fd",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#id should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "93e28bd6-bc60-42c9-92ee-412f5f15f86c",
      "parentUUID": "8bcb4853-f7c1-4938-889b-789e37f393fd",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#isDisconnected should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    p.isDisconnected = <span class=\"hljs-literal\">false</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "8bda67a7-b4c3-4e6c-970c-d8a4ef4a4c9a",
      "parentUUID": "0a3922fb-8af2-4426-a364-dbdda37cf1d1",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#isDisconnected should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._id = <span class=\"hljs-string\">'id_test'</span>;<br>p.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "8aff310f-3646-4be7-aa97-8f3488482505",
      "parentUUID": "0a3922fb-8af2-4426-a364-dbdda37cf1d1",
      "skipped": false
    },
    {
      "title": "should change participant state to disconnected",
      "fullTitle": "#disconnect() should change participant state to disconnected",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">false</span>;<br>p.disconnect();<br>p.isDisconnected.should.be.true();",
      "isRoot": false,
      "uuid": "2225ea06-9bd0-4279-8aa6-adf85074a132",
      "parentUUID": "911f0b2d-8fd9-40ab-9e50-50c00fbd104b",
      "skipped": false
    },
    {
      "title": "should change participant state to connected",
      "fullTitle": "#reconnect() should change participant state to connected",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Participant();<br>p._disconnected = <span class=\"hljs-literal\">true</span>;<br>p.reconnect();<br>p.isDisconnected.should.be.false();",
      "isRoot": false,
      "uuid": "237e6ba7-a0a3-4493-8033-4e00f90b3746",
      "parentUUID": "d05f420b-650c-4752-95a8-3fec0159940b",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#all should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.all = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "7ae7e326-64db-4de1-bb9b-39a8a3a9c435",
      "parentUUID": "fdbfa351-fc4f-47e2-bc8b-a27cb6e726f4",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#all should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
      "isRoot": false,
      "uuid": "76a36e2e-c6a3-4d37-8104-00bf6243e1ea",
      "parentUUID": "fdbfa351-fc4f-47e2-bc8b-a27cb6e726f4",
      "skipped": false
    },
    {
      "title": "should get copy of val and not reference",
      "fullTitle": "#all should get copy of val and not reference",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.all.pop();<br>pc.all[<span class=\"hljs-number\">0</span>].should.equal(p);",
      "isRoot": false,
      "uuid": "0be17196-7eea-454b-a400-d37f65b4bd22",
      "parentUUID": "fdbfa351-fc4f-47e2-bc8b-a27cb6e726f4",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#length should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.length = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "dc373c19-7f76-4547-8873-e616605c64c9",
      "parentUUID": "24b3832d-0f0b-4d44-a51e-50cd857860d7",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#length should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br><span class=\"hljs-keyword\">var</span> pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "b6988ab7-3dcf-4694-9f0b-6f19bb46eb8c",
      "parentUUID": "24b3832d-0f0b-4d44-a51e-50cd857860d7",
      "skipped": false
    },
    {
      "title": "should return true when id does exist",
      "fullTitle": "#contains(id) should return true when id does exist",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(p.id).should.be.true();",
      "isRoot": false,
      "uuid": "7a444ab3-ffed-44ab-b927-b9c1d1d1d3d6",
      "parentUUID": "f3edd53d-91ff-47da-9b3a-05af9c78eaa3",
      "skipped": false
    },
    {
      "title": "should return false when id does not exist",
      "fullTitle": "#contains(id) should return false when id does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.contains(<span class=\"hljs-string\">'p2'</span>).should.be.false();",
      "isRoot": false,
      "uuid": "2faf9531-ce7e-4998-99a9-137d865bf17a",
      "parentUUID": "f3edd53d-91ff-47da-9b3a-05af9c78eaa3",
      "skipped": false
    },
    {
      "title": "should add the given participant",
      "fullTitle": "#add(participant) should add the given participant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc._participants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc._participants[<span class=\"hljs-number\">0</span>].should.equal(p);",
      "isRoot": false,
      "uuid": "bb59412b-c772-4dfb-85f0-39c539d935f6",
      "parentUUID": "866b53a2-681a-4795-a5f4-269824218164",
      "skipped": false
    },
    {
      "title": "should error if participant with id already exists",
      "fullTitle": "#add(participant) should error if participant with id already exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    pc.add(p);<br>}).should.throw();",
      "isRoot": false,
      "uuid": "ebc01bc5-4646-42bf-9f4e-935b5e5ea7fb",
      "parentUUID": "866b53a2-681a-4795-a5f4-269824218164",
      "skipped": false
    },
    {
      "title": "should emit add event",
      "fullTitle": "#add(participant) should emit add event",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.on(<span class=\"hljs-string\">'add'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">participant</span>) </span>{<br>    participant.should.equal(p);<br>    done();<br>});<br>pc.add(p);",
      "isRoot": false,
      "uuid": "bc3f98c0-9b4b-4344-8e4a-28e90ab6c65a",
      "parentUUID": "866b53a2-681a-4795-a5f4-269824218164",
      "skipped": false
    },
    {
      "title": "should remove the existing participant",
      "fullTitle": "#remove(participant) should remove the existing participant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "20103482-9342-4457-909d-c77cc2541bcd",
      "parentUUID": "4eb6750d-1da8-4f79-bdac-bc43240716bd",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing participant",
      "fullTitle": "#remove(participant) should not remove the non-existing participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.remove(p1).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "b3bc4d3d-3c52-442f-a9a4-a2943c0f38cc",
      "parentUUID": "4eb6750d-1da8-4f79-bdac-bc43240716bd",
      "skipped": false
    },
    {
      "title": "should remove the existing participant",
      "fullTitle": "#removeById(id) should remove the existing participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p = <span class=\"hljs-keyword\">new</span> Participant();<br>p.id = <span class=\"hljs-string\">'p1'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p.id).should.be.true();<br>pc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "44f25fe8-0c59-4ef3-8a8b-7ee6e7834f18",
      "parentUUID": "78b90355-f7fe-4790-947c-5e79745448e5",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing participant",
      "fullTitle": "#removeById(id) should not remove the non-existing participant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "p1 = <span class=\"hljs-keyword\">new</span> Participant();<br>p1.id = <span class=\"hljs-string\">'p1'</span>;<br>p2 = <span class=\"hljs-keyword\">new</span> Participant();<br>p2.id = <span class=\"hljs-string\">'p2'</span>;<br>pc = <span class=\"hljs-keyword\">new</span> Participants();<br>pc.add(p2);<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>pc.removeById(p1.id).should.be.false();<br>pc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "520876b4-8f2c-4dea-92bd-bbda974db2b4",
      "parentUUID": "78b90355-f7fe-4790-947c-5e79745448e5",
      "skipped": false
    },
    {
      "title": "should create teams",
      "fullTitle": "#constructor should create teams",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "63de7f60-c2e7-48e2-8209-0e798b238e2e",
      "parentUUID": "80705461-3b58-4ad9-b010-4844d2420045",
      "skipped": false
    },
    {
      "title": "should not create teams",
      "fullTitle": "#constructor should not create teams",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>should(s.teams).be.null();",
      "isRoot": false,
      "uuid": "2974110e-6da2-4258-b1a8-c00b13fc26a7",
      "parentUUID": "80705461-3b58-4ad9-b010-4844d2420045",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#id should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.id = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "063cd128-ea11-4817-a51a-b4ca86e21525",
      "parentUUID": "4a706c7b-fb3d-4c7a-b593-10e274883cdb",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#id should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.id.should.equal(<span class=\"hljs-string\">'id_test'</span>);",
      "isRoot": false,
      "uuid": "f2743b04-d183-4337-a041-71eaf8884290",
      "parentUUID": "4a706c7b-fb3d-4c7a-b593-10e274883cdb",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#roundsPlayed should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundsPlayed = <span class=\"hljs-string\">'SomeId'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "0b17e201-cd67-4660-aada-d1dc528bb045",
      "parentUUID": "e2d7a4f2-9543-48cb-b8d6-6478d2153138",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#roundsPlayed should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "b8069d97-0270-4038-99eb-7bfce7a1aa28",
      "parentUUID": "e2d7a4f2-9543-48cb-b8d6-6478d2153138",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#previousWinners should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.previousWinners = [<span class=\"hljs-string\">'SomeWinner'</span>];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "7b252007-a712-4a55-9bcd-bce93dac162a",
      "parentUUID": "bf8b1094-71b6-43fd-af63-c86c4b7db0d9",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#previousWinners should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._previousWinners = [<span class=\"hljs-string\">'Winner1'</span>, <span class=\"hljs-string\">'Winner2'</span>];<br>s.previousWinners.should.be.Array();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
      "isRoot": false,
      "uuid": "4fc7a5da-308b-4def-bdd7-c56cba85e54e",
      "parentUUID": "bf8b1094-71b6-43fd-af63-c86c4b7db0d9",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#roundWinner should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.roundWinner = <span class=\"hljs-string\">'SomeWinner'</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "7330289e-1c08-4e2b-869f-a5eccc6bfb7c",
      "parentUUID": "82816cca-e0a7-483c-8cfe-ac9503a93c31",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#roundWinner should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundWinner = <span class=\"hljs-string\">'Winner1'</span>;<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'Winner1'</span>);",
      "isRoot": false,
      "uuid": "d7860384-ade7-4c75-bb0c-9de1b123edc3",
      "parentUUID": "82816cca-e0a7-483c-8cfe-ac9503a93c31",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#observers should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.observers = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "de1d8d5d-019a-401d-bc54-7a2173fc1ab6",
      "parentUUID": "b2531c83-2487-4a84-842a-db549a7f2fe4",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#observers should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.observers.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.observers[<span class=\"hljs-number\">0</span>].should.equal(observer);",
      "isRoot": false,
      "uuid": "a77b512b-c6b7-4b01-90a4-fb29c9057e7d",
      "parentUUID": "b2531c83-2487-4a84-842a-db549a7f2fe4",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#contestants should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.contestants = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "5c8d4c9b-3632-4762-8d87-76f31d34437e",
      "parentUUID": "96006e5e-be43-41e2-b233-bec809784477",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#contestants should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> observer = <span class=\"hljs-keyword\">new</span> Observer();<br>observer.id = <span class=\"hljs-string\">'ob1'</span>;<br><span class=\"hljs-keyword\">var</span> contestant = <span class=\"hljs-keyword\">new</span> Contestant();<br>contestant.id = <span class=\"hljs-string\">'con1'</span>;<br>s._participants.add(observer);<br>s._participants.add(contestant);<br>s.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.contestants[<span class=\"hljs-number\">0</span>].should.equal(contestant);",
      "isRoot": false,
      "uuid": "5b545768-b58f-418a-87ed-2168d7fdc665",
      "parentUUID": "96006e5e-be43-41e2-b233-bec809784477",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#host should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    s.host = host;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "428dbf97-245a-4973-a448-08b53ec0c1f5",
      "parentUUID": "1a385f1e-df7c-4815-b0f5-49361dd4fa77",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#host should get value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.host.should.equal(host);",
      "isRoot": false,
      "uuid": "38794547-ebab-437d-b29f-7ff251a2ab87",
      "parentUUID": "1a385f1e-df7c-4815-b0f5-49361dd4fa77",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#currentState should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
      "isRoot": false,
      "uuid": "52c6fa5d-4035-4be0-9dfc-8158138b0b2c",
      "parentUUID": "1d522940-e5e3-4fe1-babf-3996682494ae",
      "skipped": false
    },
    {
      "title": "should increment rounds played",
      "fullTitle": "#incrementRoundsPlayed() should increment rounds played",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s._roundsPlayed = <span class=\"hljs-number\">1</span>;<br>s.incrementRoundsPlayed();<br>s.roundsPlayed.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "5eb23bfe-ad3b-4122-8dbb-9482549fc609",
      "parentUUID": "3cb1ef5e-73b3-4da7-a6ac-a096d8601c2e",
      "skipped": false
    },
    {
      "title": "should not allow a contestant username with bad words",
      "fullTitle": "#addContestant(contestant) should not allow a contestant username with bad words",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Penis #YOLO'</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_CONTAINS_PROFANITY);",
      "isRoot": false,
      "uuid": "b1b19e5f-400e-4199-9c03-7d17ebf301ff",
      "parentUUID": "c096e9e3-918e-4725-a8bb-15d7331ef950",
      "skipped": false
    },
    {
      "title": "should not allow when username is empty",
      "fullTitle": "#addContestant(contestant) should not allow when username is empty",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">' '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.equal(constants.messages.USERNAME_IS_REQUIRED);",
      "isRoot": false,
      "uuid": "9ccac712-55dd-4252-81ab-377d1ba5fdfe",
      "parentUUID": "c096e9e3-918e-4725-a8bb-15d7331ef950",
      "skipped": false
    },
    {
      "title": "should trim username",
      "fullTitle": "#addContestant(contestant) should trim username",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Wade  '</span>;<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>c.username.should.equal(<span class=\"hljs-string\">'Wade'</span>);",
      "isRoot": false,
      "uuid": "bdd03576-7297-4913-9cf3-80fa261cbc2e",
      "parentUUID": "c096e9e3-918e-4725-a8bb-15d7331ef950",
      "skipped": false
    },
    {
      "title": "should add contestant when session is not full",
      "fullTitle": "when in individual mode should add contestant when session is not full",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
      "isRoot": false,
      "uuid": "8393a213-983a-4eae-8cd3-1f72a8108f35",
      "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
      "skipped": false
    },
    {
      "title": "should not add contestant when session is full",
      "fullTitle": "when in individual mode should not add contestant when session is full",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br>s.addContestant(c2);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();",
      "isRoot": false,
      "uuid": "d064d1cc-ec52-422c-a832-f3ab8821471a",
      "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
      "skipped": false
    },
    {
      "title": "should not add contestant when username is already taken",
      "fullTitle": "when in individual mode should not add contestant when username is already taken",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
      "isRoot": false,
      "uuid": "b4e3f3b5-ddeb-4767-83a9-1e365f15f934",
      "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
      "skipped": false
    },
    {
      "title": "BUG# username case should not matter",
      "fullTitle": "when in individual mode BUG# username case should not matter",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'abc1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'ABC1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
      "isRoot": false,
      "uuid": "692dba00-c031-4ade-994f-7f9fe16dde84",
      "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
      "skipped": false
    },
    {
      "title": "should allow unlimited contestants when max is set to constants.UNLIMITED",
      "fullTitle": "when in individual mode should allow unlimited contestants when max is set to constants.UNLIMITED",
      "timedOut": false,
      "duration": 561,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = constants.UNLIMITED;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>    c.username = <span class=\"hljs-string\">'c'</span> + i;<br>    <span class=\"hljs-keyword\">var</span> response = s.addContestant(c);<br>    response.wasSuccessful.should.be.true();<br>}",
      "isRoot": false,
      "uuid": "9195ff51-7830-4194-9dea-92ec8477ae07",
      "parentUUID": "22bd91b7-056a-4c14-8e31-3ab6880d5881",
      "skipped": false
    },
    {
      "title": "should add contestant when teams is not full",
      "fullTitle": "when in team mode should add contestant when teams is not full",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();",
      "isRoot": false,
      "uuid": "a0a99d32-36d8-40d9-9d01-a821fda7f382",
      "parentUUID": "80839e57-70af-45c3-9595-3bef74fa3ad0",
      "skipped": false
    },
    {
      "title": "should not add contestant when teams are full",
      "fullTitle": "when in team mode should not add contestant when teams are full",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> c3 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c3.username = <span class=\"hljs-string\">'c3'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c1);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.true();<br>response = s.addContestant(c3);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.TEAMS_ARE_FULL);",
      "isRoot": false,
      "uuid": "5fa6be27-4091-4042-b651-e18cf335cdff",
      "parentUUID": "80839e57-70af-45c3-9595-3bef74fa3ad0",
      "skipped": false
    },
    {
      "title": "should not add contestant when username is already taken",
      "fullTitle": "when in team mode should not add contestant when username is already taken",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">2</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1);<br><span class=\"hljs-keyword\">var</span> response = s.addContestant(c2);<br>response.should.not.be.null();<br>response.wasSuccessful.should.be.false();<br>response.errorMessage.should.be.equal(constants.messages.USERNAME_TAKEN);",
      "isRoot": false,
      "uuid": "c6cee961-4402-48a6-a28e-70808877aaab",
      "parentUUID": "80839e57-70af-45c3-9595-3bef74fa3ad0",
      "skipped": false
    },
    {
      "title": "should subscribe callback to the correct event",
      "fullTitle": "#subscribeForStateChange(event, callback) should subscribe callback to the correct event",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> r = s.addContestant(c);<br>r.wasSuccessful.should.be.true();<br>s.subscribeForStateChange(<span class=\"hljs-string\">'onpending'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">session, event, from, to</span>) </span>{<br>    session.should.equal(s);<br>    event.should.equal(<span class=\"hljs-string\">'buzzerPressed'</span>);<br>    from.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>    to.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>    done();<br>});<br>s.tryBuzzerPressRegister(c.id).should.be.true();",
      "isRoot": false,
      "uuid": "c16f08ab-133f-4dee-b116-baca5bdc67a5",
      "parentUUID": "f4583c9f-e613-4399-a9af-b815ceff16bb",
      "skipped": false
    },
    {
      "title": "should register when state is ready",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should register when state is ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);",
      "isRoot": false,
      "uuid": "d33dbbd6-cea7-49b8-a504-eeb0872264f4",
      "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
      "skipped": false
    },
    {
      "title": "should not register when state is not ready",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not register when state is not ready",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.false();",
      "isRoot": false,
      "uuid": "d8344cc4-2112-44bc-a3b5-26f02f739162",
      "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
      "skipped": false
    },
    {
      "title": "should not register when contestant does not exist",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not register when contestant does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(idUtility.generateParticipantId()).should.be.false();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);",
      "isRoot": false,
      "uuid": "14eeacea-660e-4008-be1c-844047f8fed5",
      "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
      "skipped": false
    },
    {
      "title": "should not replace previous round winner with pending contestant",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not replace previous round winner with pending contestant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "4b1a7297-afda-4f30-9fc3-bcdd4b2bf56c",
      "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
      "skipped": false
    },
    {
      "title": "should not add previous round winner to winners list",
      "fullTitle": "tryBuzzerPressRegister(contestantId) should not add previous round winner to winners list",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "72fa47d6-ee8d-4266-97c1-314f2a751083",
      "parentUUID": "d7fc7b0c-affa-4e4c-a047-35e20fd54a12",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->ACCEPT should allow when game state is pending",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();",
      "isRoot": false,
      "uuid": "df6374b4-31c7-4c46-bb30-fb18b47a5777",
      "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
      "skipped": false
    },
    {
      "title": "should not allow when game state is not pending",
      "fullTitle": "action->ACCEPT should not allow when game state is not pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.false();",
      "isRoot": false,
      "uuid": "f0acc954-88f6-40c7-812b-1ee533cc6b9d",
      "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
      "skipped": false
    },
    {
      "title": "should update contestant's score",
      "fullTitle": "action->ACCEPT should update contestant's score",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "8c5c8499-21df-44f1-9447-884615eaa3f6",
      "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
      "skipped": false
    },
    {
      "title": "should update contestant's team score",
      "fullTitle": "action->ACCEPT should update contestant's team score",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.roundWinner.should.equal(<span class=\"hljs-string\">'testUser1'</span>);<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>s.teams.all[<span class=\"hljs-number\">0</span>].score.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "a0870634-9c9d-4514-8bfc-38eb941723b6",
      "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
      "skipped": false
    },
    {
      "title": "should add previous round winner to winners list",
      "fullTitle": "action->ACCEPT should add previous round winner to winners list",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.previousWinners.length.should.equal(<span class=\"hljs-number\">1</span>);<br>s.previousWinners[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "ac456de4-76f5-4bcd-b8dc-6d72f919c066",
      "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
      "skipped": false
    },
    {
      "title": "should change game state back to ready",
      "fullTitle": "action->ACCEPT should change game state back to ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "dacdc0a0-08b0-42c1-b030-4544d21ef369",
      "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
      "skipped": false
    },
    {
      "title": "should clear pending winner",
      "fullTitle": "action->ACCEPT should clear pending winner",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>should(s.pendingWinner).be.null();",
      "isRoot": false,
      "uuid": "01ccad4d-a9f9-432f-8a89-7ef6afc0fa65",
      "parentUUID": "907b9719-7c40-42e7-8250-7e7db6ab49b9",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->REJECT should allow when game state is pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();",
      "isRoot": false,
      "uuid": "0346dc32-0160-4439-ba68-67c7bc77cc00",
      "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
      "skipped": false
    },
    {
      "title": "should not allow when game state is not pending",
      "fullTitle": "action->REJECT should not allow when game state is not pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.false();",
      "isRoot": false,
      "uuid": "c585d4c7-de4f-49d7-88ab-a54f8bf4356b",
      "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
      "skipped": false
    },
    {
      "title": "should not replace round winner with pending contestant",
      "fullTitle": "action->REJECT should not replace round winner with pending contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "599c86c9-46c7-4274-a8e0-eccab2651a5f",
      "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
      "skipped": false
    },
    {
      "title": "should not update pending contestant's score",
      "fullTitle": "action->REJECT should not update pending contestant's score",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.score.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "4c10678d-d558-4c38-9bbc-ca50f9c29e87",
      "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
      "skipped": false
    },
    {
      "title": "should add round winner to previous winners list",
      "fullTitle": "action->REJECT should add round winner to previous winners list",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "a82afb79-bf80-4244-a02c-b51ea29fc659",
      "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
      "skipped": false
    },
    {
      "title": "should change game state back to ready",
      "fullTitle": "action->REJECT should change game state back to ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.REJECT).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "285f461a-5f95-4b71-a31f-7d1d1e3291be",
      "parentUUID": "bd4e6c92-37f7-4697-b2f2-1971dfb18d35",
      "skipped": false
    },
    {
      "title": "should allow when game state is ready",
      "fullTitle": "action->RESET should allow when game state is ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
      "isRoot": false,
      "uuid": "8506b443-0310-4e69-ae8c-06a250075389",
      "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->RESET should allow when game state is pending",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();",
      "isRoot": false,
      "uuid": "51e1f0d6-6abe-4c15-a91a-b680543d82c0",
      "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
      "skipped": false
    },
    {
      "title": "should not replace previous round winner with pending contestant",
      "fullTitle": "action->RESET should not replace previous round winner with pending contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "ad6fed69-0aa2-453c-b3c3-7b615f159468",
      "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
      "skipped": false
    },
    {
      "title": "should add previous round winner to winners list",
      "fullTitle": "action->RESET should add previous round winner to winners list",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "1e695cb2-bb50-4af1-acf7-472aa6b7d9be",
      "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
      "skipped": false
    },
    {
      "title": "should change game state back to ready",
      "fullTitle": "action->RESET should change game state back to ready",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.RESET).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "009ba1f3-d9a8-4661-8429-15ff7cdf246e",
      "parentUUID": "859df7c9-144b-4682-b2da-130992793f65",
      "skipped": false
    },
    {
      "title": "should allow when game state is ready",
      "fullTitle": "action->DISABLE should allow when game state is ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
      "isRoot": false,
      "uuid": "a69c52ca-55db-4e46-9143-6d28779f3afe",
      "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
      "skipped": false
    },
    {
      "title": "should allow when game state is pending",
      "fullTitle": "action->DISABLE should allow when game state is pending",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();",
      "isRoot": false,
      "uuid": "176e840e-4ec2-4303-a220-3fa1e29cecac",
      "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
      "skipped": false
    },
    {
      "title": "should not replace previous round winner with pending contestant",
      "fullTitle": "action->DISABLE should not replace previous round winner with pending contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "34ebe248-9dd5-4655-9bbb-105ebcda37ab",
      "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
      "skipped": false
    },
    {
      "title": "should add previous round winner to winners list",
      "fullTitle": "action->DISABLE should add previous round winner to winners list",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.addContestant(c2).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ACCEPT).should.be.true();<br>s.tryBuzzerPressRegister(c2.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>should(s.roundWinner).be.null();<br>s.previousWinners.pop().should.equal(<span class=\"hljs-string\">'testUser1'</span>);",
      "isRoot": false,
      "uuid": "fad79af4-7ab1-4f9a-bafd-10c28ac76633",
      "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
      "skipped": false
    },
    {
      "title": "should change game state to buzzerLock",
      "fullTitle": "action->DISABLE should change game state to buzzerLock",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c1).wasSuccessful.should.be.true();<br>s.tryBuzzerPressRegister(c1.id).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.BUZZER_LOCK);",
      "isRoot": false,
      "uuid": "a0745eea-7447-45a9-a220-1f288d42d6ab",
      "parentUUID": "f735bf8f-7a2b-44ae-a724-7d812ca23c1c",
      "skipped": false
    },
    {
      "title": "should allow when game state is buzzerLock",
      "fullTitle": "action->ENABLE should allow when game state is buzzerLock",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();",
      "isRoot": false,
      "uuid": "8afd74b8-1fe6-4661-8d9c-c0f771795cda",
      "parentUUID": "c81a0878-4615-4254-abae-de14193b35f2",
      "skipped": false
    },
    {
      "title": "should not allow when game state is not buzzerLock",
      "fullTitle": "action->ENABLE should not allow when game state is not buzzerLock",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.false();",
      "isRoot": false,
      "uuid": "dbf4af56-c6fe-4ffd-95b0-cf0b446001c3",
      "parentUUID": "c81a0878-4615-4254-abae-de14193b35f2",
      "skipped": false
    },
    {
      "title": "should change game state to ready",
      "fullTitle": "action->ENABLE should change game state to ready",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.tryBuzzerAction(constants.buzzerActionCommands.DISABLE).should.be.true();<br>s.tryBuzzerAction(constants.buzzerActionCommands.ENABLE).should.be.true();<br>s.currentState.should.equal(constants.gameStates.READY);",
      "isRoot": false,
      "uuid": "83be9f54-2660-4eed-bac2-2d87f5cea112",
      "parentUUID": "c81a0878-4615-4254-abae-de14193b35f2",
      "skipped": false
    },
    {
      "title": "should return the pending winner",
      "fullTitle": "#pendingWinner should return the pending winner",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>s.tryBuzzerPressRegister(c.id).should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'pending'</span>);<br>s.pendingWinner.should.equal(<span class=\"hljs-string\">'testUser'</span>);",
      "isRoot": false,
      "uuid": "ae9f39bc-3f09-486a-9239-8c2107df9210",
      "parentUUID": "58979f2a-9a7e-48ef-a2e2-790295c8e849",
      "skipped": false
    },
    {
      "title": "should not return the pending winner",
      "fullTitle": "#pendingWinner should not return the pending winner",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'testUser'</span>;<br>settings.maxContestants = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.addContestant(c).wasSuccessful.should.be.true();<br>s.currentState.should.equal(<span class=\"hljs-string\">'ready'</span>);<br>should(s.pendingWinner).be.null();",
      "isRoot": false,
      "uuid": "8f7e7ac3-d367-4d01-a2d3-b4acfd53f7dc",
      "parentUUID": "58979f2a-9a7e-48ef-a2e2-790295c8e849",
      "skipped": false
    },
    {
      "title": "should update session name",
      "fullTitle": "#updateSessionName(name) should update session name",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br>s.updateSessionName(<span class=\"hljs-string\">'session2'</span>);<br>settings.sessionName.should.equal(<span class=\"hljs-string\">'session2'</span>);",
      "isRoot": false,
      "uuid": "a4ba8128-d5b1-4142-907b-9bbaaa5fbb11",
      "parentUUID": "81df9373-1625-4bb3-a867-3b0fc59e47c3",
      "skipped": false
    },
    {
      "title": "should update max contestants",
      "fullTitle": "#updateMaxContestants(maxContestants) should update max contestants",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "24981638-c735-4ff5-a5fc-3609d8e9b50c",
      "parentUUID": "bc4dfd09-aea7-4fb9-a8a3-44934e164133",
      "skipped": false
    },
    {
      "title": "should not allow below current connected amount",
      "fullTitle": "#updateMaxContestants(maxContestants) should not allow below current connected amount",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.maxContestants = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'testUser1'</span>;<br>s.addContestant(c1).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'testUser2'</span>;<br>s.addContestant(c2).wasSuccessful.should.be.true();<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxContestants(<span class=\"hljs-number\">1</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_CONTESTANTS_MUST_BE_GREATER_THAN_ALREADY_CONNECTED);<br>settings.maxContestants.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "848dd4d9-2a18-4c8a-94f9-d94fbac9e3a8",
      "parentUUID": "bc4dfd09-aea7-4fb9-a8a3-44934e164133",
      "skipped": false
    },
    {
      "title": "should update team size",
      "fullTitle": "#updateTeamSize(teamSize) should update team size",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.teamSize.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "eea7f9ef-0d7c-4d72-bb06-7d7ca757cf14",
      "parentUUID": "18844933-31ba-4130-89e7-61500a668d55",
      "skipped": false
    },
    {
      "title": "should not allow below current setting",
      "fullTitle": "#updateTeamSize(teamSize) should not allow below current setting",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateTeamSize(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.TEAM_SIZE_MUST_BE_GREATER_THAN_ALREADY_SET);",
      "isRoot": false,
      "uuid": "2bbbf2a4-dd30-44f5-8b50-f66c4826e8d3",
      "parentUUID": "18844933-31ba-4130-89e7-61500a668d55",
      "skipped": false
    },
    {
      "title": "should update max teams",
      "fullTitle": "#updateMaxTeams(maxTeams) should update max teams",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">2</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>settings.maxTeams.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "a1403855-46ce-406c-805d-3ce7c032217e",
      "parentUUID": "06034981-0511-4bc1-bfb6-6532f69a57c1",
      "skipped": false
    },
    {
      "title": "should add teams",
      "fullTitle": "#updateMaxTeams(maxTeams) should add teams",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">1</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">5</span>);<br>r.should.be.true();<br>should.not.exist(e);<br>s.teams.length.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "2faaca23-33ff-4336-80c9-251d26b11a75",
      "parentUUID": "06034981-0511-4bc1-bfb6-6532f69a57c1",
      "skipped": false
    },
    {
      "title": "should not allow below current setting",
      "fullTitle": "#updateMaxTeams(maxTeams) should not allow below current setting",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">1</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">4</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_MUST_BE_GREATER_THAN_ALREADY_SET);",
      "isRoot": false,
      "uuid": "aea2518d-ebae-4e4f-993b-18190623c153",
      "parentUUID": "06034981-0511-4bc1-bfb6-6532f69a57c1",
      "skipped": false
    },
    {
      "title": "should not allow if teams are PLAYER_CHOICE",
      "fullTitle": "#updateMaxTeams(maxTeams) should not allow if teams are PLAYER_CHOICE",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "settings.hasTeams = <span class=\"hljs-literal\">true</span>;<br>settings.teamSize = <span class=\"hljs-number\">5</span>;<br>settings.maxTeams = <span class=\"hljs-number\">5</span>;<br>settings.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br>settings.sessionName = <span class=\"hljs-string\">'session1'</span>;<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Session(id, settings, host);<br><span class=\"hljs-keyword\">var</span> [r, e] = s.updateMaxTeams(<span class=\"hljs-number\">6</span>);<br>r.should.be.false();<br>e.should.equal(constants.messages.MAX_TEAMS_CANNOT_BE_CHANGED_WHEN_PLAYER_CHOICE);",
      "isRoot": false,
      "uuid": "e4adf056-878a-40fd-97dd-dcc47e693b36",
      "parentUUID": "06034981-0511-4bc1-bfb6-6532f69a57c1",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#all should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    sc.all = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "43140f9e-9ff0-4800-9e71-26bd1e5320b9",
      "parentUUID": "58edba13-c4a9-49a9-b7d0-3ded8dad5819",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#all should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
      "isRoot": false,
      "uuid": "eea2a6d0-1e08-49b8-8730-25d5a7beb1b4",
      "parentUUID": "58edba13-c4a9-49a9-b7d0-3ded8dad5819",
      "skipped": false
    },
    {
      "title": "should get copy of val and not reference",
      "fullTitle": "#all should get copy of val and not reference",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "s = <span class=\"hljs-keyword\">new</span> Session(<span class=\"hljs-string\">'s1'</span>, <span class=\"hljs-keyword\">new</span> Settings(), <span class=\"hljs-keyword\">new</span> Host());<br><span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc._sessions.push(s);<br>sc.all.pop();<br>sc.all[<span class=\"hljs-number\">0</span>].should.equal(s);",
      "isRoot": false,
      "uuid": "69ddf7ad-18e3-4c64-8493-c717931e8da8",
      "parentUUID": "58edba13-c4a9-49a9-b7d0-3ded8dad5819",
      "skipped": false
    },
    {
      "title": "add and return session",
      "fullTitle": "#add(host, settings) add and return session",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-keyword\">var</span> ses = sc.add(h, s);<br>ses.should.be.instanceof(Session);",
      "isRoot": false,
      "uuid": "e56871ca-137a-48c0-bb6b-411fa3e02ec7",
      "parentUUID": "29837c6f-77a9-4ea4-b38a-190b2f9381e2",
      "skipped": false
    },
    {
      "title": "when given valid id should return session",
      "fullTitle": "#getById(id) when given valid id should return session",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br><span class=\"hljs-keyword\">var</span> h = <span class=\"hljs-keyword\">new</span> Host();<br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br><span class=\"hljs-comment\">/* eslint-disable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses1 = sc.add(h, s);<br><span class=\"hljs-comment\">/* eslint-enable no-unused-vars */</span><br><span class=\"hljs-keyword\">var</span> ses2 = sc.add(h, s);<br><span class=\"hljs-keyword\">var</span> sessionLocate = sc.getById(ses2.id);<br>sessionLocate.should.be.instanceof(Session)<br>    .and.equal(ses2);",
      "isRoot": false,
      "uuid": "f548f552-6866-46ad-87d1-6e2eccaa6ac6",
      "parentUUID": "8cd01a6a-f5f2-4fd8-8e99-ff11bf1291c7",
      "skipped": false
    },
    {
      "title": "should remove complete sc",
      "fullTitle": "#purgeCompleted() should remove complete sc",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> sc = <span class=\"hljs-keyword\">new</span> Sessions();<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.add(<span class=\"hljs-keyword\">new</span> Host(), <span class=\"hljs-keyword\">new</span> Settings());<br>sc.all[<span class=\"hljs-number\">0</span>].complete();<br>sc.all[<span class=\"hljs-number\">1</span>].complete();<br>sc.purgeCompleted();<br>sc.all.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "0767989d-1dca-40e0-920c-a605e75cffc0",
      "parentUUID": "7ca47d67-f130-48ce-ba8f-ee134b3fe4b9",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#hasTeams should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s._hasTeams.should.be.true();",
      "isRoot": false,
      "uuid": "7f2c604e-fc1c-4a63-9d07-c000fc8f2700",
      "parentUUID": "dca5d607-45b1-4f15-8936-d08172958893",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#hasTeams should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.hasTeams.should.be.true();",
      "isRoot": false,
      "uuid": "beabccb8-365b-4d58-bc2f-970fcd50bfc4",
      "parentUUID": "dca5d607-45b1-4f15-8936-d08172958893",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamSize should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s._teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "3d4f0481-c73a-4a51-a78c-c9cc8e8032e1",
      "parentUUID": "2f1c8671-387e-46d8-a738-bff92cc60d59",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamSize should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamSize = <span class=\"hljs-number\">1</span>;<br>s.teamSize.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "e07f282c-be63-4026-a7ea-011d6039d635",
      "parentUUID": "2f1c8671-387e-46d8-a738-bff92cc60d59",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#maxTeams should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s._maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "2c2d9892-1453-4900-b5b6-831e2f79fe63",
      "parentUUID": "1742aecf-f305-46a2-a322-a66b7cf8b586",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#maxTeams should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxTeams = <span class=\"hljs-number\">1</span>;<br>s.maxTeams.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "146ce7e4-3035-4266-ba31-a1bb4814a4e5",
      "parentUUID": "1742aecf-f305-46a2-a322-a66b7cf8b586",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamLeaderSelectionMethod should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s._teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
      "isRoot": false,
      "uuid": "af52ee11-f7ae-4a12-9b17-fda4e59aa235",
      "parentUUID": "3d8ea888-2908-4e2a-b7bf-300aba6eee02",
      "skipped": false
    },
    {
      "title": "should throw on set when constant value is invalid",
      "fullTitle": "#teamLeaderSelectionMethod should throw on set when constant value is invalid",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamLeaderSelectionMethod.all.slice().sort(<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) </span>{<br>            <span class=\"hljs-keyword\">return</span> a - b;<br>        }).pop();<br>    s.teamLeaderSelectionMethod = ++high;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "8bc7fcde-699d-4321-a6a5-b7cad8f2cb9a",
      "parentUUID": "3d8ea888-2908-4e2a-b7bf-300aba6eee02",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamLeaderSelectionMethod should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br>s.teamLeaderSelectionMethod.should.be.equal(constants.teamLeaderSelectionMethod<br>    .PLAYER_CHOICE);",
      "isRoot": false,
      "uuid": "f0db71a4-37fd-41b2-b1a3-373b6eac8bae",
      "parentUUID": "3d8ea888-2908-4e2a-b7bf-300aba6eee02",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamNameEdit should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br>s._teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
      "isRoot": false,
      "uuid": "7c72dc92-5a70-4044-a096-5cb1d520d081",
      "parentUUID": "75ef43dc-5aa0-416f-95f6-6a7c5ccad663",
      "skipped": false
    },
    {
      "title": "should throw on set when constant value is invalid",
      "fullTitle": "#teamNameEdit should throw on set when constant value is invalid",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> high = constants.teamNameEdit.all.slice().sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,<br>        b</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> a - b;<br>    }).pop();<br>    s.teamNameEdit = ++high;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "fe290e68-6c91-40d3-b188-1f659793e0a1",
      "parentUUID": "75ef43dc-5aa0-416f-95f6-6a7c5ccad663",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamNameEdit should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNameEdit = constants.teamNameEdit.ALLOW;<br>s.teamNameEdit.should.be.equal(constants.teamNameEdit.ALLOW);",
      "isRoot": false,
      "uuid": "287f351f-6231-44e5-bd3b-25e4a5808611",
      "parentUUID": "75ef43dc-5aa0-416f-95f6-6a7c5ccad663",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#maxContestants should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.maxContestants = <span class=\"hljs-number\">1</span>;<br>s._maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "6426ff5b-e054-4024-91ab-81939b03feda",
      "parentUUID": "d6140793-bfa4-451b-9f3e-45655eb7baa8",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#maxContestants should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._maxContestants = <span class=\"hljs-number\">1</span>;<br>s.maxContestants.should.be.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "f8d1803d-e8cf-4b9f-b231-97b240bd21d9",
      "parentUUID": "d6140793-bfa4-451b-9f3e-45655eb7baa8",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#sessionName should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s._sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
      "isRoot": false,
      "uuid": "be89069d-1db6-44dd-8ee8-5a9f324e1cde",
      "parentUUID": "243d9a63-2734-4930-b51e-f7af931d3f44",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#sessionName should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._sessionName = <span class=\"hljs-string\">'sessionName'</span>;<br>s.sessionName.should.be.equal(<span class=\"hljs-string\">'sessionName'</span>);",
      "isRoot": false,
      "uuid": "c0817367-7903-400a-b000-1bb14085ee58",
      "parentUUID": "243d9a63-2734-4930-b51e-f7af931d3f44",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamNames should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s._teamNames.should.be.Array();<br>s._teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s._teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
      "isRoot": false,
      "uuid": "996d111f-fd1f-4c00-aa8f-45e99c58f4c4",
      "parentUUID": "fcb45884-6f4e-4c4d-a5ab-fc2e81d53a1c",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamNames should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s._teamNames = [<span class=\"hljs-string\">'n1'</span>, <span class=\"hljs-string\">'n2'</span>];<br>s.teamNames.should.be.Array();<br>s.teamNames.length.should.equal(<span class=\"hljs-number\">2</span>);<br>s.teamNames[<span class=\"hljs-number\">0</span>].should.equal(<span class=\"hljs-string\">'n1'</span>);",
      "isRoot": false,
      "uuid": "d973bbb5-8ffb-436c-94e3-37fe63367430",
      "parentUUID": "fcb45884-6f4e-4c4d-a5ab-fc2e81d53a1c",
      "skipped": false
    },
    {
      "title": "should throw when settings.maxTeams is less than 1",
      "fullTitle": "#create(teams, settings) should throw when settings.maxTeams is less than 1",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    teamFactory.create(tc, s);<br>}).should.throw();",
      "isRoot": false,
      "uuid": "3012cdc4-f5b6-4aa5-b652-18aa12a6759a",
      "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
      "skipped": false
    },
    {
      "title": "should create the correct amount of teams",
      "fullTitle": "#create(teams, settings) should create the correct amount of teams",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "0352e15b-0b0e-48ee-9cf6-9c4b375abb27",
      "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
      "skipped": false
    },
    {
      "title": "should not fail with a large team size",
      "fullTitle": "#create(teams, settings) should not fail with a large team size",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">500</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.length.should.equal(<span class=\"hljs-number\">500</span>);<br><span class=\"hljs-comment\">// ensure team names are unique</span><br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> i = names.indexOf(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> n === t.teamName;<br>    });<br>    i.should.equal(-<span class=\"hljs-number\">1</span>);<br>    names.push(t.teamName);<br>});",
      "isRoot": false,
      "uuid": "3057cc82-b94d-40e6-8d2c-f89b7240247a",
      "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
      "skipped": false
    },
    {
      "title": "should use settings.teamNames first, before random selection",
      "fullTitle": "#create(teams, settings) should use settings.teamNames first, before random selection",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">10</span>;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>, <span class=\"hljs-string\">'t3'</span>, <span class=\"hljs-string\">'t4'</span>, <span class=\"hljs-string\">'t5'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);<br>tc.all[<span class=\"hljs-number\">2</span>].teamName.should.equal(<span class=\"hljs-string\">'t3'</span>);<br>tc.all[<span class=\"hljs-number\">3</span>].teamName.should.equal(<span class=\"hljs-string\">'t4'</span>);<br>tc.all[<span class=\"hljs-number\">4</span>].teamName.should.equal(<span class=\"hljs-string\">'t5'</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">5</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">6</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">7</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">8</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);<br>teamFactory._names.indexOf(tc.all[<span class=\"hljs-number\">9</span>].teamName).should.be.above(-<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "46973933-8e9b-4671-aa8b-b4a46008a526",
      "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
      "skipped": false
    },
    {
      "title": "should only create a single team when using unlimited teams",
      "fullTitle": "#create(teams, settings) should only create a single team when using unlimited teams",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "ac243262-16f7-4ce1-a8e8-ec649565502f",
      "parentUUID": "0a6ff8eb-940f-4f7b-aa40-7f709fb02add",
      "skipped": false
    },
    {
      "title": "should add a team",
      "fullTitle": "#add(teams, settings) should add a team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>teamFactory.add(tc, s);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "63b04612-b5b5-4e95-a2d6-03ac3f075b1b",
      "parentUUID": "e50f969b-98ae-4baa-8dad-27be4e430deb",
      "skipped": false
    },
    {
      "title": "should reuse team names specified in settings",
      "fullTitle": "#add(teams, settings) should reuse team names specified in settings",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br>teamFactory.add(tc, s);<br>tc.all[<span class=\"hljs-number\">0</span>].teamName.should.equal(<span class=\"hljs-string\">'t1'</span>);<br>tc.all[<span class=\"hljs-number\">1</span>].teamName.should.equal(<span class=\"hljs-string\">'t2'</span>);",
      "isRoot": false,
      "uuid": "7abe1fba-f58d-4442-b0e7-1a926162034b",
      "parentUUID": "e50f969b-98ae-4baa-8dad-27be4e430deb",
      "skipped": false
    },
    {
      "title": "should factor in team names which are already in use",
      "fullTitle": "#add(teams, settings) should factor in team names which are already in use",
      "timedOut": false,
      "duration": 118,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">5</span>;<br>s.teamNames = [<span class=\"hljs-string\">'t1'</span>, <span class=\"hljs-string\">'t2'</span>];<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {<br>    teamFactory.add(tc, s);<br>}<br>tc.all.length.should.equal(<span class=\"hljs-number\">1001</span>);<br><span class=\"hljs-keyword\">var</span> names = [];<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    names.push(t.teamName);<br>});<br><span class=\"hljs-keyword\">var</span> uniqueNames = unique(names);<br>names.length.should.equal(uniqueNames.length);",
      "isRoot": false,
      "uuid": "5051aab4-ac81-4ef4-8db0-af59f5cd52d7",
      "parentUUID": "e50f969b-98ae-4baa-8dad-27be4e430deb",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamName should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t._teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
      "isRoot": false,
      "uuid": "ddd72c4d-1757-4b15-ac68-d7635cadb3ce",
      "parentUUID": "bbf129e6-fde6-48c1-b7fa-4bd3307ed261",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamName should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t._teamName = <span class=\"hljs-string\">'teamName_test'</span>;<br>t.teamName.should.equal(<span class=\"hljs-string\">'teamName_test'</span>);",
      "isRoot": false,
      "uuid": "2aefc154-f3af-4db0-9155-0397f78f06f4",
      "parentUUID": "bbf129e6-fde6-48c1-b7fa-4bd3307ed261",
      "skipped": false
    },
    {
      "title": "should set value",
      "fullTitle": "#teamLeader should set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t.teamLeader = c;<br>t._teamLeader.should.equal(c);",
      "isRoot": false,
      "uuid": "7e4477bb-d604-4662-b57b-babf2a2d90c4",
      "parentUUID": "72db4fca-4288-41db-9dab-d63ffc2f4e85",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#teamLeader should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>t._teamLeader = c;<br>t.teamLeader.should.equal(c);",
      "isRoot": false,
      "uuid": "47ec9be7-1518-4da4-8992-fa86ab69c19f",
      "parentUUID": "72db4fca-4288-41db-9dab-d63ffc2f4e85",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#score should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "ed15f478-fa88-4a90-b692-3edcc0d6e8c9",
      "parentUUID": "39cdb8ee-63ab-4f31-b31c-943ea1231362",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#score should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br>p._score = <span class=\"hljs-number\">5</span>;<br>p.score.should.equal(<span class=\"hljs-number\">5</span>);",
      "isRoot": false,
      "uuid": "fab70131-e489-4089-a7a0-44917c1f2d1e",
      "parentUUID": "39cdb8ee-63ab-4f31-b31c-943ea1231362",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#contestants should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    t.score = <span class=\"hljs-number\">1</span>;<br>}).should.throw();",
      "isRoot": false,
      "uuid": "3f06fde6-fc1d-427f-89d2-501aa9a2795e",
      "parentUUID": "a1a6e824-06b5-4f69-b7dd-b238b30a1b9d",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#contestants should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = p.contestants;<br>c.should.be.instanceOf(Participants);",
      "isRoot": false,
      "uuid": "993caa5b-22e0-4792-b18f-aaee922582ee",
      "parentUUID": "a1a6e824-06b5-4f69-b7dd-b238b30a1b9d",
      "skipped": false
    },
    {
      "title": "should update the teams score",
      "fullTitle": "when a contestant scores should update the teams score",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br>c1.incrementScore();<br>c1.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">1</span>);<br>c2.incrementScore();<br>c2.score.should.equal(<span class=\"hljs-number\">1</span>);<br>t.score.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "8c8db59a-cc47-4559-a4cd-fd5758a7a693",
      "parentUUID": "33917cd5-2054-4f04-acc1-22af16a5736f",
      "skipped": false
    },
    {
      "title": "should allow it when no team leader is set",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should allow it when no team leader is set",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.id = <span class=\"hljs-string\">'c1'</span>;<br>t.contestants.add(c);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);",
      "isRoot": false,
      "uuid": "42db8313-fef1-42fb-ae10-1acced747dec",
      "parentUUID": "af7244ab-f2ab-4f62-b06b-b11a25b4ebed",
      "skipped": false
    },
    {
      "title": "should not allow it when a team leader is set",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should not allow it when a team leader is set",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_FULFILLED);",
      "isRoot": false,
      "uuid": "1fc5d29e-50f0-4160-a446-88eb3ee88d18",
      "parentUUID": "af7244ab-f2ab-4f62-b06b-b11a25b4ebed",
      "skipped": false
    },
    {
      "title": "should not allow it when a contestant is not in team",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should not allow it when a contestant is not in team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">false</span>);<br>r.should.be.false();<br>m.should.equal(constants.messages.COULD_NOT_PROMOTE_TO_TEAM_LEADER_POSITION_NOT_CONTESTANT);",
      "isRoot": false,
      "uuid": "ba129e40-aa89-4858-ba51-baf2e74fd218",
      "parentUUID": "af7244ab-f2ab-4f62-b06b-b11a25b4ebed",
      "skipped": false
    },
    {
      "title": "should allow it when a team leader is set and host override is flagged",
      "fullTitle": "tryAssignTeamLeader(contestant, hostOverride) should allow it when a team leader is set and host override is flagged",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> [r, m] = t.tryAssignTeamLeader(c1, <span class=\"hljs-literal\">false</span>);<br>r.should.be.true();<br>should.not.exist(m);<br>[r, m] = t.tryAssignTeamLeader(c2, <span class=\"hljs-literal\">true</span>);<br>r.should.be.true();<br>should.not.exist(m);",
      "isRoot": false,
      "uuid": "3f30d1ce-7fb4-4b2d-ade9-cdc45097e3b4",
      "parentUUID": "af7244ab-f2ab-4f62-b06b-b11a25b4ebed",
      "skipped": false
    },
    {
      "title": "should change name when request is valid",
      "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) should change name when request is valid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "691e3e8b-d6a1-42b8-8efa-60e1c2df7b72",
      "parentUUID": "dcb3537d-c975-46a4-9904-3d0905322b97",
      "skipped": false
    },
    {
      "title": "should not change name when setting do not allow it",
      "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) should not change name when setting do not allow it",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_SETTINGS_NOT_ALLOW);<br>r.should.be.false();",
      "isRoot": false,
      "uuid": "a137b695-7196-455b-a0fe-e62934910513",
      "parentUUID": "dcb3537d-c975-46a4-9904-3d0905322b97",
      "skipped": false
    },
    {
      "title": "should not change name when name contains profanity",
      "fullTitle": "tryChangeTeamName(teamName, settings, hostOverride) should not change name when name contains profanity",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">false</span>);<br>em.should.equal(constants.messages.COULD_NOT_ACCEPT_TEAM_NAME_CONTAINS_PROFANITY);<br>r.should.be.false();",
      "isRoot": false,
      "uuid": "c0c9e6ae-5d3e-497e-b7bc-e250b85f6e25",
      "parentUUID": "dcb3537d-c975-46a4-9904-3d0905322b97",
      "skipped": false
    },
    {
      "title": "should change name when request is valid",
      "fullTitle": "when host override should change name when request is valid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "972e92c4-c73f-4dc2-b18a-7f79993c6b57",
      "parentUUID": "a841d216-4a4e-4a1b-9fb2-6b407191b06e",
      "skipped": false
    },
    {
      "title": "should change name when setting do not allow it",
      "fullTitle": "when host override should change name when setting do not allow it",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.MANUAL;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'test'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "e7e642ea-8ba6-4f3a-ae77-94bc6b91d4dd",
      "parentUUID": "a841d216-4a4e-4a1b-9fb2-6b407191b06e",
      "skipped": false
    },
    {
      "title": "should change name when name contains profanity",
      "fullTitle": "when host override should change name when name contains profanity",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamNameEdit = constants.teamNameEdit.ALLOW;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> [r, em] = t.tryChangeName(<span class=\"hljs-string\">'You are all an ash0le'</span>, s, <span class=\"hljs-literal\">true</span>);<br>should.not.exist(em);<br>r.should.be.true();",
      "isRoot": false,
      "uuid": "cf9af018-f30e-414b-bc7f-69e7aff929a9",
      "parentUUID": "a841d216-4a4e-4a1b-9fb2-6b407191b06e",
      "skipped": false
    },
    {
      "title": "should get contestant when contest with username exists",
      "fullTitle": "getContestantByUsername(username) should get contestant when contest with username exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(c1.username);<br>c.should.equal(c1);<br>c = t.getContestantByUsername(<span class=\"hljs-string\">'c1abc'</span>);<br>c.should.equal(c1);",
      "isRoot": false,
      "uuid": "712a8a97-2d18-4579-bc78-b617e1b01cb1",
      "parentUUID": "72668379-771c-43c3-a909-3aa5f7712d50",
      "skipped": false
    },
    {
      "title": "should not get contestant when contest with username does not exist",
      "fullTitle": "getContestantByUsername(username) should not get contestant when contest with username does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.id = <span class=\"hljs-string\">'c1'</span>;<br>c1.username = <span class=\"hljs-string\">'c1ABC'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.id = <span class=\"hljs-string\">'c2'</span>;<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br>t.contestants.add(c1);<br>t.contestants.add(c2);<br><span class=\"hljs-keyword\">var</span> c = t.getContestantByUsername(<span class=\"hljs-string\">'John Doe'</span>);<br>should(c).be.null();",
      "isRoot": false,
      "uuid": "a83e7640-c6cf-43b4-a268-a672b32f6352",
      "parentUUID": "72668379-771c-43c3-a909-3aa5f7712d50",
      "skipped": false
    },
    {
      "title": "should return true when team with teamName does exist",
      "fullTitle": "#contains(teamName) should return true when team with teamName does exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(t.teamName).should.be.true();",
      "isRoot": false,
      "uuid": "8310773e-c7b8-413f-8e6a-10ef9ae5ed95",
      "parentUUID": "4fb41ba3-bc75-4e52-b4da-ec7bafbbc2ce",
      "skipped": false
    },
    {
      "title": "should return false when no team with teamName does exist",
      "fullTitle": "#contains(teamName) should return false when no team with teamName does exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'tameName test'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.contains(<span class=\"hljs-string\">'other team name'</span>).should.be.false();",
      "isRoot": false,
      "uuid": "26688d8c-98f7-4b47-abb0-5a90d07f1f05",
      "parentUUID": "4fb41ba3-bc75-4e52-b4da-ec7bafbbc2ce",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#all should throw on set value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.all = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "8b850388-6d7f-4a5f-bcfb-c42eddc27a01",
      "parentUUID": "ed21b3ce-7c65-4f6b-8bce-33f2c643d7da",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#all should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
      "isRoot": false,
      "uuid": "c9c03f92-81f2-4aa9-8095-240466967179",
      "parentUUID": "ed21b3ce-7c65-4f6b-8bce-33f2c643d7da",
      "skipped": false
    },
    {
      "title": "should get copy of val and not reference",
      "fullTitle": "#all should get copy of val and not reference",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.all.pop();<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
      "isRoot": false,
      "uuid": "6ba9c96d-aff6-4e30-9a96-dae125984b52",
      "parentUUID": "ed21b3ce-7c65-4f6b-8bce-33f2c643d7da",
      "skipped": false
    },
    {
      "title": "should throw on set value",
      "fullTitle": "#length should throw on set value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.length = [];<br>}).should.throw();",
      "isRoot": false,
      "uuid": "8a53fb0d-7b30-4858-954e-2add8700eb34",
      "parentUUID": "2857f0df-712b-4a7b-b60b-2b1cb17e430f",
      "skipped": false
    },
    {
      "title": "should get value",
      "fullTitle": "#length should get value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "2ac92c5d-2896-41a0-a3b7-590fbd0244a1",
      "parentUUID": "2857f0df-712b-4a7b-b60b-2b1cb17e430f",
      "skipped": false
    },
    {
      "title": "should add the given team",
      "fullTitle": "#add(team) should add the given team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.all[<span class=\"hljs-number\">0</span>].should.equal(t);",
      "isRoot": false,
      "uuid": "fffb5227-d076-4cc8-8e64-8dd7e03c6383",
      "parentUUID": "831c28b2-a738-417d-aa2a-f5b3a2a79298",
      "skipped": false
    },
    {
      "title": "should error if team with teamName already exists",
      "fullTitle": "#add(team) should error if team with teamName already exists",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.add(t);<br>}).should.throw();",
      "isRoot": false,
      "uuid": "bb8cc6c2-2f4b-4000-a8c2-a9ab87ce1dbd",
      "parentUUID": "831c28b2-a738-417d-aa2a-f5b3a2a79298",
      "skipped": false
    },
    {
      "title": "should remove the existing team",
      "fullTitle": "#remove(team) should remove the existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "56a1dcba-c4e3-4835-8a7d-d63f4fbb4058",
      "parentUUID": "cb85281e-0f5a-4178-96f6-1795c2b00f26",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing team",
      "fullTitle": "#remove(team) should not remove the non-existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.remove(t1).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "723f30be-0d24-4dc2-88a7-b669430e18be",
      "parentUUID": "cb85281e-0f5a-4178-96f6-1795c2b00f26",
      "skipped": false
    },
    {
      "title": "should remove the existing team",
      "fullTitle": "#removeByTeamName(team) should remove the existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t.teamName).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "f48f3a36-1391-428d-8358-55558792b81e",
      "parentUUID": "211f5b44-a401-42a9-bd59-9a0374f1dc02",
      "skipped": false
    },
    {
      "title": "should ignore team name case",
      "fullTitle": "#removeByTeamName(team) should ignore team name case",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'abc1'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(<span class=\"hljs-string\">'ABC1'</span>).should.be.true();<br>tc.length.should.equal(<span class=\"hljs-number\">0</span>);",
      "isRoot": false,
      "uuid": "4d5eb790-ac12-450e-a820-db2441378fd0",
      "parentUUID": "211f5b44-a401-42a9-bd59-9a0374f1dc02",
      "skipped": false
    },
    {
      "title": "should not remove the non-existing team",
      "fullTitle": "#removeByTeamName(team) should not remove the non-existing team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t1 = <span class=\"hljs-keyword\">new</span> Team();<br>t1.teamName = <span class=\"hljs-string\">'t1'</span>;<br>t2 = <span class=\"hljs-keyword\">new</span> Team();<br>t2.teamName = <span class=\"hljs-string\">'t2'</span>;<br>tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t2);<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);<br>tc.removeByTeamName(t1.teamName).should.be.false();<br>tc.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "823031e5-9a12-431b-9254-93f4cc8b7283",
      "parentUUID": "211f5b44-a401-42a9-bd59-9a0374f1dc02",
      "skipped": false
    },
    {
      "title": "should give contestant an id",
      "fullTitle": "addContestant(contestant, settings, inquireTeamLeaderCallback, teamName) should give contestant an id",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> Contestant();<br>c.username = <span class=\"hljs-string\">'Username'</span>;<br>should(c.id).be.null();<br>tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>should(c.id).not.be.null();",
      "isRoot": false,
      "uuid": "6b943e38-5684-410c-bee6-9577a69678a5",
      "parentUUID": "a84f581b-8b23-436f-a030-ace45e4c4e60",
      "skipped": false
    },
    {
      "title": "should return a valid response",
      "fullTitle": "when teams are full should return a valid response",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);",
      "isRoot": false,
      "uuid": "79de9a76-6ae3-4e3a-91d4-d9f83fdae56e",
      "parentUUID": "5d942ab2-c907-42af-8f8c-08ca41f7779a",
      "skipped": false
    },
    {
      "title": "should inquire for team leader",
      "fullTitle": "when teamLeader selection is PLAYER_CHOICE should inquire for team leader",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> inquired = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    inquired = <span class=\"hljs-literal\">true</span>;<br>});<br>r.should.be.true();<br>inquired.should.be.true();",
      "isRoot": false,
      "uuid": "150b5ab8-763a-4807-a237-69f6754edc6f",
      "parentUUID": "9f146894-a549-4984-90ab-c5212213e9a8",
      "skipped": false
    },
    {
      "title": "should not inquire for team leader",
      "fullTitle": "when teamLeader selection is PLAYER_CHOICE should not inquire for team leader",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>tc.all[<span class=\"hljs-number\">0</span>].teamLeader = c1;<br><span class=\"hljs-keyword\">var</span> didNotInquire = <span class=\"hljs-literal\">true</span>;<br>tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    didNotInquire = <span class=\"hljs-literal\">false</span>;<br>});<br>didNotInquire.should.be.true();<br>t.teamLeader.should.equal(c1);",
      "isRoot": false,
      "uuid": "328491a8-bd7e-409e-8322-ff08bbb50727",
      "parentUUID": "9f146894-a549-4984-90ab-c5212213e9a8",
      "skipped": false
    },
    {
      "title": "should not add contestant as teamLeader",
      "fullTitle": "when teamLeader selection is PLAYER_CHOICE should not add contestant as teamLeader",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should(t.teamLeader).be.null();",
      "isRoot": false,
      "uuid": "86d0208f-26ee-4eca-b033-477133ad6a62",
      "parentUUID": "9f146894-a549-4984-90ab-c5212213e9a8",
      "skipped": false
    },
    {
      "title": "should not inquire for team leader",
      "fullTitle": "when teamLeader selection is RANDOM should not inquire for team leader",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">1</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> notInquired = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    notInquired = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>});<br>r.should.be.true();<br>notInquired.should.be.true();",
      "isRoot": false,
      "uuid": "b454adba-1895-4099-a806-79ac487c974d",
      "parentUUID": "fc92b54a-d4c6-4c70-9eed-a7af6969965b",
      "skipped": false
    },
    {
      "title": "should automatically add team leader when team is filled",
      "fullTitle": "when teamLeader selection is RANDOM should automatically add team leader when team is filled",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">2</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).not.be.null();<br>});",
      "isRoot": false,
      "uuid": "eacbcc9c-c735-458e-a173-8f1db9eac780",
      "parentUUID": "fc92b54a-d4c6-4c70-9eed-a7af6969965b",
      "skipped": false
    },
    {
      "title": "should not automatically add team leader when team is not filled",
      "fullTitle": "when teamLeader selection is RANDOM should not automatically add team leader when team is not filled",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">2</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamLeaderSelectionMethod = constants.teamLeaderSelectionMethod.RANDOM;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">4</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br>tc.length.should.equal(<span class=\"hljs-number\">2</span>);<br>tc.all.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{<br>    should(t.teamLeader).be.null();<br>});",
      "isRoot": false,
      "uuid": "92649020-acf4-4bf7-a936-a2576de5a5ed",
      "parentUUID": "fc92b54a-d4c6-4c70-9eed-a7af6969965b",
      "skipped": false
    },
    {
      "title": "should add team when teams are full",
      "fullTitle": "when set to use unlimited teams should add team when teams are full",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = constants.UNLIMITED;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-keyword\">new</span> Team();<br>t.teamName = <span class=\"hljs-string\">'t1'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>tc.add(t);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">1</span>);<br>[r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>r.should.be.true();<br>should.not.exist(em);<br>tc.all.length.should.equal(<span class=\"hljs-number\">2</span>);",
      "isRoot": false,
      "uuid": "53e059e0-f361-40cc-8c67-42f3f9e74929",
      "parentUUID": "7ea42ccd-f70e-4a95-872f-cc928d6420bc",
      "skipped": false
    },
    {
      "title": "should throw when no team name is given",
      "fullTitle": "when team selection method is PLAYER_CHOICE should throw when no team name is given",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>    tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>}).should.throw();",
      "isRoot": false,
      "uuid": "5c69348f-cf1f-4b09-a4bb-52de3b5925d2",
      "parentUUID": "982d9c29-7ba9-415f-af11-6f2b6e1eadf8",
      "skipped": false
    },
    {
      "title": "should add contestant to correct team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should add contestant to correct team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "947e6407-827e-466d-8dc8-018c845f2e18",
      "parentUUID": "982d9c29-7ba9-415f-af11-6f2b6e1eadf8",
      "skipped": false
    },
    {
      "title": "should not add to full team",
      "fullTitle": "when team selection method is PLAYER_CHOICE should not add to full team",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br>s.teamSelectionMethod = constants.teamSelectionMethod.PLAYER_CHOICE;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> c1 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c1.username = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> c2 = <span class=\"hljs-keyword\">new</span> Contestant();<br>c2.username = <span class=\"hljs-string\">'c2'</span>;<br><span class=\"hljs-keyword\">var</span> teamName = tc.all[<span class=\"hljs-number\">1</span>].teamName;<br><span class=\"hljs-keyword\">var</span> [r, em] = tc.addContestant(c1, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.true();<br>should.not.exist(em);<br>[r, em] = tc.addContestant(c2, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}, teamName);<br>r.should.be.false();<br>em.should.equal(constants.messages.TEAMS_ARE_FULL);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(teamName);<br>t.contestants.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "5be05063-56cc-4d0a-8387-5fb1dabb84b7",
      "parentUUID": "982d9c29-7ba9-415f-af11-6f2b6e1eadf8",
      "skipped": false
    },
    {
      "title": "should get team of contestant",
      "fullTitle": "getByContestant(contestant) should get team of contestant",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">5</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> [r] = tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>    r.should.be.true();<br>});<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">4</span>]);<br>t.should.not.be.null();<br>t.contestants.getById(cc[<span class=\"hljs-number\">4</span>].id).should.equal(cc[<span class=\"hljs-number\">4</span>]);",
      "isRoot": false,
      "uuid": "fcabb72e-6de4-418b-b82f-8c10d05aac5a",
      "parentUUID": "c4e64ff7-42ea-4d24-af8f-af488cee6781",
      "skipped": false
    },
    {
      "title": "should not get team of contestant",
      "fullTitle": "getByContestant(contestant) should not get team of contestant",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">1</span>);<br>cc[<span class=\"hljs-number\">0</span>].id = <span class=\"hljs-string\">'c1'</span>;<br><span class=\"hljs-keyword\">var</span> t = tc.getByContestant(cc[<span class=\"hljs-number\">0</span>]);<br>should(t).be.null();",
      "isRoot": false,
      "uuid": "300cb1d4-4cfc-4278-88f2-737b6c674421",
      "parentUUID": "c4e64ff7-42ea-4d24-af8f-af488cee6781",
      "skipped": false
    },
    {
      "title": "should get team when team with name exists",
      "fullTitle": "getByTeamName(temName) should get team when team with name exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t1 = tc.all[<span class=\"hljs-number\">0</span>];<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(t1.teamName);<br>t.should.equal(t1);",
      "isRoot": false,
      "uuid": "5438a3d4-ddda-4a24-b579-f77db0e5785d",
      "parentUUID": "88772f2f-5c74-4119-af9b-546eb1d70e85",
      "skipped": false
    },
    {
      "title": "should not get team when team with name does not exist",
      "fullTitle": "getByTeamName(temName) should not get team when team with name does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">5</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> t = tc.getByTeamName(<span class=\"hljs-string\">'Not a team name that exists'</span>);<br>should(t).be.null();",
      "isRoot": false,
      "uuid": "906bd792-4088-4698-b3cf-81460735295f",
      "parentUUID": "88772f2f-5c74-4119-af9b-546eb1d70e85",
      "skipped": false
    },
    {
      "title": "should not return full teams",
      "fullTitle": "getAvailable(settings) should not return full teams",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">1</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">2</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "d6a97c8e-e635-413c-90fd-0b77b04fe8c6",
      "parentUUID": "c784e08f-53ab-4d4a-8413-d3fbe61baead",
      "skipped": false
    },
    {
      "title": "should return teams with space",
      "fullTitle": "getAvailable(settings) should return teams with space",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = <span class=\"hljs-number\">3</span>;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "3ba51b69-7ba6-43f1-a92a-30a49c2239d2",
      "parentUUID": "c784e08f-53ab-4d4a-8413-d3fbe61baead",
      "skipped": false
    },
    {
      "title": "should return teams with unlimited space",
      "fullTitle": "getAvailable(settings) should return teams with unlimited space",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Settings();<br>s.hasTeams = <span class=\"hljs-literal\">true</span>;<br>s.maxTeams = <span class=\"hljs-number\">3</span>;<br>s.teamSize = constants.UNLIMITED;<br>s.sessionName = <span class=\"hljs-string\">'s'</span>;<br><span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-keyword\">new</span> Teams();<br>teamFactory.create(tc, s);<br><span class=\"hljs-keyword\">var</span> cc = generateContestants(<span class=\"hljs-number\">3</span>);<br>cc.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) </span>{<br>    tc.addContestant(c, s, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});<br>});<br><span class=\"hljs-keyword\">var</span> teams = tc.getAvailable(s);<br>teams.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "d759a302-0e25-4ca9-a318-4ac4ad099537",
      "parentUUID": "c784e08f-53ab-4d4a-8413-d3fbe61baead",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}